[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"checkstyle {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"    mainClass.set(\"shenhe.Shenhe\")","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"    archiveBaseName \u003d \"shenhe\"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"    archiveFileName \u003d \u0027shenhe.jar\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"    archiveVersion \u003d \u0027v1.0\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"L-rrrr":9,"-":39}},{"path":"data/Shenhe.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"T | 0 | read book","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"T | 0 | read books","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"E | 0 | prepare for debate | 2pm | 4pm","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"D | 0 | sdfasdf | 09-30-2025 16:45","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":4}},{"path":"src/main/java/shenhe/Shenhe.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.Command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.parser.Parser;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":" * Represents the main entry point for the Shenhe application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * The {@code Shenhe} class is responsible for initializing and running the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * It handles loading tasks from storage, reading user commands, executing commands,","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * and managing the application state.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"public class Shenhe {","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"    private Storage storage;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"    private Ui ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code Shenhe} object with the specified file path for storing tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * Initializes the user interface, storage, and loads the tasks from the specified file.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     * If loading tasks fails, an empty task list is initialized.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     * @param filePath The path to the file where tasks are stored.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"    public Shenhe(String filePath) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"        try {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"            tasks \u003d storage.loadTasks();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"            ui.showLoadingError();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * Starts the main loop of the application, which continuously reads and processes user commands","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     * until an exit command is issued.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     * In each iteration, a command is read from the user, parsed, and executed.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"     * The loop continues until the command indicates that the application should exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"    public void run() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"        ui.showLine();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        ui.showWelcome();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"        ui.showLine();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"        while (!isExit) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"            try {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"                ui.showLine();","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"            } finally {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"                ui.showLine();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"     * The entry point of the application. Initializes a {@code Shenhe} instance","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"     * with the specified file path and starts the application by calling {@link #run()}.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"     * @param args Command-line arguments. Not used in this implementation.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"        new Shenhe(\"data/Shenhe.txt\").run();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-20","isFullCredit":false}],"authorContributionMap":{"L-rrrr":77}},{"path":"src/main/java/shenhe/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import java.io.File;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import java.io.FileReader;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"import java.io.IOException;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"import shenhe.parser.Parser;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Task;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * Handles loading and saving tasks from/to a file.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":" * The {@code Storage} class provides functionality to read tasks from a specified file","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":" * and write tasks back to the file. It manages the file operations needed to persist","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":" * tasks between application runs.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"public class Storage {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"    private final String filePath;","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code Storage} object with the specified file path.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     * Initializes the {@code Storage} instance to work with the given file path for","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"     * storing and retrieving tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     * @param filePath The path to the file where tasks are stored.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * Loads tasks from the file specified in the constructor.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * Reads the file line by line, parsing each line to create {@code Task} objects","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * and adding them to a {@code TaskList}. If the file does not exist, an empty","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     * {@code TaskList} is returned. Corrupted lines in the file are ignored with","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * a warning message.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"     * @return A {@code TaskList} containing the tasks read from the file.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"    public TaskList loadTasks() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"            return tasks; // Return empty list if file doesn\u0027t exist","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(file))) {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"            String line;","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"                try {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"                    Task task \u003d Parser.parseFile(line);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"                    tasks.addTask(task);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"                } catch (Exception e) {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"                    System.out.println(\"Warning: Corrupted line ignored.\");","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"                }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"            System.out.println(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"        return tasks;","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"     * Saves the given tasks to the file specified in the constructor.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"     * Writes each task from the {@code TaskList} to the file, formatting each task","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"     * using its {@code toFileFormat} method. Creates the necessary directories if they","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"L-rrrr"},"content":"     * do not exist. If an {@code IOException} occurs during writing, an error message","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"L-rrrr"},"content":"     * is printed.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The {@code TaskList} containing the tasks to be saved.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"L-rrrr"},"content":"    public void saveTasks(TaskList tasks) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"L-rrrr"},"content":"        try {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"L-rrrr"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"L-rrrr"},"content":"            file.getParentFile().mkdirs(); // Create directory if it doesn\u0027t exist","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"L-rrrr"},"content":"            try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file))) {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"L-rrrr"},"content":"                for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"L-rrrr"},"content":"                    writer.write(tasks.getTask(i).toFileFormat() + System.lineSeparator());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"L-rrrr"},"content":"                }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"L-rrrr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"L-rrrr"},"content":"            System.out.println(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-28","isFullCredit":false}],"authorContributionMap":{"L-rrrr":96}},{"path":"src/main/java/shenhe/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import java.util.List;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Task;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * Represents a list of tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * The {@code TaskList} class manages a collection of {@code Task} objects.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * It provides methods to add, remove, and retrieve tasks, as well as to get","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * the size of the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"public final class TaskList {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an empty {@code TaskList}.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * Initializes an empty list of tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"    public TaskList() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code TaskList} with the specified list of tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * Initializes the {@code TaskList} with the provided list of tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks A list of {@code Task} objects to initialize the {@code TaskList}.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     * Retrieves the task at the specified index.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     * Returns the {@code Task} object at the given index in the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"     * @param taskNumber The index of the task to retrieve.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"     * @return The {@code Task} object at the specified index.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"    public Task getTask(int taskNumber) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"        return tasks.get(taskNumber);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"     * Adds a task to the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"     * Appends the given {@code Task} object to the end of the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"     * @param task The {@code Task} object to add to the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"        tasks.add(task);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"     * Deletes the task at the specified index.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"     * Removes the {@code Task} object at the given index from the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"     * @param taskNumber The index of the task to delete.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"    public void deleteTask(int taskNumber) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"        tasks.remove(taskNumber);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"L-rrrr"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"L-rrrr"},"content":"     * Returns the size of the list, which represents the number of tasks it contains.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"L-rrrr"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"L-rrrr"},"content":"    public int getSize() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"L-rrrr"},"content":"        return tasks.size();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"L-rrrr"},"content":"     * Finds and returns a list of tasks that contain the specified keyword in their descriptions.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"L-rrrr"},"content":"     * This method searches through the current list of tasks and checks if each task\u0027s description","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"L-rrrr"},"content":"     * contains the provided keyword. Tasks that match the keyword are added to a list, which is","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"L-rrrr"},"content":"     * then returned to the caller.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"L-rrrr"},"content":"     * @param keyword The keyword to search for within task descriptions.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"L-rrrr"},"content":"     * @return A list of tasks that contain the specified keyword in their descriptions. If no tasks","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"L-rrrr"},"content":"     *         match the keyword, an empty list is returned.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"L-rrrr"},"content":"    public List\u003cTask\u003e findTasks(String keyword) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"L-rrrr"},"content":"        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"L-rrrr"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"L-rrrr"},"content":"            if (task.toString().contains(keyword)) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"L-rrrr"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"L-rrrr"},"content":"        return matchingTasks;","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":111}},{"path":"src/main/java/shenhe/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" * Represents the user interface for the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * The {@code Ui} class handles interactions with the user through the command line.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * It provides methods for displaying messages and reading user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"public class Ui {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"    private final Scanner scanner;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code Ui} object.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     * Initializes the {@code Scanner} object for reading user input from the command line.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"    public Ui() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     * Displays a welcome message to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"     * Prints a greeting and introduction message to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"    public void showWelcome() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"\"\"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"                Hello, Ying. I\u0027m Shenhe. The assumption that every person has somewhere to call home is","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"                naive. I got used to living in the mountains alongside the birds and beasts a long time ago.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"                You, are not the only traveller, but the most interesting one.\"\"\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"What do you want today?\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * Displays a line separator.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     * Prints a line of underscores to separate different sections of the user interface.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"    public void showLine() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"     * Displays a goodbye message to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"     * Prints a farewell message to the user when they exit the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"    public void showGoodbye() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Bye traveller. Hope to see you soon.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"     * Displays a message indicating that a task has been marked as done.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"     * Prints a message to the user confirming that a task has been marked as completed.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"    public void showMarkMessage() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"     * Displays a message indicating that a task has been marked as not done.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"     * Prints a message to the user confirming that a task has been marked as not completed.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"    public void showUnmarkMessage() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"L-rrrr"},"content":"     * Displays a message indicating that a task has been added.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"L-rrrr"},"content":"     * Prints a message to the user confirming that a task has been successfully added to the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"L-rrrr"},"content":"    public void showAddTaskMessage() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"L-rrrr"},"content":"     * Displays a message indicating that a task has been deleted.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"L-rrrr"},"content":"     * Prints a message to the user confirming that a task has been removed from the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"L-rrrr"},"content":"    public void showDeleteMessage() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"L-rrrr"},"content":"     * Displays a list of tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"L-rrrr"},"content":"     * Prints a message to the user showing all the tasks currently in the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"L-rrrr"},"content":"    public void showTasksMessage() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"L-rrrr"},"content":"     * Displays a message indicating that the following tasks in the list match the user\u0027s search criteria.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"L-rrrr"},"content":"     * This method is typically called when a search or filter operation is performed, and matching tasks","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"L-rrrr"},"content":"     * are about to be listed.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"L-rrrr"},"content":"    public void showMatchingMessage() {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"L-rrrr"},"content":"     * Reads a command from the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"L-rrrr"},"content":"     * Reads a line of input from the command line.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"L-rrrr"},"content":"     * @return The line of input entered by the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"L-rrrr"},"content":"    public String readCommand() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"L-rrrr"},"content":"        return scanner.nextLine();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"L-rrrr"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"L-rrrr"},"content":"     * Prints a message indicating that an error has occurred.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"L-rrrr"},"content":"     * @param message The error message to display.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"L-rrrr"},"content":"    public void showError(String message) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(message);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"L-rrrr"},"content":"     * Displays a loading error message.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"L-rrrr"},"content":"     * Prints a message to the user indicating that there was an error loading tasks from the file.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"L-rrrr"},"content":"    public void showLoadingError() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Error loading tasks from file.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":152}},{"path":"src/main/java/shenhe/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * Represents a command in the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * The {@code Command} class is an abstract class that defines the structure of commands","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * that can be executed by the application. Each specific command will extend this class","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * and provide implementations for executing the command and determining whether the command","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * should terminate the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"public abstract class Command {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     * Executes the command.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * This method is meant to be implemented by subclasses to define the specific behavior","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * of the command. It interacts with the {@code TaskList}, {@code Ui}, and {@code Storage}","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * to perform the desired action.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current list of tasks to be manipulated by the command.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface to display messages and receive user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage to save or load tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"     * @throws Exception If an error occurs during the execution of the command.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws Exception;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * Determines if the command should terminate the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * This method is meant to be implemented by subclasses to specify whether the command","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * should cause the application to exit or not. Typically, commands like \"exit\" or \"quit\"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * will return {@code true}.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code true} if the command should terminate the application; {@code false} otherwise.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":44}},{"path":"src/main/java/shenhe/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.EmptyTaskDescriptionException;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"import shenhe.parser.DateParser;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Deadline;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to add a deadline task to the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" * The {@code DeadlineCommand} class is a concrete implementation of the {@code Command}","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":" * class that handles the creation and addition of deadline tasks. It parses user input to","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":" * extract task descriptions and deadline information, and then updates the task list and storage.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"public final class DeadlineCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"    private final String userInput;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code DeadlineCommand} with the specified user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The input string provided by the user, which includes the task description","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     *                  and deadline information.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"    public DeadlineCommand(String userInput) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * Executes the command to add a deadline task to the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * This method parses the user input to extract the task description and deadline. It then creates","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * a {@code Deadline} object and adds it to the task list. The updated task list is then saved to","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * storage.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current list of tasks to which the new deadline task will be added.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface used to display messages to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage system to save the updated task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     * @throws EmptyTaskDescriptionException If the user input does not contain a valid task description.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTaskDescriptionException {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"        if (userInput.trim().length() \u003d\u003d 8) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"            throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"        // Split the input string into two parts using the first \"/\" character","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"        String[] parts \u003d userInput.split(\"/\", 2);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"        // Extract the task description part (before the first \"/\")","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"        String task \u003d parts[0].substring(8).trim();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"        // Extract the deadline part (after the first \"/\")","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"        String by \u003d parts[1].substring(2).trim();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"        LocalDateTime dateTime \u003d DateParser.parse(by);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"        tasks.addTask(new Deadline(task, false, dateTime));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"        int totalNumberOfTasks \u003d tasks.getSize();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"        ui.showAddTaskMessage();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(tasks.getTask(totalNumberOfTasks - 1).toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Now you have \" + totalNumberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"     * Determines if the command should terminate the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code false} as the {@code DeadlineCommand} does not cause the application","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"     * to exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code false} as the command does not terminate the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"L-rrrr"},"content":"        return false;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":82}},{"path":"src/main/java/shenhe/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.EmptyTaskDescriptionException;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * The {@code DeleteCommand} class is a concrete implementation of the {@code Command}","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * class that handles the deletion of a specified task from the task list based on user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * It updates the task list and saves the changes to storage.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"public final class DeleteCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"    private final String userInput;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code DeleteCommand} with the specified user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The input string provided by the user, which specifies the task to delete.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"    public DeleteCommand(String userInput) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"     * Executes the command to delete a task from the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     * This method parses the user input to extract the task number and deletes the corresponding","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * task from the task list. The updated task list is then saved to storage.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current list of tasks from which the task will be deleted.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface used to display messages to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage system to save the updated task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * @throws EmptyTaskDescriptionException If the user input does not contain a valid task number.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTaskDescriptionException {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"        if (userInput.trim().length() \u003d\u003d 6) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"            throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"        } else {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"            int taskNumber \u003d Integer.parseInt(userInput.substring(6).trim());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"            int totalNumberOfTasks \u003d tasks.getSize();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"            System.out.println(\"taskNumber: \" + taskNumber);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"            System.out.println(\"total number of tasks: \" + tasks.getSize());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"            if (taskNumber \u003e\u003d 1 \u0026\u0026 taskNumber \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"                ui.showDeleteMessage();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"                System.out.println(tasks.getTask(taskNumber - 1).toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"                tasks.deleteTask(taskNumber - 1);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"                totalNumberOfTasks--;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"                System.out.println(\"Now you have \" + totalNumberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"                storage.saveTasks(tasks);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"     * Determines if the command should terminate the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code false} as the {@code DeleteCommand} does not cause the application","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"     * to exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code false} as the command does not terminate the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"        return false;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":73}},{"path":"src/main/java/shenhe/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.EmptyTaskDescriptionException;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Event;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to add an event to the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * The {@code EventCommand} class is a concrete implementation of the {@code Command}","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * class that handles the addition of an event to the task list based on user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * It parses the input, creates an {@code Event} object, and updates the task list and storage.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"public final class EventCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"    private final String userInput;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an {@code EventCommand} with the specified user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The input string provided by the user, which specifies the event to add.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"    public EventCommand(String userInput) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     * Executes the command to add an event to the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * This method parses the user input to extract the event description and its start and end times.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * It creates an {@code Event} object and adds it to the task list. The updated task list is then saved to storage.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current list of tasks to which the event will be added.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface used to display messages to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage system to save the updated task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * @throws EmptyTaskDescriptionException If the user input does not contain a valid event description.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTaskDescriptionException {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"        if (userInput.trim().length() \u003d\u003d 5) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"            throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"        // Split the input string into three parts using \"/\" character","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"        String[] parts \u003d userInput.split(\"/\", 3);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        // Extract the event description part (before the first \"/\")","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"        String task \u003d parts[0].substring(5).trim();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"        // Extract the start and end time parts (after the first \"/\")","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"        String from \u003d parts[1].substring(4).trim();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"        String to \u003d parts[2].substring(2).trim();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"        tasks.addTask(new Event(task, false, from, to));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"        int totalNumberOfTasks \u003d tasks.getSize();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"        ui.showAddTaskMessage();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(tasks.getTask(totalNumberOfTasks - 1).toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Now you have \" + totalNumberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"     * Determines if the command should terminate the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code false} as the {@code EventCommand} does not cause the application","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"     * to exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code false} as the command does not terminate the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"        return false;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":77}},{"path":"src/main/java/shenhe/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to exit the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * The {@code ExitCommand} class is responsible for handling the command that terminates the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * When this command is executed, it will display a goodbye message and indicate that the application should exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"public final class ExitCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * Executes the exit command.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * This method displays a goodbye message to the user through the {@link Ui} instance.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface instance used for displaying messages.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage instance used for saving tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"        ui.showGoodbye();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * Indicates whether this command should exit the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code true} to signal that the application should terminate.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code true}, indicating that the application should exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"        return true;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":46}},{"path":"src/main/java/shenhe/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import java.util.List;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Task;","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to find tasks by searching for a keyword in the task description.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * The {@code FindCommand} class handles the command to search for tasks that contain a specified keyword","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * in their descriptions. It retrieves the matching tasks from the task list and displays them to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"public final class FindCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"    private final String keyword;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code FindCommand} object with the specified user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * Extracts the keyword from the user input, which is the substring following the command prefix.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The full user input containing the keyword to search for.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"    public FindCommand(String userInput) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"        this.keyword \u003d userInput.substring(4).trim();","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * Executes the find command to search for tasks matching the keyword.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * This method searches for tasks that contain the specified keyword in their description,","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * and then displays the matching tasks to the user through the {@link Ui} instance.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current task list containing all tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface instance used for displaying messages to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage instance used for saving tasks. This parameter is not used in this method.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"        List\u003cTask\u003e matchingTasks \u003d tasks.findTasks(keyword);","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"        ui.showMatchingMessage();","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"            System.out.println((i + 1) + \". \" + matchingTasks.get(i).toString());","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"     * Indicates whether this command should exit the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code false} to signal that the application should continue running.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code false}, indicating that the application should not exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"        return false;","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-31","isFullCredit":false}],"authorContributionMap":{"L-rrrr":64}},{"path":"src/main/java/shenhe/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.InvalidListEnquiry;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to list all tasks in the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * The {@code ListCommand} class handles the command to display all tasks stored in the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * It checks if the user input is valid and, if so, retrieves and displays each task in the list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"public final class ListCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"    private final String userInput;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code ListCommand} object with the specified user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * Initializes the command with the user input, which is expected to be \"list\" to retrieve all tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The full user input to be processed, which should be \"list\" for listing tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"    public ListCommand(String userInput) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     * Executes the list command to display all tasks in the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * This method checks if the user input matches \"list\". If not, it throws an {@link InvalidListEnquiry}","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * exception. If the input is valid, it retrieves the tasks from the {@link TaskList} and displays them","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * through the {@link Ui} instance.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current task list containing all tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface instance used for displaying messages to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage instance used for saving tasks. This parameter is not used in this method.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * @throws InvalidListEnquiry If the user input does not match \"list\".","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidListEnquiry {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"        if (!userInput.trim().equals(\"list\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"            throw new InvalidListEnquiry();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"        } else {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"            ui.showTasksMessage();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"            int totalNumberOfTasks \u003d tasks.getSize();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"            for (int i \u003d 0; i \u003c totalNumberOfTasks; i++) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"                System.out.println((i + 1) + \".\" + tasks.getTask(i).toString());","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"     * Indicates whether this command should exit the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code false} to signal that the application should continue running.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code false}, indicating that the application should not exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"        return false;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":68}},{"path":"src/main/java/shenhe/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.EmptyTaskDescriptionException;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to mark a task as done.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * The {@code MarkCommand} class handles the command to mark a specific task as completed.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * It validates the user input, updates the task status, and provides feedback through the user interface.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"public final class MarkCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"    private final String userInput;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code MarkCommand} object with the specified user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * Initializes the command with the user input, which specifies the task to be marked as done.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The full user input to be processed, which should include the task number to mark as done.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"    public MarkCommand(String userInput) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     * Executes the mark command to update the status of a task to be done.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * This method extracts the task number from the user input and marks the corresponding task as done.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * It throws an {@link EmptyTaskDescriptionException} if the input is insufficient. After marking the task,","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * it updates the task list and provides feedback through the {@link Ui} instance. The updated tasks are saved","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * using the {@link Storage} instance.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current task list containing all tasks.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface instance used for displaying messages to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage instance used for saving tasks after updating.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     * @throws EmptyTaskDescriptionException If the user input does not contain a task number.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTaskDescriptionException {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"        if (userInput.trim().length() \u003d\u003d 4) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"            throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"        } else {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"            int taskNumber \u003d Integer.parseInt(userInput.substring(4).trim());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"            if (taskNumber \u003e\u003d 1 \u0026\u0026 taskNumber \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"                tasks.getTask(taskNumber - 1).markAsDone();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"                ui.showMarkMessage();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"                System.out.println(tasks.getTask(taskNumber - 1).toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"                storage.saveTasks(tasks);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"     * Indicates whether this command should exit the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code false} to signal that the application should continue running.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code false}, indicating that the application should not exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"        return false;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":71}},{"path":"src/main/java/shenhe/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.EmptyTaskDescriptionException;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Todo;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to add a new {@link Todo} task to the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * The {@code TodoCommand} class handles the command to create a new to-do task with a description provided by","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * the user. It validates the input, adds the new task to the list, and provides feedback through the user interface.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"public final class TodoCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"    private final String userInput;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a {@code TodoCommand} object with the specified user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * Initializes the command with the user input, which specifies the description of the to-do task to be added.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The full user input to be processed, which should include the task description.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"    public TodoCommand(String userInput) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * Executes the command to add a new to-do task to the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * This method extracts the task description from the user input, creates a new {@link Todo} task with it, and","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * adds it to the task list. It throws an {@link EmptyTaskDescriptionException} if the input does not contain a","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * valid task description. After adding the task, it updates the task list and provides feedback through the","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * {@link Ui} instance. The updated tasks are saved using the {@link Storage} instance.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current task list to which the new to-do task will be added.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface instance used for displaying messages to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage instance used for saving tasks after updating.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     * @throws EmptyTaskDescriptionException If the user input does not contain a task description.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTaskDescriptionException {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"        if (userInput.trim().length() \u003d\u003d 4) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"            throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"        String task \u003d userInput.substring(5);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"        tasks.addTask(new Todo(task, false));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"        int totalNumberOfTasks \u003d tasks.getSize();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"        ui.showAddTaskMessage();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(tasks.getTask(totalNumberOfTasks - 1).toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"        System.out.println(\"Now you have \" + totalNumberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"     * Indicates whether this command should exit the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code false} to signal that the application should continue running.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code false}, indicating that the application should not exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"        return false;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":73}},{"path":"src/main/java/shenhe/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.EmptyTaskDescriptionException;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * Represents a command to unmark a task as not done in the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * The {@code UnmarkCommand} class handles the command to update a task\u0027s status from done to not done","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * based on the task number provided by the user. It validates the input, updates the task\u0027s status, and","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * provides feedback through the user interface.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"public final class UnmarkCommand extends Command {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"    private final String userInput;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an {@code UnmarkCommand} object with the specified user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     * Initializes the command with the user input, which specifies the task number of the task to be unmarked.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The full user input to be processed, which should include the task number.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"    public UnmarkCommand(String userInput) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * Executes the command to unmark a task as not done in the task list.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * This method extracts the task number from the user input and updates the status of the corresponding task","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * to not done. It throws an {@link EmptyTaskDescriptionException} if the input does not contain a valid task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * number.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * After updating the task, it provides feedback through the {@link Ui} instance and saves the updated tasks","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     * using the {@link Storage} instance.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * @param tasks The current task list where the task\u0027s status will be updated.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     * @param ui The user interface instance used for displaying messages to the user.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * @param storage The storage instance used for saving tasks after updating.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     * @throws EmptyTaskDescriptionException If the user input does not contain a valid task number.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTaskDescriptionException {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"        if (userInput.trim().length() \u003d\u003d 6) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"            throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        } else {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"            int taskNumber \u003d Integer.parseInt(userInput.substring(6).trim());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"            if (taskNumber \u003e\u003d 1 \u0026\u0026 taskNumber \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"                ui.showUnmarkMessage();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"                tasks.getTask(taskNumber - 1).markAsUndone();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"                System.out.println(tasks.getTask(taskNumber - 1).toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"                storage.saveTasks(tasks);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"     * Indicates whether this command should exit the application.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"     * This method returns {@code false} to signal that the application should continue running.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"     * @return {@code false}, indicating that the application should not exit.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"        return false;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":73}},{"path":"src/main/java/shenhe/exception/EmptyTaskDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.exception;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":" * Represents an exception thrown when a task description is empty.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" * The {@code EmptyTaskDescriptionException} is used to indicate that a command has been given with an","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":" * empty or missing task description. This exception provides a specific error message to guide the user","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * to provide a valid description for the task.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"public class EmptyTaskDescriptionException extends Exception {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an {@code EmptyTaskDescriptionException} with a default error message.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"     * The default error message is: \"My dear traveller, the task description cannot be empty. Please give me","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * something specific.\"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    public EmptyTaskDescriptionException() {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"        super(\"My dear traveller, the task description cannot be empty. Please give me something specific.\");","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-21","isFullCredit":false}],"authorContributionMap":{"L-rrrr":23}},{"path":"src/main/java/shenhe/exception/InvalidDeadlineDescription.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.exception;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":" * Represents an exception thrown when a deadline description is invalid.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" * The {@code InvalidDeadlineDescription} exception is used to indicate that a command for setting a deadline","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":" * is missing either the description or the deadline date, or the format of the deadline command is incorrect.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * The exception provides a specific error message to guide the user in providing a valid deadline description.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"public class InvalidDeadlineDescription extends Exception {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an {@code InvalidDeadlineDescription} with a default error message.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"     * The default error message is: \"Sorry traveller. For deadlines, you need to have both the description and the","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * deadline separated by \u0027/\u0027\".","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    public InvalidDeadlineDescription() {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"        super(\"Sorry traveller. For deadlines, you need to have both the description and the \"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"                + \"deadline separated by \u0027/\u0027\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-21","isFullCredit":false}],"authorContributionMap":{"L-rrrr":24}},{"path":"src/main/java/shenhe/exception/InvalidEventDescription.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.exception;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":" * Represents an exception thrown when an event description is invalid.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" * The {@code InvalidEventDescription} exception is used to indicate that a command for creating an event","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":" * is missing required parts, such as the description, the starting time, or the ending time, or that the format","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * of the event command is incorrect. The exception provides a specific error message to guide the user in","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * providing a valid event description.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"public class InvalidEventDescription extends Exception {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an {@code InvalidEventDescription} with a default error message.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * The default error message is: \"Sorry traveller. The event description must have 2 \u0027/\u0027,","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     * with the first part being the description, the second part being from what time,","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     * and the third part being to what time\".","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"    public InvalidEventDescription() {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"        super(\"Sorry traveller. The event description must have 2 \u0027/\u0027, with the first part being the description,\"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"                + \"the second part being from what time and the third part being to what time\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-21","isFullCredit":false}],"authorContributionMap":{"L-rrrr":26}},{"path":"src/main/java/shenhe/exception/InvalidListEnquiry.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.exception;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":" * Represents an exception that is thrown when an invalid command for listing tasks is encountered.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" * The {@code InvalidListEnquiry} exception indicates that the user has entered an incorrect command","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":" * when attempting to list the tasks. This exception provides a specific error message to remind the","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * user that the correct command to view the current list of tasks is simply \u0027list\u0027.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"public class InvalidListEnquiry extends Exception {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an {@code InvalidListEnquiry} exception with a default error message.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"     * The default error message is: \"Dear traveller. If you want to check out the current list,","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * please type in \u0027list\u0027 only.\"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    public InvalidListEnquiry() {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"        super(\"Dear traveller. If you want to check out the current list, please type in \u0027list\u0027 only.\");","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-21","isFullCredit":false}],"authorContributionMap":{"L-rrrr":23}},{"path":"src/main/java/shenhe/exception/UnknownTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.exception;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":" * Represents an exception that is thrown when an unrecognized or unsupported task command is encountered.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" * The {@code UnknownTaskException} class indicates that the user has entered a task command that the","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":" * application does not understand or support. This exception provides a specific error message to prompt","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * the user to provide a valid task type along with its description.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"public class UnknownTaskException extends Exception {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an {@code UnknownTaskException} with a default error message.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"     * The default error message is: \"Sorry traveller. I am not really sure I get what you mean.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * Please give me the type of the task and its description.\"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    public UnknownTaskException() {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"        super(\"Sorry traveller. I am not really sure I get what you mean. Please give me the type of the task and \"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"                + \"its description\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-21","isFullCredit":false}],"authorContributionMap":{"L-rrrr":24}},{"path":"src/main/java/shenhe/parser/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.parser;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * Utility class for parsing and formatting date and time strings.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" * The {@code DateParser} class provides methods to parse date and time strings into {@code LocalDateTime} objects","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":" * and to format {@code LocalDateTime} objects into specific string formats. It supports two formats:","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":" * one for user input and another for file storage.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"public class DateParser {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"    private static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MM-dd-yyyy HH:mm\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * Parses a date and time string in the input format (\"dd/MM/yyyy HHmm\") into a {@code LocalDateTime} object.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * @param dateTimeStr The date and time string to parse, expected in \"dd/MM/yyyy HHmm\" format.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     * @return A {@code LocalDateTime} object representing the parsed date and time, or {@code null} if the input","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"     *         string does not match the expected format.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"    public static LocalDateTime parse(String dateTimeStr) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"            return LocalDateTime.parse(dateTimeStr, INPUT_FORMATTER);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"            System.out.println(\"Invalid date/time format.\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"            return null;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     * Parses a date and time string from the file format (\"MM-dd-yyyy HH:mm\") into a {@code LocalDateTime} object.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"     * @param dateTimeStr The date and time string to parse, expected in \"MM-dd-yyyy HH:mm\" format.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * @return A {@code LocalDateTime} object representing the parsed date and time, or {@code null} if the input","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     *         string does not match the expected format.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"    public static LocalDateTime parseFile(String dateTimeStr) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"        try {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"            return LocalDateTime.parse(dateTimeStr, OUTPUT_FORMATTER);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"            System.out.println(\"Invalid date/time format.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"            return null;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"     * Formats a {@code LocalDateTime} object into a string in the output format (\"MM-dd-yyyy HH:mm\").","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"     * @param dateTime The {@code LocalDateTime} object to format.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"     * @return A formatted date and time string in \"MM-dd-yyyy HH:mm\" format.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"    public static String format(LocalDateTime dateTime) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"        return dateTime.format(OUTPUT_FORMATTER);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"L-rrrr":61}},{"path":"src/main/java/shenhe/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.parser;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import java.util.Objects;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.Command;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.DeadlineCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.DeleteCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.EventCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.ExitCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.FindCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.ListCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.MarkCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.TodoCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"import shenhe.command.UnmarkCommand;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.EmptyTaskDescriptionException;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.InvalidListEnquiry;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.UnknownTaskException;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Deadline;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Event;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Task;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Todo;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":" * The {@code Parser} class is responsible for interpreting user input and converting it into executable commands.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":" * It also handles the parsing of saved task data from file lines into {@code Task} objects.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"public class Parser {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * Parses a line from the save file and converts it into a {@code Task} object.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     * The line format determines the type of task (Todo, Deadline, Event) and its attributes.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     * @param line A string representing a task in the save file.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * @return A {@code Task} object corresponding to the parsed line,","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     *          or {@code null} if parsing fails or the task type is unknown.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"    public static Task parseFile(String line) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"        // Check the first character to determine the task type","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"        if (line.startsWith(\"T\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"            // Assume the format is \"T | isDone | description\"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"            String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"            boolean isDone \u003d Objects.equals(parts[1], \"1\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"            return new Todo(parts[2], isDone); // Adjust constructor as per your shenhe.task.Todo class definition","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"        } else if (line.startsWith(\"D\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"            // Assume the format is \"D | isDone | description | by\"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"            String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"            boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"            try {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"                LocalDateTime by \u003d DateParser.parseFile(parts[3]); // Parse date string","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"                return new Deadline(parts[2], isDone, by);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"                System.out.println(\"Invalid date/time format.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"                return null; // Return null if parsing fails","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"        } else if (line.startsWith(\"E\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"            // Assume the format is \"E | isDone | description | from | to\"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"            String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"            boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"            try {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"                String from \u003d parts[3]; // Parse \"from\" date string","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"                String to \u003d parts[4]; // Parse \"to\" date string","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"                return new Event(parts[2], isDone, from, to);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"                System.out.println(\"Invalid date/time format.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"                return null; // Return null if parsing fails","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"        // Handle unknown types by returning null","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"        return null;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"     * Parses user input and returns the corresponding {@code Command} object.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"L-rrrr"},"content":"     * This method interprets the user\u0027s command and creates the appropriate command instance.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"L-rrrr"},"content":"     * @param userInput The user input string containing the command.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"L-rrrr"},"content":"     * @return A {@code Command} object that corresponds to the user input.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"L-rrrr"},"content":"     * @throws Exception Various exceptions that correspond to invalid commands or task descriptions:","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"L-rrrr"},"content":"     *                   {@link EmptyTaskDescriptionException} if the task description is empty,","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"L-rrrr"},"content":"     *                   {@link InvalidListEnquiry} if the list command is invalid,","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"L-rrrr"},"content":"     *                   {@link UnknownTaskException} if the command is not recognized.","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"L-rrrr"},"content":"    public static Command parse(String userInput) throws Exception {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"L-rrrr"},"content":"        if (userInput.equals(\"bye\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"L-rrrr"},"content":"            return new ExitCommand();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"L-rrrr"},"content":"        } else if (userInput.startsWith(\"mark\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"L-rrrr"},"content":"            return new MarkCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"L-rrrr"},"content":"        } else if (userInput.startsWith(\"unmark\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"L-rrrr"},"content":"            return new UnmarkCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"L-rrrr"},"content":"        } else if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"L-rrrr"},"content":"            return new DeleteCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"L-rrrr"},"content":"        } else if (userInput.startsWith((\"todo\"))) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"L-rrrr"},"content":"            if (userInput.trim().length() \u003d\u003d 4) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"L-rrrr"},"content":"                throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"L-rrrr"},"content":"            return new TodoCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"L-rrrr"},"content":"        } else if (userInput.startsWith(\"deadline\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"L-rrrr"},"content":"            if (userInput.trim().length() \u003d\u003d 8) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"L-rrrr"},"content":"                throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"L-rrrr"},"content":"            return new DeadlineCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"L-rrrr"},"content":"        } else if (userInput.startsWith(\"event\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"L-rrrr"},"content":"            if (userInput.trim().length() \u003d\u003d 5) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"L-rrrr"},"content":"                throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"L-rrrr"},"content":"            return new EventCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"L-rrrr"},"content":"        } else if (userInput.startsWith(\"list\")) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"L-rrrr"},"content":"            if (userInput.trim().length() !\u003d 4) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"L-rrrr"},"content":"                throw new InvalidListEnquiry();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"L-rrrr"},"content":"            return new ListCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"L-rrrr"},"content":"        } else if (userInput.startsWith(\"find\")) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"L-rrrr"},"content":"            if (userInput.trim().length() \u003d\u003d 4) {","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"L-rrrr"},"content":"                throw new EmptyTaskDescriptionException();","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"L-rrrr"},"content":"            }","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"L-rrrr"},"content":"            return new FindCommand(userInput);","lastModifiedDate":"2024-08-31","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"L-rrrr"},"content":"        throw new UnknownTaskException();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":123}},{"path":"src/main/java/shenhe/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.task;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import shenhe.parser.DateParser;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":" * Represents a deadline task with a specific due date and time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":" * This class extends {@link Task} to include a deadline date and time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"    /** The deadline date and time for the task. */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a Deadline with the specified description, status, and deadline date and time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * @param isDone      the status of the task (true if done, false otherwise)","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * @param by          the deadline date and time for the task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"    public Deadline(String description, boolean isDone, LocalDateTime by) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"        super(description, isDone);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"     * Returns a string representation of the deadline task in a format suitable for saving to a file.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     * The format includes the task type (\"D\"), status icon, description, and the deadline date and time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * @return a string representation of the deadline task in file format","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"        return \"D | \" + getStatusIcon() + \" | \" + description + \" | \" + DateParser.format(by);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * The string includes the task type, status icon, description, and the formatted deadline date and time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * @return a string representation of the deadline task, or null if the deadline is not set","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"    public String toString() {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"        if (by !\u003d null) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + DateParser.format(by) + \")\";","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        return null;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-21","isFullCredit":false}],"authorContributionMap":{"L-rrrr":52}},{"path":"src/main/java/shenhe/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.task;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":" * Represents an event task with a specific start and end time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":" * This class extends {@link Task} to include details about the event\u0027s duration.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"public class Event extends Task {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"    /** The start time of the event. */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"    protected String from;","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"    /** The end time of the event. */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"    protected String to;","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"     * Constructs an Event with the specified description, status, start time, and end time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * @param description the description of the event","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     * @param isDone      the status of the event (true if done, false otherwise)","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     * @param from        the start time of the event","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * @param to          the end time of the event","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"    public Event(String description, boolean isDone, String from, String to) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"        super(description, isDone);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"     * Returns a string representation of the event task in a format suitable for saving to a file.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     * The format includes the task type (\"E\"), status icon, description, start time, and end time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * @return a string representation of the event task in file format","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"        return \"E | \" + getStatusIcon() + \" | \" + description + \" | \" + from + \" | \" + to;","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"     * Returns a string representation of the event task.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"     * The string includes the task type, status icon, description, start time, and end time.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * @return a string representation of the event task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"    public String toString() {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-21","isFullCredit":false}],"authorContributionMap":{"L-rrrr":49}},{"path":"src/main/java/shenhe/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.task;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":" * Abstract class representing a task.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":" * This class provides basic functionality for managing the status and description of a task.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"public abstract class Task {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"    /** The description of the task. */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"    protected String description;","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"    /** Indicates whether the task is done. */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a Task with the specified description and status.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"     * @param isDone      the status of the task (true if done, false otherwise)","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"     * The icon is \"1\" if the task is done, and \"0\" otherwise.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"     * @return the status icon of the task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"        return (isDone ? \"1\" : \"0\");","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"        isDone \u003d true;","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"     * Marks the task as undone.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"    public void markAsUndone() {","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"        isDone \u003d false;","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"     * Checks if the task is done.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"     * @return true if the task is done, false otherwise","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"        return this.isDone;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"     * Returns a string representation of the task in a format suitable for saving to a file.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"     * This method must be implemented by subclasses.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"     * @return a string representation of the task in file format","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"    public abstract String toFileFormat();","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"     * The string includes the status icon and the task description.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"     * @return a string representation of the task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"    public String toString() {","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-20","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-20","isFullCredit":false}],"authorContributionMap":{"L-rrrr":76}},{"path":"src/main/java/shenhe/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.task;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"/**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":" * Represents a to-do task.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":" * This class extends {@link Task} to include basic task functionality with no additional fields.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":" */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"     * Constructs a Todo with the specified description and status.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"     * @param description the description of the to-do task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"     * @param isDone      the status of the to-do task (true if done, false otherwise)","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"        super(description, isDone);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"     * Returns a string representation of the to-do task in a format suitable for saving to a file.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"     * The format includes the task type (\"T\"), status icon, and description.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"     * @return a string representation of the to-do task in file format","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"        return \"T | \" + getStatusIcon() + \" | \" + description;","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"    /**","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"     * Returns a string representation of the to-do task.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"     * The string includes the task type and the status icon, followed by the task description.","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"     *","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"     * @return a string representation of the to-do task","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"     */","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"    @Override","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"    public String toString() {","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-21","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-21","isFullCredit":false}],"authorContributionMap":{"L-rrrr":40}},{"path":"src/test/java/shenhe/command/TodoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.command;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Storage;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"import shenhe.TaskList;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"import shenhe.Ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"import shenhe.exception.EmptyTaskDescriptionException;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"import shenhe.task.Todo;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"public class TodoCommandTest {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"    private Ui ui;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"    private Storage storage;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"    private ByteArrayOutputStream outputStream;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"    @BeforeEach","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"    public void setUp() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"        storage \u003d new Storage(Paths.get(\"test/data/shenhe.txt\").toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"    public void testExecute_validInput_addsTodoTask() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"        // Arrange","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"        String userInput \u003d \"todo Read book\";","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"        TodoCommand command \u003d new TodoCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"        // Act","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"        try {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"            command.execute(tasks, ui, storage);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"        } catch (EmptyTaskDescriptionException e) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"            fail(\"Should not throw EmptyTaskDescriptionException\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"        // Assert","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(1, tasks.getSize());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"        assertTrue(tasks.getTask(0) instanceof Todo);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"[T][0] Read book\", tasks.getTask(0).toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"        assertTrue(outputStream.toString().contains(\"Now you have 1 tasks in the list.\"));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"    public void testExecute_emptyDescription_throwsException() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"        // Arrange","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"        String userInput \u003d \"todo \";","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"        TodoCommand command \u003d new TodoCommand(userInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"        assertThrows(EmptyTaskDescriptionException.class, () -\u003e command.execute(tasks, ui, storage));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"    public void testIsExit_returnsFalse() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"L-rrrr"},"content":"        // Arrange","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"L-rrrr"},"content":"        TodoCommand command \u003d new TodoCommand(\"todo Read book\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"L-rrrr"},"content":"        // Act","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"L-rrrr"},"content":"        boolean isExit \u003d command.isExit();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"L-rrrr"},"content":"        // Assert","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"L-rrrr"},"content":"        assertFalse(isExit);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":80}},{"path":"src/test/java/shenhe/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.task;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"class TaskTest {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"    private Task testTask;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"    // Creating a concrete subclass of Task for testing purposes","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"    private static class TestTask extends Task {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"        public TestTask(String description, boolean isDone) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"            super(description, isDone);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"        @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"        public String toFileFormat() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"            return \"Test | \" + getStatusIcon() + \" | \" + description;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"    @BeforeEach","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"    public void setUp() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"        testTask \u003d new TestTask(\"Sample task\", false);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"    public void testGetStatusIcon_notDone_returnsZero() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"0\", testTask.getStatusIcon());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"    public void testGetStatusIcon_done_returnsOne() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"        testTask.markAsDone();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"1\", testTask.getStatusIcon());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"    public void testMarkAsDone() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"        testTask.markAsDone();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"        assertTrue(testTask.isDone());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"    public void testMarkAsUndone() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        testTask.markAsDone();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"        testTask.markAsUndone();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"        assertFalse(testTask.isDone());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"    public void testIsDone_initiallyFalse() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"        assertFalse(testTask.isDone());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"L-rrrr"},"content":"    public void testToFileFormat() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"Test | 0 | Sample task\", testTask.toFileFormat());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"L-rrrr"},"content":"    public void testToString() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"[0] Sample task\", testTask.toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":69}},{"path":"src/test/java/shenhe/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"package shenhe.task;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"public class TodoTest {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"L-rrrr"},"content":"    public void testToFileFormat() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"L-rrrr"},"content":"        // Arrange","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"L-rrrr"},"content":"        Todo todo \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"L-rrrr"},"content":"        // Act","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"L-rrrr"},"content":"        String fileFormat \u003d todo.toFileFormat();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"L-rrrr"},"content":"        // Assert","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"T | 0 | Read book\", fileFormat);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"L-rrrr"},"content":"    public void testToString() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"L-rrrr"},"content":"        // Arrange","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"L-rrrr"},"content":"        Todo todo \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"L-rrrr"},"content":"        // Act","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"L-rrrr"},"content":"        String todoString \u003d todo.toString();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"L-rrrr"},"content":"        // Assert","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"[T][0] Read book\", todoString);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"L-rrrr"},"content":"    public void testMarkAsDone() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"L-rrrr"},"content":"        // Arrange","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"L-rrrr"},"content":"        Todo todo \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"L-rrrr"},"content":"        // Act","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"L-rrrr"},"content":"        todo.markAsDone();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"L-rrrr"},"content":"        // Assert","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"L-rrrr"},"content":"        assertTrue(todo.isDone());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"[T][1] Read book\", todo.toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"L-rrrr"},"content":"    @Test","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"L-rrrr"},"content":"    public void testMarkAsUndone() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"L-rrrr"},"content":"        // Arrange","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"L-rrrr"},"content":"        Todo todo \u003d new Todo(\"Read book\", true);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"L-rrrr"},"content":"        // Act","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"L-rrrr"},"content":"        todo.markAsUndone();","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"L-rrrr"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"L-rrrr"},"content":"        // Assert","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"L-rrrr"},"content":"        assertFalse(todo.isDone());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"L-rrrr"},"content":"        assertEquals(\"[T][0] Read book\", todo.toString());","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"L-rrrr"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"L-rrrr"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":60}},{"path":"test/data/shenhe.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"T | 0 | Read book","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"L-rrrr":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"L-rrrr"},"content":"todo Read a book","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"L-rrrr"},"content":"deadline Submit assignment /by Monday","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"L-rrrr"},"content":"event Project meeting /from 2pm /to 4pm","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"L-rrrr"},"content":"list","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"L-rrrr"},"content":"mark 2","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"L-rrrr"},"content":"unmark 2","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"L-rrrr"},"content":"delete 1","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"L-rrrr"},"content":"list","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"L-rrrr"},"content":"bye","lastModifiedDate":"2024-08-24","isFullCredit":false}],"authorContributionMap":{"L-rrrr":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"L-rrrr"},"content":"java -classpath ..\\bin Shenhe \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-08-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"L-rrrr":1,"-":20}}]
