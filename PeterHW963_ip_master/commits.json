{"authorDailyContributionsMap":{"PeterHW963":[{"date":"2024-08-21","commitResults":[{"hash":"ee22922e4951e239ac64db568524731f0eaf37ee","isMergeCommit":false,"messageTitle":"Change Duke.java to Nether.java","messageBody":"Duke.java visually prints out \"Duke\"\n\nThe assignment given is to rename the chatbot, and create a greet and\nexit message.\n\nLet\u0027s rename the file to Nether.java, its new name and create the\ngreet and exit messages, along with a new visual print out of its name.\n\n\"println\" statements are the only lines edited as that is the only\nrequirement for this increment.\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":10}}},{"hash":"e8f5b595af910d28eb26167fcdf65cb61a62f127","isMergeCommit":false,"messageTitle":"Add Echo feature until user inputs \"bye\"","messageBody":"Chatbot produces visual art of its name, greetings, and goodbye message\nwhen run.\n\nThe assignment given is to have chatbot produce echo whenever the\nuser inputs anything other than \"bye\".\n\nLet\u0027s create a Scanner object to receive user input and create an\ninfinite loop of echoing the user input and listening for more input. We\nused a check inside the infinite loop for a \"bye\" input to break out of\nthe loop and produce the goodbye message.\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":3}}},{"hash":"31e47eef673bd608dfa37c68bc7a07469e67f2cc","isMergeCommit":false,"messageTitle":"Add \"Add\" and \"List\" features and refactored code","messageBody":"Chatbot echoes user input unless the user inputs \"bye\"\n\nThe assignment given is to have the chatbot add whatever the user inputs\ninto a list of tasks and to add another check for the input \"list\", to\nwhich the chatbot should return a numbered list of all the tasks the\nuser has input so far.\n\nLet\u0027s create an array of size 100 to store the tasks input by user along\nwith a counter to keep track of the current index in the array. When\nthe user inputs \"list\", a for loop is used to iterate through the array\nand print out the entries.\n\nAdditionally, an abstraction for printing the horizontal line output is\nmade and the constants MAX_TASKS, EXIT_COMMAND, and LIST_COMMAND were\ncreated to improve reusability and readability.\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":42,"deletions":9}}},{"hash":"9aff95dfdc2e1c1ad7c585e5a6257e9d4f2cd734","isMergeCommit":false,"messageTitle":"Add Mark/Unmark as Done and refactor code","messageBody":"Chatbot add whatever the user inputs into a list of tasks and prints a\nnumbered list of all the tasks the user has input so far whenever the\nuser inputs \"list\".\n\nThe assignment given is to have the chatbot have the ability to\nmark/unmark tasks as done/not done when the user inputs \"mark +\n(integer)\" or \"unmark + (integer)\".\n\nLet\u0027s create a new class called Task to represent tasks. Task has a\ndescription, index, and an isDone status. Task class also has the\nnecessary getters and setters. Next, let\u0027s implement an extra check for\nthe user input (i.e. if the user input starts with \"mark\" or \"unmark\")\nthat modifies the task object to be done or not done respectively.\n\nAdditionally, an abstraction for displaying the task list is\nmade and the constants MARK_AS_DONE and MARK_AS_NOT_DONE were\ncreated to improve reusability and readability.\n\nA new Task class was created to encapsulate the data and behavior of\ntask objects, improve reusability, maintainability, and readability.\n","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":83,"deletions":5}}},{"hash":"efe780f625f1b3fa9deda04f1df00c621ef2a5c7","isMergeCommit":false,"messageTitle":"Add ToDos, Events, Deadlines","messageBody":"Chatbot adds whatever the user inputs into a list of tasks and prints a\nnumbered list of all the tasks the user has input so far whenever the\nuser inputs \"list\" along with its done/not done status.\n\nThe assignment given is to have the chatbot have the ability to\nrecognize what type of task is added, whether it is ToDos, Deadline, or\nEvent type tasks and have the task type displayed when listing the\ntasks.\n\nLet\u0027s create new subclasses for the Task class to represent the 3 types\nof tasks. DeadlineTask has a by attribute and EventTask has from and to\nattributes. Each of these Task subclasses have their own constructor and\ntoString methods. Next, let\u0027s implement a method that parses the user\ninput into the correct number of parts to instantiate the respective\ntasks with.\n\nInheritance was used to support multiple task types since the different\ntasks have some similarity between them.\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":111,"deletions":10}}}]}]},"authorFileTypeContributionMap":{"PeterHW963":{"java":248,"md":0,"fxml":0,"sh":0,"bat":0,"gradle":0,"txt":0}},"authorContributionVariance":{"PeterHW963":13520.0},"authorDisplayNameMap":{"PeterHW963":"PETE..JAYA"}}
