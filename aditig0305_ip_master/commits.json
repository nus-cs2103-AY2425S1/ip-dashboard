{"authorDailyContributionsMap":{"aditig0305":[{"date":"2024-08-20","commitResults":[{"hash":"de6e5c9ea4a2c02b7b61d170e1b3a3984452c91d","isMergeCommit":false,"messageTitle":"Rename, Greet, Exit","messageBody":"","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":10}}},{"hash":"059a60e671df3b805c0c45d4d710215ea5b870da","isMergeCommit":false,"messageTitle":"Level 1 Echo","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":34,"deletions":5}}}]},{"date":"2024-08-21","commitResults":[{"hash":"5d86e3a44dfe6ac46e2a10b10c58528b6c45385d","isMergeCommit":false,"messageTitle":"Level 2 - Add, List","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":1}}},{"hash":"795a324982286b3d4e3b506e38dad8d3fbf40bdb","isMergeCommit":false,"messageTitle":"Level 3 - Mark as Done","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":63,"deletions":11}}}]},{"date":"2024-08-22","commitResults":[{"hash":"f890695b76be0c143e24fbc435609462c15d21fa","isMergeCommit":false,"messageTitle":"Level 4 - ToDos, Events, Deadlines","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":74,"deletions":6}}},{"hash":"5f5afc55e2e99fc12642ac2b102bdfaf62dad689","isMergeCommit":false,"messageTitle":"Automated Text UI Testing and Level 5 - Handle Errors","messageBody":"","tags":["Level-5","A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":0},"java":{"insertions":64,"deletions":40},"sh":{"insertions":1,"deletions":1}}},{"hash":"0fada57f9930c491f6dea59e3d2fa781615f6591","isMergeCommit":false,"messageTitle":"Level 6 - Delete","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":34,"deletions":0}}}]},{"date":"2024-08-26","commitResults":[{"hash":"43f34a9cf2f1468a46fa977abde04f3f40c82672","isMergeCommit":false,"messageTitle":"Level 7 - Save","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":101,"deletions":35}}},{"hash":"7e1ad4ba381d3046eca962efc5841737e875d76b","isMergeCommit":false,"messageTitle":"Reorganised Max","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":17}}},{"hash":"ad7c7424f55dc330282c403cc75a3565b766b007","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-7\u0027","messageBody":"Added save feature and reorganised Max.java\n","tags":["Level-7"],"fileTypesAndContributionMap":{}},{"hash":"d5ae670362b4e27e2ef9392a170876ee7cc7a1a5","isMergeCommit":false,"messageTitle":"Almost done with Level 8. Deadline task accepts both a date that it can parse and a string.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":87,"deletions":31}}},{"hash":"040e00fcce39c056db93a828b3f05c9521c36704","isMergeCommit":false,"messageTitle":"Deadline handling: Support date formats","messageBody":"Teach the chatbot to understand and handle multiple date formats for\ndeadline tasks. This enhancement allows the chatbot to parse and\ninterpret dates provided in different formats, making it more\nflexible and user-friendly.\n\nThe chatbot now supports:\n* Input format: d/M/yyyy HHmm (e.g., \u00272/12/2019 1800\u0027)\n* Output format: MMM dd yyyy HH:mm (e.g., \u0027Dec 02 2019 18:00\u0027)\n\nThe date is stored as a LocalDateTime object in the task. The update\nensures correct parsing and formatting of date strings for deadlines\nand improves the chatbot\u0027s ability to manage date-related tasks.\n\nThis change includes:\n* Parsing date strings in multiple formats.\n* Storing and formatting dates in a consistent manner.\n","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":3}}},{"hash":"a14090dfee984b224ad2c36019380b8d2826b73a","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-8\u0027","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{}},{"hash":"67b496bf4df1b72da08339db390233a6955f1c48","isMergeCommit":false,"messageTitle":"Refactor code to enhance OOP principles: Modularize classes, improve encapsulation, and separate concerns","messageBody":"- Split the `Max` class into multiple classes (`Ui`, `Storage`, `Parser`, `TaskList`) to follow the Single Responsibility Principle.\n- Improved encapsulation by making class attributes private and providing getter/setter methods where necessary.\n- Moved task-related methods to the `TaskList` class to centralize task management.\n- Updated the `Storage` class to handle file I/O operations independently.\n- Simplified `Parser` class logic for handling user inputs and parsing dates.\n- Improved overall code readability and maintainability.\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":305,"deletions":233}}},{"hash":"8dec08e212252998e6ab8275365f2df38c52a719","isMergeCommit":false,"messageTitle":"Add packages for better organisation and OOP improvements","messageBody":"The project has a flat directory structure under src/main/java which makes it challenging to manage and scale.\n\nOrganising the code into packages improves modularity and readability. It allows better separation of concerns, making the code easier to maintain and navigate.\n\nCreated packages for different components of the project:\n\npackage task; for classes related to task management (Task, Event, Deadline, Todo).\npackage exception; for custom exceptions (MaxException).\npackage main; for the main application entry point and other logic (Max, Parser, Storage, Ui).\nUpdated import statements to reflect new package structure.\n\nRefactored classes to use the new package names.\n\nEnsured that all references between classes are updated to match the new package structure.\n\nUsing packages aligns with best practices in object-oriented programming by grouping related classes together. It simplifies navigation, reduces classpath conflicts, and makes it easier to scale the application.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":2}}},{"hash":"b5dd8223080e846551783f2a75e99f30043e7e9b","isMergeCommit":true,"messageTitle":"Merge branch \u0027add-gradle-support\u0027","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"8e6ceec5705f8e801f2e30368bea652cfbc4a72f","isMergeCommit":false,"messageTitle":"Integrate Gradle for automated project builds","messageBody":"The project previously relied on manual build processes. To streamline\nand automate these tasks, Gradle has been integrated into the project.\nThis change allows for consistent builds, easy dependency management,\nand simplified project setup.\n\n- Merged the `add-gradle-support` branch to introduce Gradle files.\n- Set up Gradle wrapper and build script.\n- Verified that the project can be built and run using Gradle.\n\nThis integration will improve development efficiency by automating\nbuild tasks and ensuring consistency across different environments.\n","tags":["A-Gradle"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}}]},{"date":"2024-08-27","commitResults":[{"hash":"ba89e59b51dc76013de378561b434c03e7e33e20","isMergeCommit":false,"messageTitle":"Add JUnit tests for Parser and Todo","messageBody":"The Parser and Todo classes lacked comprehensive unit tests,\nincreasing the risk of undetected bugs, especially in date parsing\nand task validation.\n\nTo address this, the following changes were made:\n- Added JUnit tests for the parseDate method in Parser:\n- Added JUnit tests for the Todo class\n\nThese changes improve the robustness of the Parser and Todo\nclasses, ensuring they handle various inputs correctly.\n","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":132,"deletions":0}}},{"hash":"48c16b4254bd210948647fbca0f91107e7cfd44f","isMergeCommit":false,"messageTitle":"Package app as executable JAR file","messageBody":"The app is currently not packaged in a way that allows for easy distribution\nand execution by end-users.\n\nTo improve usability, package the app as an executable JAR file. This allows users\nto run the application simply by copying the JAR file into an empty folder,\nopening a command window in that folder, and executing the command:\njava -jar \"Duke.jar\"\n\nThis ensures that the app can be distributed and executed without\nrequiring additional setup, making it more user-friendly and accessible.\n\nLet\u0027s configure the build process to generate the JAR file as Duke.jar\nand place it in the build/libs directory for consistency and ease of access.\n","tags":["A-Jar"],"fileTypesAndContributionMap":{"gradle":{"insertions":3,"deletions":2}}},{"hash":"f90a9d57cd41272d90a8e0d365ee72592cdc5979","isMergeCommit":false,"messageTitle":"Tweak code to comply with coding standard","messageBody":"The existing codebase does not fully adhere to the given coding standard, which could lead to inconsistencies and maintenance challenges.\n\nTo improve code quality and maintainability, tweak the existing code to comply with the specified coding standard. From this point onward, ensure that any new code added is compliant with this standard.\n\nBy enforcing a consistent coding standard across the project, we reduce the risk of bugs and make the codebase easier to read and maintain. Let\u0027s apply these changes systematically to ensure uniformity throughout the project.\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":10}}},{"hash":"8464e2ebc5991716d1030d0fe67d3363ea9c312e","isMergeCommit":false,"messageTitle":"Add search functionality to find tasks by keyword","messageBody":"The application currently lacks a feature to search for tasks by a keyword, making it difficult for users to quickly locate specific tasks in their list.\n\nTo enhance usability, introduce a find command that allows users to search for tasks containing a specified keyword. This feature will display all matching tasks in a user-friendly format, making task management more efficient.\n\nImplementing this functionality improves the overall user experience by allowing users to easily filter and find relevant tasks based on their search criteria.\n","fileTypesAndContributionMap":{"java":{"insertions":34,"deletions":3}}},{"hash":"8f52f1805790887e404cfa077f87f554b39cb02b","isMergeCommit":false,"messageTitle":"Add JavaDoc comments to all classes","messageBody":"Add JavaDoc comments to all classes in the project for improved documentation and clarity.\n\n- Added descriptions and parameter explanations to the Max class.\n- Documented methods and constructors in the Parser class.\n- Included JavaDoc for all methods and fields in the Storage class.\n- Added comments to the Event, Todo, and Task classes explaining their functionality.\n- Documented methods and parameters in the TaskList class.\n\nThis update helps to provide a better understanding of the codebase and improves maintainability.\n","fileTypesAndContributionMap":{"java":{"insertions":294,"deletions":1}}},{"hash":"329815cb6ca6ce2808631ed417cb55a41ff7ef97","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-CodingStandard\u0027","messageBody":"","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{}},{"hash":"127f659ccbdce933defff54e393f5e0576ec97a6","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-JavaDoc\u0027","messageBody":"# Conflicts:\n#\tsrc/main/java/max/main/Storage.java\n","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{}},{"hash":"865d347dac27418c163b539d1ed4614d1ae20a71","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-9\u0027","messageBody":"# Conflicts:\n#\tsrc/main/java/max/main/Parser.java\n#\tsrc/main/java/max/main/Ui.java\n","tags":["Level-9"],"fileTypesAndContributionMap":{}},{"hash":"85c730a81cd1b8b3373fd990d2f7f5dd1d1fc1e7","isMergeCommit":false,"messageTitle":"Add JavaDoc comments for printList and handleFind methods","messageBody":"Add JavaDoc comments to the following methods:\n* printList: Documented its functionality to print tasks with or without filters based on the isFilter parameter.\n* handleFind: Explained its role in filtering tasks by keyword, including parameter details and exception handling.\n\nThis improves code readability and provides clear documentation for future reference.\n","fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":0}}}]},{"date":"2024-09-02","commitResults":[{"hash":"8ca70802d833ac93f297cff4cab4b567d8939ade","isMergeCommit":false,"messageTitle":"Integrate JavaFX for GUI support","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":18,"deletions":1},"fxml":{"insertions":65,"deletions":0},"java":{"insertions":282,"deletions":78}}},{"hash":"fa0edc6aa4d69f8df3f14e350089b35c8e5bf50d","isMergeCommit":false,"messageTitle":"Integrate JavaFX for GUI support","messageBody":"Add JavaFX dependency and set up the initial GUI framework.\n\nJavaFX integration introduces a graphical user interface to replace the console-based interaction.\n\nHere\u0027s what was done:\n\nAdded JavaFX libraries to the project.\n\tCreated Main class to launch the JavaFX application.\n\tImplemented MainWindow class with FXML-based UI components.\n\tUpdated Max class to interact with the new JavaFX-based UI.\n\tAdded MainWindow.fxml to define the layout of the main window.\n\tConfigured MainWindow controller to handle user inputs and display responses.\nThis setup allows for a more interactive user experience and prepares the project for further GUI enhancements.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"4f0f8da550d0d1c32b99b308ef50495cb161bbd0","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-10\u0027","messageBody":"","tags":["Level-10"],"fileTypesAndContributionMap":{}}]},{"date":"2024-09-04","commitResults":[{"hash":"4a872fe3286e8a56cee398b9b53ad16141ad84dd","isMergeCommit":false,"messageTitle":"Refactor imports and fix code indentation","messageBody":"Replaced wildcard imports with explicit imports to improve code clarity and maintainability.\nCorrected inconsistent indentations to adhere to coding standards and enhance readability.\nThese changes contribute to a cleaner and more maintainable codebase.\n","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":19}}}]},{"date":"2024-09-09","commitResults":[{"hash":"0adcb57acf1c130020c1a0f5c15da793efd83976","isMergeCommit":false,"messageTitle":"Add assertions to enforce input validation and task constraints across classes","messageBody":"- **Parser class:**\n  - Asserted that the `taskList`, `ui`, and `storage` objects are not null in the constructor to\n\tensure these components are initialised before use.\n  - Added assertions to validate non-null and non-empty strings in methods like `handleDeadline`,\n\t`handleTodo`, and `handleEvent` to prevent invalid task descriptions.\n  - Asserted that the task index used in methods like `mark`, `unmark`, and `delete` is within\n\tvalid bounds to avoid IndexOutOfBoundsException.\n- **Ui class:**\n  - Asserted that the task list size is non-negative in methods like `printTaskTypeAdded` and `printDeleteTask` to prevent invalid states.\n  - Ensured tasks are not null before printing them in methods like `printMarkDone` and `printMarkNotDone`.\n  - Added checks to ensure that the task list passed to the `list` method is not null, preventing null pointer dereferencing.\n\nThese assertions improve robustness by validating key preconditions, catching errors early, and preventing common runtime exceptions such as null pointers or invalid indices.\n","fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":1}}},{"hash":"003f498c5f8fbaafe6072b5423625de241938872","isMergeCommit":false,"messageTitle":"Refactor long methods and remove unused imports","messageBody":"Current Situation:\n- Several methods in the codebase, particularly in the Parser and task handling, were long and doing multiple things at once.\n- This made the methods difficult to read, understand, and maintain.\n- Some imports were present in the codebase but were no longer being used, adding unnecessary clutter.\n\nWhy It Needs to Change:\n- Long methods often violate the Single Responsibility Principle (SRP) and can make the code harder to test.\n- Refactoring them into smaller, more modular methods improves readability, maintainability, and allows for easier debugging and testing.\n- Unused imports increase clutter and may lead to confusion or performance issues, making the codebase less clean.\n\nWhat is Being Done:\n- Refactored larger methods such as `parseText`, `handleMark`, `handleUnmark`, and others into smaller helper methods like `handleList`, `handleDelete`, etc.\n- Extracted distinct logical units from long methods into smaller methods with clear, focused responsibilities.\n- Updated corresponding Javadocs to document these changes.\n- Removed all unused imports to declutter the code and avoid any unnecessary dependencies.\n\nWhy It Is Done This Way:\n- Breaking down the logic into smaller, well-named methods makes it easier to follow and modify the code without introducing errors.\n- This refactoring adheres to the principle of writing cleaner, more modular code.\n- Removing unused imports enhances code cleanliness and efficiency, contributing to better overall code hygiene.\n\nAny Other Relevant Info:\n- No changes in functionality; the refactoring is purely for improving code structure and readability.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"java":{"insertions":92,"deletions":49}}},{"hash":"39af4493a9e4c5d02d43bd09c6fe21226523e285","isMergeCommit":true,"messageTitle":"Merge pull request #1 from aditig0305/branch-A-Assertions","messageBody":"Add assertions to enforce input validation and task constraints acros…","tags":["A-Assertions"],"fileTypesAndContributionMap":{}},{"hash":"c8a6422f74b128ad86069a5e1c404442b31ba30b","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 into branch-A-CodeQuality","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"48a97e033d813189e1d11471fce3379da91b2a9c","isMergeCommit":true,"messageTitle":"Merge pull request #2 from aditig0305/branch-A-CodeQuality","messageBody":"Refactor long methods and remove unused imports","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{}},{"hash":"60e43965b353886b811f6ce62ac5bde23a2c91ff","isMergeCommit":false,"messageTitle":" Add help page with command descriptions","messageBody":"- Implemented a help page for Max to assist users with available commands.\n- Updated the print formatting to clearly list commands and their descriptions.\n\nThis update enhances user experience by providing clear guidance on using Max effectively.\n","fileTypesAndContributionMap":{"java":{"insertions":56,"deletions":1}}},{"hash":"646f26248ddf784bf75478dba01813d803db5fb2","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-C-Help\u0027","messageBody":"","tags":["BCD-Extension"],"fileTypesAndContributionMap":{}},{"hash":"0550a27e609847831e58c9a3743c451bf3664324","isMergeCommit":false,"messageTitle":"Add Tagging Functionality to Max","messageBody":"Features Added:\n- Implemented the ability to add tags to tasks with the tag command.\n- Implemented the ability to remove tags from tasks with the untag command.\n- Added search functionality for tasks by tag with the searchtag command.\n- Updated the printHelp method to include instructions for new tag-related commands.\n\nTagging Implementation:\n- handleTag(String text): Parses command input to extract task index and tag, adds the tag to the specified task, and provides feedback to the user.\n- handleUntag(String text): Parses command input to extract task index and tag, removes the tag from the specified task, and provides feedback to the user.\n- handleSearchtag(String text): Parses command input to extract the tag, searches for tasks containing the specified tag, and displays the results.\n\nHelp Page Update:\n- Added descriptions for new tag-related commands (tag, untag, searchtag) to the printHelp method.\n\nError Handling:\n- handleTag and handleUntag methods now throw MaxException if the command input is incomplete.\n- handleSearchtag checks for valid tag input and handles errors appropriately.\n\nCode Changes:\n- Modified Task class to include methods for adding and removing tags.\n- Updated Storage class to handle tag in file format.\n","tags":["A-Streams"],"fileTypesAndContributionMap":{"java":{"insertions":281,"deletions":14}}}]},{"date":"2024-09-16","commitResults":[{"hash":"27f7cb2a739dd6a31e6d9824ca32eebfa8fd10eb","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-C-Tagging\u0027","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"e726df2ad7a2dda224538f6a0730d3d8a6b5914e","isMergeCommit":false,"messageTitle":"Add padding and anchoring to improve GUI layout","messageBody":"Current situation: The GUI elements lacked padding, leading to text and images being tightly packed, which reduced readability and visual appeal. Anchoring was not used effectively, causing inconsistent alignment across different window sizes.\n\nWhy it needs to change: Padding and anchoring are essential for creating a clean, well-organized user interface. This enhances the user experience by improving readability, spacing, and overall layout consistency.\n\nWhat was done:\nAdded padding to Label and ImageView components, ensuring that text and images are spaced out properly for better readability.\nApplied anchoring to align elements more consistently within the dialog boxes, especially when resizing the window.\n\nWhy it was done this way: The padding and anchoring ensure a clean and organized visual structure, enhancing both usability and aesthetic appeal. These changes also provide better layout control, making the GUI adaptable to different screen sizes.\n","fileTypesAndContributionMap":{"fxml":{"insertions":18,"deletions":7},"java":{"insertions":6,"deletions":42}}},{"hash":"217eaa8eb13ab9a896f51f80bb451880ec16deb6","isMergeCommit":true,"messageTitle":"Merge branch \u0027tweak-ui\u0027","messageBody":"","fileTypesAndContributionMap":{}}]}]},"authorFileTypeContributionMap":{"aditig0305":{"java":1524,"md":0,"fxml":76,"sh":1,"bat":0,"gradle":20,"txt":2}},"authorContributionVariance":{"aditig0305":41109.793},"authorDisplayNameMap":{"aditig0305":"CS2103T-T11-4 ADIT..ANDE"}}
