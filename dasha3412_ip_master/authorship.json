[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"# victor Project","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"This develops a chatbot from a project template for a greenfield Java project. Originally named after the Java mascot _Duke_, it is named victor here! Given below are instructions on how to use it.","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 17, update Intellij to the most recent version.","lastModifiedDate":"2024-07-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2024-07-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"3. After that, locate the `src/main/java/victor.java` file, right-click it, and choose `Run victor.main()` (if the code editor is showing compile errors, try restarting the IDE).","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"If the setup is correct, victor will introduce himself to you and you can get started with creating, updating, and managing your tasks!","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"dasha3412":6,"-":13}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"    mainClass.set(\"victor.Launcher\")","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"checkstyle {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"    archiveBaseName \u003d \"victor\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"dasha3412":21,"-":39}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"# Victor TaskBot User Guide","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"![Product Screenshot](Ui.png)","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"The Victor TaskBot is your best bet for keeping track of your To-Dos, Events, and Deadlines in a cute, stylish way!","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"Victor saves your tasks and loads them up for you each time you open the app, so you never have to worry about losing","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"track of any tasks!","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"\u003e Words in **ALL_CAPITALS** are parameters to be supplied by the user","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"## Adding to-dos","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"Add a to-do to your task list by typing in the command todo, followed by the name of your todo.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"**Format:** todo TASK_DESCRIPTION","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"Examples:","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"* todo Finish CS Assignment ","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"* todo Task with Very Long Description","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Adding deadlines","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"Add a deadline by typing in the command deadline, followed by the name and the date of the deadline.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"**Format:** deadline DEADLINE_DESCRIPTION /by DATE","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"\u003e Dates for deadlines and events should be input either in YYYY-MM-DD or DD-MM-YYYY format.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"Examples:","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"* deadline Submit Report /by 11-12-2024","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"* deadline Call Office of Admissions /by 2029-01-01","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"## Adding events","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"Add an event by typing in the command event, followed by the name, the start date, and the end date of the event.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"**Format**: event EVENT_DESCRIPTION /from START_DATE /to END_DATE","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"Examples:","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"* event Attend Conference /from 06-06-2025 /to 09-09-2025","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"* event Quantitative Finance Take-Home Exam /from 2021-03-20 /to 2021-03-22","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"\u003e * Make sure your end date is after your start date!","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"\u003e * The start and end dates can be input in different formats.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"You should see Victor\u0027s response keeping track of your deadline, similar to this:","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"## Marking tasks as complete or unfinished","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"Mark any task as finished or unfinished by typing in the command mark/unmark and the number of the task.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"**Format:** (un)mark TASK_NUMBER","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"Examples:","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"* mark 2","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"* unmark 19","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"\u003e Task numbering starts from 1 in the Victor TaskBot system.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"## Listing tasks","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"To see all the tasks Victor is keeping track of, just type in list.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"**Format:** list","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"## Deleting tasks","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"Delete tasks by typing in the delete command and the number of the task you want to delete.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"**Format:** delete TASK_NUMBER","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"## Finding tasks by keyword","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"Find a task based on a keyword or phrase by typing in find followed by the keyword or phrase you want to find.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"**Format:** find KEYWORD ","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"Examples:","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"* find call","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"* find Submit report","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"## Exiting the application","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"To exit the application, either close the window manually or type in exit or bye.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"**Format:** bye/exit","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"## Saving and Loading Data","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"dasha3412"},"content":"The tasks input in one session are automatically saved to the hard disk","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"dasha3412"},"content":"and loaded when another session of the application is started. If a line of the file is","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"dasha3412"},"content":"in the wrong format, the application will overwrite that line and delete it from its records.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"dasha3412"},"content":"If no file is found, then the application will create a new file at /data/data.txt to store","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"dasha3412"},"content":"the data.","lastModifiedDate":"2024-09-18","isFullCredit":false}],"authorContributionMap":{"dasha3412":85,"-":15}},{"path":"src/main/java/victor/Handler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import victor.commands.Command;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import victor.parser.Parser;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import victor.storage.Storage;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import victor.tasklist.TaskList;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":" * Class between MainWindow class and data handling classes like Commands and TaskList.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":" * Handles requests from the MainWindow handleUserInput method by parsing, executing, and","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":" * writing to file.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"public class Handler {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"    private static final Path DATA_PATH \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    private Storage storage;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    private Parser parser;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"     * Constructor for Handler object, initialises the task list for tasks by loading","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"     * from storage, and initialises parser for parsing input requests.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    public Handler() {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"        storage \u003d new Storage(DATA_PATH);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        taskList \u003d storage.load();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"     * Handles request by parsing and executing command, writing command to file, and","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"     * returning a string representation of the program output.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"     * @param request A string containing the user\u0027s input to the task bot.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"     * @return A string containing the program\u0027s response to the user input.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"    public Command handleRequest(String request) {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"        Command command \u003d parser.parseInput(request);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"        command.setData(taskList);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        return command;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-09-04","isFullCredit":false}],"authorContributionMap":{"dasha3412":43}},{"path":"src/main/java/victor/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":" * Launcher class to work around classpath issues","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"public class Launcher {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"     * Calls the public void start(Stage) method in the Main class.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"     * @param args CLI arguments passed to application.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-09-04","isFullCredit":false}],"authorContributionMap":{"dasha3412":16}},{"path":"src/main/java/victor/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"import victor.controls.MainWindow;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":" * Main class that extends Java FX application.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"public class Main extends Application {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"     * Called by the Launcher main method.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"     * Initialises program handler of requests and stage for application.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setHandler();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setScrollListener();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().welcomeUser();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"            stage.show();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":36}},{"path":"src/main/java/victor/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import victor.tasklist.TaskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":" * Generic command class that has a task list and a string array for","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":" * the words from the user\u0027s input.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"public class Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"    protected TaskList taskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"    protected String[] additionalInput;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    public Command(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"        this.additionalInput \u003d additionalInput;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    public void setData(TaskList taskList) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"        return false;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"    public void write(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"     * Returns a message responding to blank input.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"     * @return A return message with a prompt to the user to enter the correct input.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"        return new ReturnMessage(\"  ~  Sorry, that\u0027s not something I know how to do :(\",","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"                \"  ~  Please specify either a To Do, a Deadline or an Event!\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        return this.taskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"    public String[] getAdditionalInput() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"        return this.additionalInput;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":47}},{"path":"src/main/java/victor/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.Deadline;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":" * Deadline command that extends Command class, has a Deadline object that is generated","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":" * by the execute method.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    private Deadline deadline;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    public DeadlineCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"     * Overrides the execute method from the Command class. Processes user input and handles","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"     * inputs with incorrect date formats by returning user prompt messages that state the correct","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"     * input format. Calls the addTask method of task list to add the task to the program-wide task list.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"     * @return A return message with the deadline action summary (successful) or a prompt to the user (unsuccessful).","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        String[] deadlineParts \u003d getDeadlineParts();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"        String taskNameString \u003d deadlineParts[0];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        String deadlineString \u003d deadlineParts[1];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"            if (taskNameString.isBlank()) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"                return new ReturnMessage(\"  ~  Your deadline needs a name!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"                        \"  ~  The format should be \\\"deadline\"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"                            + \" (description) /by (deadline, in format yyyy-mm-dd or dd-mm-yyyy)\\\"\");","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"            } else if (deadlineString.isBlank()) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"                return new ReturnMessage(\"  ~  Your deadline needs a deadline date!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"                        \"  ~  The format should be \\\"deadline\"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"                            + \" (description) /by (deadline, in format yyyy-mm-dd or dd-mm-yyyy)\\\"\");","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"            this.deadline \u003d new Deadline(taskNameString, deadlineString);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(super.taskList.addTask(deadline));","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        } catch (DateTimeParseException parseException) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Please format deadline as \" + \"\\\"deadline\"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"                + \" (description) /by (deadline, in format yyyy-mm-dd or dd-mm-yyyy)\\\"\");","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"    private String[] getDeadlineParts() {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"        String taskNameString \u003d \"\";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"        String deadlineString \u003d \"\";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        boolean isDeadline \u003d false;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"        for (int i \u003d 1; i \u003c additionalInput.length; i++) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"            if (additionalInput[i].startsWith(\"/\")) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"                isDeadline \u003d true;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"                continue;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"            if (!isDeadline) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"                taskNameString +\u003d \" \" + additionalInput[i];","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"            } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"                deadlineString +\u003d \" \" + additionalInput[i];","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"        // Trim so that blank space cannot be counted as name for task or deadlines","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"        taskNameString \u003d taskNameString.trim();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"        deadlineString \u003d deadlineString.trim();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"        return new String[] {taskNameString, deadlineString};","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"     * Overrides the generic write method in the parent Command class. Handles the case where the deadline is null","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"     * (has not been set or incorrectly generated) by not writing anything. Otherwise, calls the writeToFile method","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"     * from the TaskList class with the given file path. Appends to file instead of overwriting.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"     * @param filePath The file path, relative to the project root directory, where to write the changes.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"    public void write(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"            if (this.deadline \u003d\u003d null) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"                return;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"            this.deadline.writeToFile(filePath);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(\"Problem writing to file.\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"    public Deadline getDeadline() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"        return this.deadline;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":95}},{"path":"src/main/java/victor/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":" * Delete command that ensures valid input for number of task deleted and","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":" * executes the delete command.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"    private static final String WRONG_TASK_NUMBER \u003d \"-1\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"    private String taskNumber;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"     * Delete command constructor that takes in additional input and validates that","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"     * task number was provided at all to delete.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"     * @param additionalInput A string array containing the words from the delete command input.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    public DeleteCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        setTaskNumber();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"     * Checks if additional input has a number provided for the delete command. If not,","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"     * sets task number to constant wrong value.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"    private void setTaskNumber() {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        if (additionalInput.length \u003d\u003d 1) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"            this.taskNumber \u003d WRONG_TASK_NUMBER;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"            this.taskNumber \u003d additionalInput[1];","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"     * Overrides the execute method from the Command class. Processes user input and handles","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"     * inputs with invalid task number to delete by prompting the user to enter a valid number.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"     * @return A return message with the delete action summary (successful) or a prompt to the user (unsuccessful).","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(super.taskList.deleteTask(Integer.parseInt(taskNumber)));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Oops, I don\u0027t think you entered a number for which\"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"                + \" task to delete!\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"     * Re-writes the task list to the output file at the file path specified by calling the writeToFile method","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"     * from the TaskList class.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"     * @param filePath The file path, relative to the project root directory, where to write the changes.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"    public void write(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"        if (taskNumber.trim().equals(WRONG_TASK_NUMBER)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"            return;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"        // length of additional input if delete command cannot be 0","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"        assert(super.getAdditionalInput().length !\u003d 0);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"        super.taskList.writeToFile(filePath, true);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":66}},{"path":"src/main/java/victor/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.Event;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":" * Event command extends command class, ensures valid input and creates event object.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    private Event event;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    public EventCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"     * Overrides the execute method from the Command class. Processes user input and handles","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"     * inputs with invalid date formats by prompting the user to enter a valid range and format of dates.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"     * Calls the addTask method of task list to add the task to the program-wide task list.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"     * @return A return message with the event action summary (successful) or a prompt to the user (unsuccessful).","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        String[] eventParts \u003d getEventParts();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"        String taskNameString \u003d eventParts[0];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        String startString \u003d eventParts[1];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"        String endString \u003d eventParts[2];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"            if (taskNameString.isBlank()) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"                return new ReturnMessage(\"  ~  Your event needs a name!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"                        \"  ~  The format should be \\\"event\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"                        + \" (description) /from (start, in format yyyy-mm-dd or dd-mm-yyyy) /to\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"                        + \" (end, in format yyyy-mm-dd or dd-mm-yyyy)\\\"\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"            } else if (startString.isBlank()) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"                return new ReturnMessage(\"  ~  Your event needs a start date!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"                        \"  ~  The format should be \\\"event\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"                        + \" (description) /from (start, in format yyyy-mm-dd or dd-mm-yyyy) /to\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"                        + \" (end, in format yyyy-mm-dd or dd-mm-yyyy)\\\"\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"            } else if (endString.isBlank()) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"                return new ReturnMessage(\"  ~  Your event needs an end date!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"                        \"  ~  The format should be \\\"event\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"                        + \" (description) /from (start, in format yyyy-mm-dd or dd-mm-yyyy) /to\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"                        + \" (end, in format yyyy-mm-dd or dd-mm-yyyy)\\\"\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"            this.event \u003d new Event(taskNameString, startString, endString);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(super.taskList.addTask(event));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"        } catch (DateTimeParseException parseException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Please format the event as \\\"event\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"                + \" (description) /from (start, in format yyyy-mm-dd or dd-mm-yyyy) /to\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"                + \" (end, in format yyyy-mm-dd or dd-mm-yyyy)\\\"\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"        } catch (DateTimeException dateException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Please check that your end time is later than your start time!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"                    \"  ~  Format the event as \\\"event (description) /from\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"                        + \" (start, in format yyyy-mm-dd or dd-mm-yyyy) /to\"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"                        + \" (end, in format yyyy-mm-dd or dd-mm-yyyy)\\\"\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"     * Extracts parts of additionalInput to get task name, start, and end.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"     * @return A string array containing task name, start, and end.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"    private String[] getEventParts() {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"        String taskNameString \u003d \"\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"        String startString \u003d \"\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"        String endString \u003d \"\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"        boolean isStart \u003d false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"        boolean isEnd \u003d false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"        for (int i \u003d 1; i \u003c additionalInput.length; i++) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"            if (additionalInput[i].startsWith(\"/\")) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"                if (isStart) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"                    isEnd \u003d true;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"                } else {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"                    isStart \u003d true;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"                }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"                continue;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"            if (!isStart) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"                taskNameString +\u003d \" \" + additionalInput[i];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"            } else if (!isEnd) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"                startString +\u003d \" \" + additionalInput[i];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"            } else {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"                endString +\u003d \" \" + additionalInput[i];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"        // Trim so that blank space cannot be counted as name for task, start or end","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"        taskNameString \u003d taskNameString.trim();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"dasha3412"},"content":"        startString \u003d startString.trim();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"dasha3412"},"content":"        endString \u003d endString.trim();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"dasha3412"},"content":"        return new String[] {taskNameString, startString, endString};","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"dasha3412"},"content":"     * Overrides the generic write method in the parent Command class. Handles the case where the event is null","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"dasha3412"},"content":"     * (has not been set or incorrectly generated) by not writing anything. Otherwise, calls the writeToFile method","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"dasha3412"},"content":"     * from the TaskList class with the given file path. Appends to file instead of overwriting.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"dasha3412"},"content":"     * @param filePath The file path, relative to the project root directory, where to write the changes.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"dasha3412"},"content":"    public void write(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"dasha3412"},"content":"            if (this.event \u003d\u003d null) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"dasha3412"},"content":"                return;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"dasha3412"},"content":"            this.event.writeToFile(filePath);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(\"Problem writing to file.\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"dasha3412"},"content":"     * Returns event associated with event command.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"dasha3412"},"content":"     * @return An event object created by the event command.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"dasha3412"},"content":"    public Event getEvent() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"dasha3412"},"content":"        return this.event;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":125}},{"path":"src/main/java/victor/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":" * Exit command that extends command class. Only command to override isExit() method from","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":" * Command class to return true, which will trigger end of runUntilExit loop.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"    public ExitCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"        return true;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        return new ReturnMessage();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":23}},{"path":"src/main/java/victor/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":" * Find command that extends the Command class, validates input to ensure there are tasks","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":" * in the task list to search through, and validates that user input a phrase to search for","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":" * in task names.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"    public FindCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  There are no tasks in your list! Add some To Dos, Events,\"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"                    + \" and Deadlines first :)\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        if (additionalInput.length \u003d\u003d 1) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Enter a word or phrase to find in your tasks!\",","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"                \"  ~  Use the format find phrase, replacing phrase with what you want to find.\");","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"        String toMatch \u003d getMatchString(additionalInput);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"        String[] matches \u003d taskList.findMatches(toMatch);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"        // Check if no matches","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        if (matches.length \u003d\u003d 0) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Sorry, there were no tasks matching your phrase :(\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"        // Create array to populate with matching tasks","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        String[] outputMessages \u003d new String[matches.length + 1];","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"        outputMessages[0] \u003d \"  ~  Wonderful, I found these matches for you!\";","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        for (int i \u003d 1; i \u003c outputMessages.length; i++) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"            outputMessages[i] \u003d matches[i - 1];","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"        return new ReturnMessage(outputMessages);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"     * Extracts the string to match from additional inputs provided to Find command.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"     * @param additionalInput A string array containing all additional inputs provided to Find command.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"     * @return String to look for in tasks.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"    private String getMatchString(String[] additionalInput) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        String toMatch \u003d \"\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"        for (int i \u003d 1; i \u003c additionalInput.length; i++) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"            toMatch +\u003d additionalInput[i] + \" \";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"        toMatch \u003d toMatch.trim();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"        return toMatch;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-30","isFullCredit":false}],"authorContributionMap":{"dasha3412":55}},{"path":"src/main/java/victor/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":" * List command class that extends Command class, checks if any tasks exist and returns","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":" * enumerated version of tasks from taskList.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"    public ListCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"     * Overrides the execute method from the Command class. Processes user input and either returns","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"     * the list of tasks currently stored or a response telling the user there are no tasks in the list.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"     * @return A return message with the delete action summary (successful) or a prompt to the user (unsuccessful).","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  You\u0027ve got no tasks in your list, add some To Dos, Events,\"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"                + \" and Deadlines first :)\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"        return new ReturnMessage(super.taskList.enumerateTasks());","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":27}},{"path":"src/main/java/victor/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":" * Mark command class that extends Command class, validates correct input for task to mark","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":" * as complete and executes mark command on specified task.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"    private static final String WRONG_TASK_NUMBER \u003d \"-1\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"    private String taskNumber;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"     * Mark command constructor that takes in additional input and validates that","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"     * task number was provided at all to mark.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"     * @param additionalInput A string array containing all additional inputs to Mark command.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    public MarkCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        setTaskNumber();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"     * Mark command constructor that only takes in a task number to mask as complete.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"     * Used when reading tasks from file to avoid having to format as typical mark command.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"     * @param task An integer representing which task to mark as complete.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"    public MarkCommand(int task) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"        super(new String[] {});","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        this.taskNumber \u003d String.valueOf(task);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"     * Checks if additional input has a number provided for the mark command. If not,","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"     * sets task number to constant wrong value.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"    private void setTaskNumber() {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"        if (additionalInput.length \u003d\u003d 1) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"            this.taskNumber \u003d WRONG_TASK_NUMBER;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"            this.taskNumber \u003d additionalInput[1];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"     * Overrides the execute method from the Command class. Processes user input and handles","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"     * inputs with invalid task number to mark by prompting the user to enter a valid number.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"     * @return A return message with the mark action summary (successful) or a prompt to the user (unsuccessful).","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(super.taskList.markDone(Integer.parseInt(taskNumber)));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"     * Re-writes the task list to the output file at the file path specified by calling the writeToFile method","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"     * from the TaskList class.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"     * @param filePath The file path, relative to the project root directory, where to write the changes.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"    public void write(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"        if (taskNumber.trim().equals(WRONG_TASK_NUMBER)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"            return;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"        super.taskList.writeToFile(filePath, true);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"     * Return this mark command\u0027s number.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"     * @return A string with the number meant to be marked done.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"    public String getNumber() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"        return this.taskNumber;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":81}},{"path":"src/main/java/victor/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.ToDo;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":" * To Do command that extends Command class, has a ToDo object that is generated","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":" * by the execute method.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"    private ToDo toDo;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    public ToDoCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"     * Overrides the execute method from the Command class. Processes user input and handles","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"     * inputs with blank names by prompting the user to enter a valid range and format of dates.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"     * Calls the addTask method of task list to add the task to the program-wide task list.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"     * @return A return message with the event action summary (successful) or a prompt to the user (unsuccessful).","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"        String todoMessage \u003d getToDoMessage();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        if (todoMessage.isBlank()) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Your To Do needs a name!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"                    \"  ~  The format should be \\\"todo (description)\\\"\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        this.toDo \u003d new ToDo(todoMessage);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"        return new ReturnMessage(super.taskList.addTask(toDo));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"     * Extracts to do message from additional input.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"     * @return String with the to do message from the additional input.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"    private String getToDoMessage() {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        String todoMessage \u003d \"\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"        for (int i \u003d 1; i \u003c additionalInput.length; i++) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"            todoMessage +\u003d additionalInput[i] + \" \";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"        todoMessage \u003d todoMessage.trim();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        return todoMessage;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"     * Overrides the generic write method in the parent Command class. Handles the case where the event is null","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"     * (has not been set or incorrectly generated) by not writing anything. Otherwise, calls the writeToFile method","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"     * from the TaskList class with the given file path. Appends to file instead of overwriting.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"     * @param filePath The file path, relative to the project root directory, where to write the changes.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"    public void write(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"            if (this.toDo \u003d\u003d null) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"                return;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"            this.toDo.writeToFile(filePath);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(\"Problem writing to file.\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"    public ToDo getToDo() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"        return this.toDo;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":71}},{"path":"src/main/java/victor/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":" * Unmark command class that extends Command class, validates correct input for task to unmark","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":" * as complete and executes unmark command on specified task.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"    private static final String WRONG_TASK_NUMBER \u003d \"-1\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"    private String taskNumber;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"     * Unmark command constructor that takes in additional input and validates that","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"     * task number was provided at all to unmark.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"     * @param additionalInput A string array containing the words from the unmark command input.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    public UnmarkCommand(String[] additionalInput) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        super(additionalInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        setTaskNumber();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"     * Checks if additional input has a number provided for the unmark command. If not,","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"     * sets task number to constant wrong value.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"    public void setTaskNumber() {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        if (additionalInput.length \u003d\u003d 1) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"            this.taskNumber \u003d WRONG_TASK_NUMBER;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"            this.taskNumber \u003d additionalInput[1];","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"     * Overrides the execute method from the Command class. Processes user input and handles","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"     * inputs with invalid task number to mark by prompting the user to enter a valid number.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"     * @return A return message with the unmark action summary (successful) or a prompt to the user (unsuccessful).","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage execute() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(super.taskList.unmarkDone(Integer.parseInt(taskNumber)));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"            return new ReturnMessage(\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"     * Re-writes the task list to the output file at the file path specified by calling the writeToFile method","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"     * from the TaskList class.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"     * @param filePath The file path, relative to the project root directory, where to write the changes.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"    public void write(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"        if (taskNumber.trim().equals(\"-1\")) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"            return;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"        super.taskList.writeToFile(filePath, true);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":63}},{"path":"src/main/java/victor/controls/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.controls;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.util.Collections;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":" * DialogBox class that handles getting and producing dialogue.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"    @FXML","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    private Label dialog;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"    @FXML","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    private DialogBox(String displayString, Image displayImage, boolean isVictor) {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"            FXMLLoader fxmlLoader;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"            if (!isVictor) {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"                fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"            } else {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"                fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/VictorDialogBox.fxml\"));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        dialog.setText(displayString);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"        displayPicture.setImage(displayImage);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"    private void flip() {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"    public static DialogBox getUserDialog(String userInput, Image image) {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"        return new DialogBox(userInput, image, false);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"    public static DialogBox getVictorDialog(String victorText, Image image) {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"        var db \u003d new DialogBox(victorText, image, true);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"        db.flip();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"        return db;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-09-04","isFullCredit":false}],"authorContributionMap":{"dasha3412":61}},{"path":"src/main/java/victor/controls/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.controls;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"import victor.Handler;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"import victor.commands.Command;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":" * Controller for the main GUI.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"public class MainWindow {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    private static final String WELCOME_MESSAGE \u003d \"  ~  Hi, I\u0027m Victor! Let\u0027s get started with tracking your tasks!\";","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"    private static final Path DATA_PATH \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    @FXML","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"    @FXML","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    private TextField userInput;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    @FXML","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"    private Stage stage;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"    private Handler handler;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/toucan.png\"));","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"    private Image victorImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/victor.png\"));","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"     * Sets Stage instance used by main.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"     * @param stage A Stage object used to run the application.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"    public void setStage(Stage stage) {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"        this.stage \u003d stage;","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"        stage.setTitle(\"Victor TaskBot\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"     * Initialises a handler for the main window which handles user input.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"    public void setHandler() {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        this.handler \u003d new Handler();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"     * Sets a listener for the height of the dialog container to scroll the bottom when","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"     * text goes beyond bottom of window.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"    public void setScrollListener() {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        this.dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"     * Creates an initial welcome message for the user upon starting the program.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"    public void welcomeUser() {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"                DialogBox.getVictorDialog(WELCOME_MESSAGE, victorImage));","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"    @FXML","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"        Command command \u003d handler.handleRequest(input);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"        if (command.isExit()) {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"            stage.close();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"        String response \u003d getCommandOutput(command);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"                DialogBox.getVictorDialog(response, victorImage)","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"        );","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"        userInput.clear();","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"     * Executes, writes command to file, and gets response from command execution.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"     * @param command A Command that needs to be executed, written, and made to give a return message.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"     * @return A string of the return message from executing the command.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"    private String getCommandOutput(Command command) {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"        ReturnMessage returnMessage \u003d command.execute();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"        command.write(DATA_PATH);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"        return returnMessage.getMessagesAsString();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-09-04","isFullCredit":false}],"authorContributionMap":{"dasha3412":94}},{"path":"src/main/java/victor/messages/ReturnMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.messages;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":" * A ReturnMessage class that contains an array of the strings returned from the Command executions.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"public class ReturnMessage {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"    private String[] message;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"    private boolean isEmpty;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"     * Constructor for the ReturnMessage class, sets the isEmpty boolean to","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"     * true if no messages were input. Using Varargs here.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"     * @param messages A variable number of String arguments for the return message","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"     *     of the commands.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    public ReturnMessage(String... messages) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"        this.message \u003d messages;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"        if (messages.length !\u003d 0) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"            isEmpty \u003d false;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"            isEmpty \u003d true;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    public String[] getMessages() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"        return this.message;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"     * Gets all the return messages from commands as one string.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"     * @return A string with all return messages separated by newlines.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"    public String getMessagesAsString() {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"            return \"  ~  Sorry, something went wrong! Please try again!\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"        String returnString \u003d \"\";","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"        for (String string : getMessages()) {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"            returnString +\u003d string + \"\\n\";","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        return \"  \" + returnString.trim();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"        return this.isEmpty;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":47}},{"path":"src/main/java/victor/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.parser;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import victor.commands.Command;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import victor.commands.DeadlineCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import victor.commands.DeleteCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import victor.commands.EventCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import victor.commands.ExitCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import victor.commands.FindCommand;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import victor.commands.ListCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"import victor.commands.MarkCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"import victor.commands.ToDoCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"import victor.commands.UnmarkCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":" * Parser class that handles string input from user and determined command","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":" * object to return based on first keyword.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"public class Parser {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"     * Parses user input string and classifies input by type of command done. Parsing depends","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"     * on first word of user input. If no word is matched, a blank command is returned.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"     * @param input The string of user input from the input stream.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"     * @return Command with details of user input.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    public Command parseInput(String input) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"        Command command;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"        String[] inputWords \u003d input.trim().split(\" \");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        command \u003d switch (inputWords[0]) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"        case \"todo\" -\u003e new ToDoCommand(inputWords);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        case \"deadline\" -\u003e new DeadlineCommand(inputWords);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"        case \"event\" -\u003e new EventCommand(inputWords);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        case \"delete\" -\u003e new DeleteCommand(inputWords);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"        case \"mark\" -\u003e new MarkCommand(inputWords);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        case \"unmark\" -\u003e new UnmarkCommand(inputWords);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"        case \"list\" -\u003e new ListCommand(inputWords);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"        case \"bye\", \"exit\" -\u003e new ExitCommand(inputWords);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"        case \"find\" -\u003e new FindCommand(inputWords);","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"        default -\u003e new Command(inputWords);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"        };","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"        // command should not be null after switch condition","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        assert(command !\u003d null);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"        return command;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":44}},{"path":"src/main/java/victor/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.storage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.File;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import victor.commands.Command;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"import victor.commands.DeadlineCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"import victor.commands.EventCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"import victor.commands.MarkCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"import victor.commands.ToDoCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"import victor.tasklist.TaskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":" * Storage class that handles reading from the file where task data is stored. Has the","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":" * relative file path where data is stored and the task list of Task objects.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"public class Storage {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"    private Path filePath;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"    public Storage(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"     * Checks and creates, if necessary, necessary directories and files to save and load","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"     * tasks from. Creates a TaskList object to use for the entire program\u0027s tasks.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"     * @return A TaskList object that is either blank, if no previous file existed or","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"     *     there were no saved tasks, or is populated with data loaded from the save file.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"    public TaskList load() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d filePath.getParent();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"        // Check if directory for txt file exists","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"        if (Files.exists(dataPath)) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"            // Check if file exists","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"            if (Files.exists(filePath)) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"                // Load from storage","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"                this.taskList \u003d new TaskList(filePath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"                this.taskList \u003d readFileContents(filePath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"            } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"                try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"                    // Create new empty task list","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"                    this.taskList \u003d new TaskList(filePath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"                    // Create new file","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"                    File data \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"                    data.createNewFile();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"                } catch (IOException makeFileException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"                    throw new RuntimeException(makeFileException);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"                }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"            try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"                // Create new empty task list","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"                this.taskList \u003d new TaskList(filePath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"                // Create data directory","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"                Files.createDirectories(dataPath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"                // Create new file","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"                File data \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"                data.createNewFile();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"            } catch (IOException makeFileException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"                throw new RuntimeException(makeFileException);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"        return taskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"     * Decodes the text from the save file and re-formats it into a String array that matches","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"     * format required by Command and Task constructors.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"     * @param taskLine An array of strings from splitting each line of the save file by spaces.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"     * @return A Command object with the details of the task.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"    public Command decodeTaskFromFile(String[] taskLine) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"        String[] commandInput;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"            if (taskLine[0].equals(\"T\")) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"                commandInput \u003d new String[]{\"todo\", taskLine[2]};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"                return new ToDoCommand(commandInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"            } else if (taskLine[0].equals(\"D\")) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"                commandInput \u003d new String[]{\"deadline\", taskLine[2], \"/\", taskLine[3]};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"                return new DeadlineCommand(commandInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"            } else if (taskLine[0].equals(\"E\")) {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"                commandInput \u003d new String[]{\"event\", taskLine[2], \"/\", taskLine[3], \"/\", taskLine[4]};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"                return new EventCommand(commandInput);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"            } else {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"                // non-standard command type","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"                return new Command(new String[] {});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"            // some error in input, likely less than 2 words in line","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"            return new Command(new String[] {});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"dasha3412"},"content":"     * Reads an individual line from the input file, splits it, and calls the decodeTaskFromFile","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"dasha3412"},"content":"     * function to create a Command object from the String input. Constructs the task list used","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"dasha3412"},"content":"     * by the program from the lines saved in the data save file. Checks if each of the tasks saved","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"dasha3412"},"content":"     * are completed and marks as completed if so.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"dasha3412"},"content":"     * @param taskFileLine A string read from the data save file.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"dasha3412"},"content":"     * @param taskList The task list object used to keep track of objects for the whole program.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"dasha3412"},"content":"     * @param taskNumber The task number of the line being read, as decided by its order in the data save file.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"dasha3412"},"content":"    public void readTask(String taskFileLine, TaskList taskList, int taskNumber) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"dasha3412"},"content":"        String[] lineContent \u003d taskFileLine.split(\" \\\\| \");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"dasha3412"},"content":"        Command command \u003d decodeTaskFromFile(lineContent);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"dasha3412"},"content":"        command.setData(taskList);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"dasha3412"},"content":"        // Do not need to show return messages from executing these tasks","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"dasha3412"},"content":"        command.execute();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"dasha3412"},"content":"        // Minimum valid command length in encoding is 3 for To Do task","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"dasha3412"},"content":"        if (lineContent.length \u003c 3) {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"dasha3412"},"content":"            return;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"dasha3412"},"content":"        // Check if task was marked done","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"dasha3412"},"content":"        if (Integer.parseInt(lineContent[1]) \u003d\u003d 1) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"dasha3412"},"content":"            Command markCommand \u003d new MarkCommand(taskNumber);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"dasha3412"},"content":"            markCommand.setData(taskList);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"dasha3412"},"content":"            markCommand.execute();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"dasha3412"},"content":"     * Reads all the task lines with the data save file as input and calls the readTask function","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"dasha3412"},"content":"     * to process and construct the TaskList for the entire program.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"dasha3412"},"content":"     * @param filePath The relative file path (relative to project root directory) where data is saved.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"dasha3412"},"content":"     * @return The populated TaskList preloaded with tasks that were saved at the given file path.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"dasha3412"},"content":"    public TaskList readFileContents(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"dasha3412"},"content":"            int count \u003d 1;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"dasha3412"},"content":"            Scanner fileScanner \u003d new Scanner(filePath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"dasha3412"},"content":"            while (fileScanner.hasNextLine()) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"dasha3412"},"content":"                readTask(fileScanner.nextLine(), taskList, count);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"dasha3412"},"content":"                count +\u003d 1;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"dasha3412"},"content":"            fileScanner.close();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"dasha3412"},"content":"            // Write processed task list back to file - overwrites any lines with errors","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"dasha3412"},"content":"            taskList.writeToFile(filePath, true);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"dasha3412"},"content":"            return taskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException scannerException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"dasha3412"},"content":"            // In case of read error, return blank taskList","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"dasha3412"},"content":"            return new TaskList(filePath);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":149}},{"path":"src/main/java/victor/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.tasklist;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.Task;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":" * Task list that handles all the input tasks using an array list","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":" * and stores the filepath where the task list should be read from","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":" * and written to.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"public class TaskList {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    private Path filePath;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"     * Constructor for the task list, initialises an empty array list of","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"     * tasks to hold the Task objects that are later generated or read.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"     * @param filePath A path object representing the relative file path where","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"     *                 task data is written and read from.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    public TaskList(Path filePath) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"     * Adds a task to the internal ArrayList of tasks keeping track of all tasks in the program.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"     * Returns a string array of the output to be shown by the UI component to the user.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"     * @param task A Task object to be added to the task list.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"     * @return A string array with output to be shown to the user following adding the task.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"    public String[] addTask(Task task) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"        for (Task existingTask : tasks) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"            if (task.equals(existingTask)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"                return new String[] {\"  ~  Looks like this task already exists!\",","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"                    \"  ~  Use the list command to see all existing tasks.\"};","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"        this.tasks.add(task);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        return new String[] {\"  ~  So cute! I added this task:\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"            \"  ~  \" + task,","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"            \"  ~  You now have \" + this.getSize() + ((this.getSize() \u003d\u003d 1) ? \" task\" : \" tasks\") + \" in your list.\"};","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"     * Deletes a task from the internal ArrayList of tasks keeping track of all tasks in the program.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"     * Returns a string array of the output to be shown by the UI component to the user.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"     * @param taskNumber An integer representing the number of the task meant to be deleted.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"     * @return A string array with output to be shown to the user following deleting the task.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"     *     Indicates success status of the deletion task.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"    public String[] deleteTask(int taskNumber) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"            int listLength \u003d tasks.size();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"            Task removed \u003d tasks.remove(taskNumber - 1);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"            // if code gets here, length of tasks must now be 1 less","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"            assert(tasks.size() \u003d\u003d listLength - 1);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"            return new String[] {\"  ~  I see you\u0027re done with that task now!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"                \"  ~  \" + removed, \"  ~  You now have \" + this.getSize() + ((this.getSize() \u003d\u003d 1) ? \" task\" : \" tasks\")","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"                    + \" in your list.\"};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"            return new String[] {\"  ~  Oopsie, I don\u0027t think you entered a number for which task to delete!\"};","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"            return new String[] {\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\"};","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"     * Marks a task as done in the internal ArrayList of tasks keeping track of all tasks in the program.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"     * Returns a string array of the output to be shown by the UI component to the user.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"     * @param taskNumber An integer representing the number of the task meant to be marked as done.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"     * @return A string array with output to be shown to the user following marking the task as done.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"     *     Indicates success status of the marking as done task.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"    public String[] markDone(int taskNumber) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"            Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"            task.markDone();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"            return new String[] {\"  ~  You finished a task! You\u0027re amazing! I marked this task as done:\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"                \"  ~  \" + task};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"            return new String[] {\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\"};","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"     * Unmarks a task as done in the internal ArrayList of tasks keeping track of all tasks in the program.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"dasha3412"},"content":"     * Returns a string array of the output to be shown by the UI component to the user.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"dasha3412"},"content":"     * @param taskNumber An integer representing the number of the task meant to be unmarked as done.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"dasha3412"},"content":"     * @return A string array with output to be shown to the user following unmarking the task as done.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"dasha3412"},"content":"     *     Indicates success status of the unmarking as done task.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"dasha3412"},"content":"    public String[] unmarkDone(int taskNumber) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"dasha3412"},"content":"            Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"dasha3412"},"content":"            task.markUndone();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"dasha3412"},"content":"            return new String[] {\"  ~  Oops, I guess you didn\u0027t finish the task! I marked this task as undone:\",","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"dasha3412"},"content":"                \"  ~  \" + task};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"dasha3412"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"dasha3412"},"content":"            return new String[] {\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\"};","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"dasha3412"},"content":"     * Writes the entire task list to the file at the file path provided.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"dasha3412"},"content":"     * @param filePath A Path object - a relative file path (relative to project root directory)","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"dasha3412"},"content":"     *                 where data should be saved.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"dasha3412"},"content":"     * @param shouldOverwrite A boolean specifying whether the current data in the file at the file","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"dasha3412"},"content":"     *                        path should be overwritten.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(Path filePath, boolean shouldOverwrite) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"dasha3412"},"content":"            // Clear output file if overwriting","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"dasha3412"},"content":"            if (shouldOverwrite) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"dasha3412"},"content":"                PrintWriter writer \u003d new PrintWriter(String.valueOf(filePath));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"dasha3412"},"content":"                writer.print(\"\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"dasha3412"},"content":"                writer.close();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"dasha3412"},"content":"            FileWriter fw \u003d new FileWriter(String.valueOf(filePath), shouldOverwrite);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"dasha3412"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"dasha3412"},"content":"                task.writeToFile(fw);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"dasha3412"},"content":"            }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"dasha3412"},"content":"            fw.close();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"dasha3412"},"content":"     * Returns a string array listing the String versions of all the tasks currently in the","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"dasha3412"},"content":"     * task list, along with their number and order.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"dasha3412"},"content":"     * @return A string array of all current tasks in the task list.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"dasha3412"},"content":"    public String[] enumerateTasks() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"dasha3412"},"content":"        String[] outputList \u003d new String[tasks.size() + 1];","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"dasha3412"},"content":"        outputList[0] \u003d \"  ~  Oh wow, lots to do! Here\u0027s everything on your plate:\";","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"dasha3412"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"dasha3412"},"content":"            outputList[i + 1] \u003d \"     \" + (i + 1) + \". \" + tasks.get(i);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"dasha3412"},"content":"        return outputList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"dasha3412"},"content":"    public int getSize() {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"dasha3412"},"content":"        return this.tasks.size();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"dasha3412"},"content":"     * Finds all tasks in the current TaskList that contain the string that is input.","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"dasha3412"},"content":"     * If there are no matches, returns an empty array.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"dasha3412"},"content":"     * @param toMatch A string whose content is searched for in all the task names contained in the task list.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"dasha3412"},"content":"     * @return An array of strings formatted to show the task\u0027s order in the list of all strings containing","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"dasha3412"},"content":"     *      the string to match as well as the standard task print output.","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"dasha3412"},"content":"    public String[] findMatches(String toMatch) {","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"dasha3412"},"content":"        // Use streams to do filtering instead of loop","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"dasha3412"},"content":"        Stream\u003cTask\u003e taskStream \u003d tasks.stream();","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"dasha3412"},"content":"        taskStream \u003d taskStream.filter(task -\u003e task.toString().contains(toMatch));","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"dasha3412"},"content":"        String[] taskArray \u003d taskStream.map(Task::toString).toArray(String[]::new);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"dasha3412"},"content":"        if (taskArray.length \u003d\u003d 0) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"dasha3412"},"content":"            return new String[] {};","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"dasha3412"},"content":"        for (int i \u003d 0; i \u003c taskArray.length; i++) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"dasha3412"},"content":"            taskArray[i] \u003d \"    \" + (i + 1) + \". \" + taskArray[i];","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"dasha3412"},"content":"        return taskArray;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"dasha3412"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"dasha3412"},"content":"        return this.tasks;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":178}},{"path":"src/main/java/victor/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.tasks;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":" * Deadline class that handles task with a deadline.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"    private static final String DATE_FORMAT \u003d \"MMM dd yyyy\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    protected String deadline;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    protected LocalDate deadlineDate;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"     * Constructor for the deadline class that assigns the deadline a name and a deadline. Parses","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"     * input and saves the deadline as a LocalDate object.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"     * @param name A string with the name of the deadline to be stored.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"     * @param deadline A string with the deadline of the deadline, should be either in format yyyy-mm-dd or dd-mm-yyyy.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"     * @throws DateTimeParseException Thrown if the start or end time cannot be parsed as a LocalDate object.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    public Deadline(String name, String deadline) throws DateTimeParseException {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"        super(name);","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"            this.deadlineDate \u003d LocalDate.parse(deadline);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        } catch (DateTimeParseException parseException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"            this.deadlineDate \u003d LocalDate.parse(deadline,","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"                    DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"            this.deadlineDate \u003d LocalDate.parse(this.deadlineDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"    public String getDeadline() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"        return this.deadline;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"     * Creates file encoding version of deadline and writes to file given a filewriter.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"     * @param fileWriter A FileWriter object that writes to a pre-initialised file with all task data.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"     * @throws IOException if there is a problem writing to the file.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"    private void writeDeadlineEncoding(FileWriter fileWriter) throws IOException {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"        String toWrite \u003d \"D | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"        if (this.isDone) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"            toWrite +\u003d \"1 | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"            toWrite +\u003d \"0 | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"        toWrite +\u003d this.name + \" | \" + this.deadline + \"\\n\";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        fileWriter.write(toWrite);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"     * Writes the deadline description to a file given an existing filewriter.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"     * @param fileWriter a pre-initialised filewriter object to write to a file with.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"     * @throws IOException if there is a problem writing to the file.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(FileWriter fileWriter) throws IOException {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"        // Write event to file","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"            writeDeadlineEncoding(fileWriter);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(writeException);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"     * Writes the deadline description to a file given a file path.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"     * @param filePath A path object to the file to write the event encoding to.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"     * @throws IOException if there is a problem writing to the file.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(Path filePath) throws IOException {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"            FileWriter fileWriter \u003d new FileWriter(String.valueOf(filePath), true);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"            writeDeadlineEncoding(fileWriter);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"            fileWriter.close();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(writeException);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"    public String toString() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"        return \"{D}\" + super.toString() + \" (by: \" + getFormattedDate() + \")\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"        if (!(obj instanceof Deadline)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"dasha3412"},"content":"            return false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"dasha3412"},"content":"        Deadline objDeadline \u003d (Deadline) obj;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"dasha3412"},"content":"        if (!this.name.equals(objDeadline.name)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"dasha3412"},"content":"            return false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"dasha3412"},"content":"            return this.deadlineDate.equals(objDeadline.deadlineDate);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"dasha3412"},"content":"     * Returns the deadline date formatted in MMM dd yyyy format.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"dasha3412"},"content":"     * @return A string with the deadline date formatted.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"dasha3412"},"content":"    private String getFormattedDate() {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"dasha3412"},"content":"        return this.deadlineDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-22","isFullCredit":false}],"authorContributionMap":{"dasha3412":112}},{"path":"src/main/java/victor/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.tasks;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":" * Event class that handles tasks with a start time and an end time.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"public class Event extends Task {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    private static final String DATE_FORMAT \u003d \"MMM dd yyyy\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    protected String endTime;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"    protected String startTime;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    protected LocalDate endTimeDate;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    protected LocalDate startTimeDate;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"     * Constructor for the Event class that takes in strings for the event name, the start time,","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"     * and the end time.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"     * @param name A string with the name of the event to be stored","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"     * @param startTime A string with the start date of the event, should be either in format yyyy-mm-dd or dd-mm-yyyy.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"     * @param endTime A string with the end date of the event, should be either in format yyyy-mm-dd or dd-mm-yyyy.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"     * @throws DateTimeParseException Thrown if the start or end time cannot be parsed as a LocalDate object.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"     * @throws DateTimeException Thrown if the start time is after the end time.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"    public Event(String name, String startTime, String endTime) throws DateTimeParseException, DateTimeException {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"        super(name);","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"            this.startTimeDate \u003d LocalDate.parse(startTime);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"        } catch (DateTimeParseException parseException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"            this.startTimeDate \u003d LocalDate.parse(startTime,","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"                    DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"            this.startTimeDate \u003d LocalDate.parse(this.startTimeDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"            this.endTimeDate \u003d LocalDate.parse(endTime);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"        } catch (DateTimeParseException parseException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"            this.endTimeDate \u003d LocalDate.parse(endTime,","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"                    DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"            this.endTimeDate \u003d LocalDate.parse(this.endTimeDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"        if (endTimeDate.isBefore(startTimeDate)) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"            throw new DateTimeException(\"End time cannot be before start time\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"    public String getDeadline() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        return this.endTime;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"    public String getStartTime() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"        return this.startTime;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"     * Creates file encoding version of event and writes to file given a filewriter.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"     * @param fileWriter A FileWriter object that writes to a pre-initialised file with all task data.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"     * @throws IOException if there is a problem writing to the file.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"    private void writeEventEncoding(FileWriter fileWriter) throws IOException {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"        String toWrite \u003d \"E | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"        if (this.isDone) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"            toWrite +\u003d \"1 | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"            toWrite +\u003d \"0 | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"        toWrite +\u003d this.name + \" | \" + this.startTime + \" | \" + this.endTime + \"\\n\";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"        fileWriter.write(toWrite);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"     * Writes the event description to a file given an existing filewriter.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"     * @param fileWriter a pre-initialised filewriter object to write to a file with.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"     * @throws IOException if there is a problem writing to the file.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(FileWriter fileWriter) throws IOException {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"        // Write event to file","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"            writeEventEncoding(fileWriter);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(writeException);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"     * Writes the event description to a file given a file path.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"     * @param filePath A path object to the file to write the event encoding to.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"dasha3412"},"content":"     * @throws IOException if there is a problem writing to the file.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(Path filePath) throws IOException {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"dasha3412"},"content":"            FileWriter fileWriter \u003d new FileWriter(String.valueOf(filePath), true);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"dasha3412"},"content":"            writeEventEncoding(fileWriter);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"dasha3412"},"content":"            fileWriter.close();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(writeException);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"dasha3412"},"content":"    public String toString() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"dasha3412"},"content":"        return \"{E}\" + super.toString() + \" (from: \" + getFormattedDate(startTimeDate)","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"dasha3412"},"content":"                + \" to: \" + getFormattedDate(endTimeDate) + \")\";","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"dasha3412"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"dasha3412"},"content":"        if (!(obj instanceof Event)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"dasha3412"},"content":"            return false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"dasha3412"},"content":"        Event objEvent \u003d (Event) obj;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"dasha3412"},"content":"        if (!this.name.equals(objEvent.name)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"dasha3412"},"content":"            return false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"dasha3412"},"content":"        } else if (!this.startTimeDate.equals(objEvent.startTimeDate)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"dasha3412"},"content":"            return false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"dasha3412"},"content":"            return this.endTimeDate.equals(objEvent.endTimeDate);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"dasha3412"},"content":"    private String getFormattedDate(LocalDate date) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"dasha3412"},"content":"        return date.format(DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-22","isFullCredit":false}],"authorContributionMap":{"dasha3412":131}},{"path":"src/main/java/victor/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.tasks;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":" * Parent task class that Event, Deadline, and ToDo inherit from. Contains","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":" * the name of the event and the status of the task as completed or not.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"public class Task {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"    protected final String name;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"     * Constructs the task given a string with the task name, and sets the done","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"     * status to false.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"     * @param name A string with the name of the task.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    public Task(String name) {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    public void markDone() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"    public void markUndone() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(FileWriter fileWriter) throws IOException {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(Path filePath) throws IOException {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"    public String toString() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        String out;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"        if (this.isDone) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"            out \u003d \"{X} \" + this.name;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"            out \u003d \"{ } \" + this.name;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"        return out;","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-22","isFullCredit":false}],"authorContributionMap":{"dasha3412":49}},{"path":"src/main/java/victor/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.tasks;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import java.io.IOException;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"/**","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":" * ToDo class that handles tasks without no associated times and only a name.","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":" */","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"    public ToDo(String name) {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"        super(name);","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    private void writeToDoEncoding(FileWriter fileWriter) throws IOException {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"        String toWrite \u003d \"T | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"        if (this.isDone) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"            toWrite +\u003d \"1 | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"        } else {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"            toWrite +\u003d \"0 | \";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        toWrite +\u003d this.name + \"\\n\";","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"        fileWriter.write(toWrite);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"     * Writes the to do description to a file given an existing filewriter.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"     * @param fileWriter a pre-initialised filewriter object to write to a file with.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"     * @throws IOException if there is a problem writing to the file.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(FileWriter fileWriter) throws IOException {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"        // Write event to file","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"            writeToDoEncoding(fileWriter);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(writeException);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"    /**","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"     * Writes the to do description to a file given a file path.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"     * @param filePath A path object to the file to write the event encoding to.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"     * @throws IOException if there is a problem writing to the file.","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"     */","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"    public void writeToFile(Path filePath) throws IOException {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"        try {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"            FileWriter fileWriter \u003d new FileWriter(String.valueOf(filePath), true);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"            writeToDoEncoding(fileWriter);","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"            fileWriter.close();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"        } catch (IOException writeException) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"            throw new RuntimeException(writeException);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"    public String toString() {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"        return \"{T}\" + super.toString();","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"    @Override","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"        if (!(obj instanceof ToDo)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"            return false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"        ToDo objToDo \u003d (ToDo) obj;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"        if (!this.name.equals(objToDo.name)) {","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"            return false;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"        }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"        return true;","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false}],"authorContributionMap":{"dasha3412":73}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-radius: 30px; -fx-background-color: mistyrose; -fx-border-width: 2px; -fx-border-color: orchid; -fx-border-radius: 30px;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/22\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"         \u003cfont\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"            \u003cFont name\u003d\"Georgia\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        \u003cInsets bottom\u003d\"25.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"25.0\" /\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false}],"authorContributionMap":{"dasha3412":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.Cursor?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: ivory;\" xmlns\u003d\"http://javafx.com/javafx/22\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"victor.controls.MainWindow\"\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\"\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"         \u003ccursor\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"            \u003cCursor fx:constant\u003d\"TEXT\" /\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"         \u003c/cursor\u003e\u003c/TextField\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"         \u003ccursor\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"            \u003cCursor fx:constant\u003d\"HAND\" /\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"         \u003c/cursor\u003e\u003c/Button\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: ivory;\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: ivory;\" /\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-09-04","isFullCredit":false}],"authorContributionMap":{"dasha3412":26}},{"path":"src/main/resources/view/VictorDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-radius: 30px; -fx-border-radius: 25px; -fx-background-color: violet;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/22\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"         \u003cfont\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"            \u003cFont name\u003d\"Georgia\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        \u003cInsets bottom\u003d\"25.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"25.0\" /\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-09-18","isFullCredit":false}],"authorContributionMap":{"dasha3412":23}},{"path":"src/test/java/src/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"/** Arbitrary main class for src file of test folder */","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"public class Main {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"        System.out.println(\"Hello world!\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":6}},{"path":"src/test/java/victor/commands/UnmarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.commands;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"import victor.messages.ReturnMessage;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"import victor.tasklist.TaskList;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.ToDo;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"public class UnmarkCommandTest {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"    private static final Path DATA_PATH \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"    public void unmarkCommand_normalTest_unmarkedCorrectResponse() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"        UnmarkCommand comm \u003d new UnmarkCommand(new String[] {\"unmark\", \"1\"});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(DATA_PATH);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"        comm.setData(taskList);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        ToDo todo \u003d new ToDo(\"test\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"        ReturnMessage returnMessage \u003d comm.execute();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"        assertEquals(","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"                returnMessage.getMessagesAsString(),","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"                \"  ~  Oops, I guess you didn\u0027t finish the task! I marked this task as undone:\"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"                        + \"\\n\" + \"  ~  \" + todo);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"    public void unmarkCommand_nonexistentNumber_unmarkErrorMessage() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        UnmarkCommand comm \u003d new UnmarkCommand(new String[] {\"unmark\", \"1\"});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(DATA_PATH);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"        comm.setData(taskList);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"        ReturnMessage returnMessage \u003d comm.execute();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"        assertEquals(","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"                returnMessage.getMessagesAsString(),","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"                \"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"    public void unmarkCommand_noNumber_unmarkErrorMessage() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"        UnmarkCommand comm \u003d new UnmarkCommand(new String[] {\"unmark\"});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(DATA_PATH);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"        comm.setData(taskList);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        ReturnMessage returnMessage \u003d comm.execute();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"        assertEquals(","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"                returnMessage.getMessagesAsString(),","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"                \"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"    public void unmarkCommand_notANumber_unmarkErrorMessage() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        UnmarkCommand comm \u003d new UnmarkCommand(new String[] {\"unmark\", \"notANumber\"});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(DATA_PATH);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"        comm.setData(taskList);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"        ReturnMessage returnMessage \u003d comm.execute();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"        assertEquals(","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"                returnMessage.getMessagesAsString(),","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"                \"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-09-18","isFullCredit":false}],"authorContributionMap":{"dasha3412":62}},{"path":"src/test/java/victor/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.parser;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"import victor.commands.Command;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"import victor.commands.DeadlineCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"import victor.commands.EventCommand;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"import victor.commands.MarkCommand;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"import victor.commands.ToDoCommand;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"public class ParserTest {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    public void parseInput_toDo_toDoReturn() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"        ToDoCommand comm \u003d (ToDoCommand) parser.parseInput(\"todo test event\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        ToDoCommand newComm \u003d new ToDoCommand(new String[] {\"todo\", \"test\", \"event\"});","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verify parsed to-do is the same\", () -\u003e assertEquals(comm.getToDo(), newComm.getToDo()), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(comm.getTaskList(), newComm.getTaskList()), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(comm.getAdditionalInput(), newComm.getAdditionalInput()));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"    public void parseInput_noNameDeadline_blankDeadline() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        DeadlineCommand comm \u003d (DeadlineCommand) parser.parseInput(\"deadline\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"        DeadlineCommand newComm \u003d new DeadlineCommand(new String[] {\"deadline\"});","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verify that empty input for deadline is same\", ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(comm.getDeadline(), newComm.getDeadline()), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(comm.getAdditionalInput(), newComm.getAdditionalInput()), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(comm.getTaskList(), newComm.getTaskList()));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"    public void parseInput_eventInput_eventCommand() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"        // must type case to use getEvent() method","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"        EventCommand comm \u003d (EventCommand) parser.parseInput(\"event test /from 2023-02-11 /to 2023-03-01\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"        EventCommand newComm \u003d new EventCommand(new String[] {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"            \"event\", \"test\", \"/from\", \"2023-02-11\", \"/to\", \"2023-03-01\"});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verify parsed event is the same\", () -\u003e assertEquals(comm.getEvent(), newComm.getEvent()), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(comm.getTaskList(), newComm.getTaskList()), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(comm.getAdditionalInput(), newComm.getAdditionalInput()));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"    public void parseInput_noInput_blankDefaultCommand() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"        Command comm \u003d parser.parseInput(\"\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"        Command newComm \u003d new DeadlineCommand(new String[] {\"\"});","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verify that empty input to parser gives blank output\", ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(comm.getAdditionalInput(), newComm.getAdditionalInput()), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(comm.getTaskList(), newComm.getTaskList()));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"    public void parseInput_markInput_markCommand() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"        // must type case to use getEvent() method","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"        MarkCommand comm \u003d (MarkCommand) parser.parseInput(\"mark 2\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"        MarkCommand newComm \u003d new MarkCommand(new String[] {\"mark\", \"2\"});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verify parsed event is the same\", () -\u003e assertEquals(","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"                comm.getNumber(), newComm.getNumber()), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(comm.getTaskList(), newComm.getTaskList()), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(comm.getAdditionalInput(), newComm.getAdditionalInput()));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"    public void parseInput_exitInput_exitCommand() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"        Command comm \u003d parser.parseInput(\"exit\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"        Command newComm \u003d new DeadlineCommand(new String[] {\"exit\"});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verify that exit input to parser gives exit command\", ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(comm.getAdditionalInput(), newComm.getAdditionalInput()), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(comm.getTaskList(), newComm.getTaskList()), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertTrue(comm.isExit()));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"    public void parseInput_byeInput_exitCommand() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"        Command comm \u003d parser.parseInput(\"bye\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"        Command newComm \u003d new DeadlineCommand(new String[] {\"bye\"});","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verify that bye input to parser gives exit command\", ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(comm.getAdditionalInput(), newComm.getAdditionalInput()), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(comm.getTaskList(), newComm.getTaskList()), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertTrue(comm.isExit()));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":93}},{"path":"src/test/java/victor/tasklist/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"package victor.tasklist;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.Deadline;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.Event;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.Task;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"import victor.tasks.ToDo;","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"public class TaskListTest {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"    public void taskList_testInit_makeTaskList() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"        assertEquals(taskList.getTaskList(), new ArrayList\u003cTask\u003e());","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"dasha3412"},"content":"    public void taskList_testAdd_addTaskToTaskList() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"dasha3412"},"content":"        Task deadline \u003d new Deadline(\"test deadline\", \"2020-01-01\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"dasha3412"},"content":"        String[] response \u003d taskList.addTask(deadline);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"dasha3412"},"content":"        String[] expectedResponse \u003d new String[] {\"  ~  So cute! I added this task:\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"dasha3412"},"content":"            \"  ~  {D}{ } test deadline (by: Jan 01 2020)\",","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"dasha3412"},"content":"            \"  ~  You now have 1 task in your list.\"};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verifying task list adding tasks works\", ()","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(response, expectedResponse), ()","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(taskList.getSize(), 1));","lastModifiedDate":"2024-09-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"dasha3412"},"content":"    public void taskList_markDone_correctMark() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"dasha3412"},"content":"        Task deadline \u003d new Deadline(\"test deadline\", \"2020-01-01\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"dasha3412"},"content":"        String[] response \u003d taskList.markDone(1);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"dasha3412"},"content":"        String[] expectedResponse \u003d new String[] {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"dasha3412"},"content":"            \"  ~  You finished a task! You\u0027re amazing! I marked this task as done:\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"dasha3412"},"content":"            \"  ~  {D}{X} test deadline (by: Jan 01 2020)\"};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verifying task list marking tasks as done works\", ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(response, expectedResponse), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(taskList.getSize(), 1));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"dasha3412"},"content":"    public void taskList_markDoneEmptyList_incorrectInputResponse() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"dasha3412"},"content":"        String[] response \u003d taskList.markDone(1);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"dasha3412"},"content":"        String[] expectedResponse \u003d new String[] {\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\"};","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Checking marking empty list returns error message to user\", ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(response, expectedResponse), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(taskList.getSize(), 0));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"dasha3412"},"content":"    public void taskList_markDoneMarkNegativeNumber_incorrectInputResponse() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"dasha3412"},"content":"        Task deadline \u003d new Deadline(\"test deadline\", \"2020-01-01\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"dasha3412"},"content":"        Task todo \u003d new ToDo(\"test dodo\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"dasha3412"},"content":"        String[] response \u003d taskList.markDone(-9);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"dasha3412"},"content":"        String[] expectedResponse \u003d new String[] {\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\"};","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Checking marking empty list returns error message to user\", ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(response, expectedResponse), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(taskList.getSize(), 2));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"dasha3412"},"content":"    public void taskList_markDoneMarkZero_incorrectInputResponse() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"dasha3412"},"content":"        Task deadline \u003d new Deadline(\"test deadline\", \"2020-01-01\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"dasha3412"},"content":"        Task todo \u003d new ToDo(\"test dodo\");","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"dasha3412"},"content":"        String[] response \u003d taskList.markDone(0);","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"dasha3412"},"content":"        String[] expectedResponse \u003d new String[] {\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\"};","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Checking marking empty list returns error message to user\", ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(response, expectedResponse), ()","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(taskList.getSize(), 2));","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"dasha3412"},"content":"    public void taskList_testMarkUndone_correctUnmarkResponse() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"dasha3412"},"content":"        Task deadline \u003d new Deadline(\"test deadline\", \"2020-01-01\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"dasha3412"},"content":"        Task event \u003d new Event(\"test event\", \"2024-02-02\", \"2024-02-03\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(event);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"dasha3412"},"content":"        taskList.markDone(1);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"dasha3412"},"content":"        String[] response \u003d taskList.unmarkDone(2);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"dasha3412"},"content":"        String[] expectedResponse \u003d new String[] {\"  ~  Oops, I guess you didn\u0027t finish the task! I marked this\"","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"dasha3412"},"content":"                + \" task as undone:\", \"  ~  {E}{ } test event (from: Feb 02 2024 to: Feb 03 2024)\"};","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verifying task list unmarking tasks as done works\", ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(response, expectedResponse), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(taskList.getSize(), 2));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"dasha3412"},"content":"    public void taskList_testDelete_correctDeleteResponse() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"dasha3412"},"content":"        Task deadline \u003d new Deadline(\"test deadline\", \"2020-01-01\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"dasha3412"},"content":"        Task event \u003d new Event(\"test event\", \"2024-02-02\", \"2024-02-03\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(event);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"dasha3412"},"content":"        taskList.markDone(1);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"dasha3412"},"content":"        String[] response \u003d taskList.deleteTask(1);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"dasha3412"},"content":"        String[] expectedResponse \u003d new String[] {\"  ~  I see you\u0027re done with that task now!\",","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"dasha3412"},"content":"            \"  ~  {D}{X} test deadline (by: Jan 01 2020)\", \"  ~  You now have 1 task in your list.\"};","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verifying task list deleting tasks works\", ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(response, expectedResponse), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(taskList.getSize(), 1));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"dasha3412"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"dasha3412"},"content":"    @Test","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"dasha3412"},"content":"    public void taskList_testInvalidNumberDelete_deleteErrorResponse() {","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"dasha3412"},"content":"        Path dataPath \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"dasha3412"},"content":"        Task deadline \u003d new Deadline(\"test deadline\", \"2020-01-01\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"dasha3412"},"content":"        Task event \u003d new Event(\"test event\", \"2024-02-02\", \"2024-02-03\");","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"dasha3412"},"content":"        TaskList taskList \u003d new TaskList(dataPath);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"dasha3412"},"content":"        taskList.addTask(event);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"dasha3412"},"content":"        taskList.markDone(1);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"dasha3412"},"content":"        String[] response \u003d taskList.deleteTask(99);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"dasha3412"},"content":"        String[] expectedResponse \u003d new String[] {\"  ~  Oh dear, I don\u0027t think there\u0027s a task with that number :(\"};","lastModifiedDate":"2024-09-18","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"dasha3412"},"content":"        assertAll(\"Verifying task list deleting tasks works\", ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertArrayEquals(response, expectedResponse), ()","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"dasha3412"},"content":"                -\u003e assertEquals(taskList.getSize(), 2));","lastModifiedDate":"2024-08-30","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"dasha3412"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"dasha3412"},"content":"}","lastModifiedDate":"2024-08-29","isFullCredit":false}],"authorContributionMap":{"dasha3412":145}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dasha3412"},"content":"todo borrow book","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"dasha3412"},"content":"deadline return library book /by 9th August","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"dasha3412"},"content":"deadline call family /by Sunday","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"dasha3412"},"content":"event business conference /from 2 PM /to 5 PM","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"dasha3412"},"content":"mark 1","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"dasha3412"},"content":"list","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"dasha3412"},"content":"todo write script for conference","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"dasha3412"},"content":"mark 3","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"dasha3412"},"content":"list","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"dasha3412"},"content":"mark 19","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"dasha3412"},"content":"todo make presentation slides","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"dasha3412"},"content":"event business presentation /from 8 AM /to 12 PM","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"dasha3412"},"content":"unmark 13","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"dasha3412"},"content":"list","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"dasha3412"},"content":"mark 5","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"mark 6","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"dasha3412"},"content":"list","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"unmark 5","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"dasha3412"},"content":"todo bake peach cobbler","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"dasha3412"},"content":"mark","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"dasha3412"},"content":"unmark bye","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"dasha3412"},"content":"list","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"dasha3412"},"content":"bye","lastModifiedDate":"2024-08-22","isFullCredit":false}],"authorContributionMap":{"dasha3412":23}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"dasha3412"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/victor/*.java","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"dasha3412"},"content":"    echo \"Script executed from: ${PWD}\"","lastModifiedDate":"2024-09-11","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"dasha3412":2,"-":19}}]
