[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"    mainClass.set(\"Elysia\")","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"    archiveBaseName \u003d \"elysia\"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"    archiveFileName \u003d \u0027elysia.jar\u0027","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":3,"-":39}},{"path":"data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"D|1|finish |now","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"E|1|test2 |now |then","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"T|0|test","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"D|1|die |Oct 23 2025","lastModifiedDate":"2024-09-03","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":4}},{"path":"src/main/java/Elysia.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"import elysia.ui.ElysiaException;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"import elysia.ui.InputOutputHandler;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"import elysia.ui.Message;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":" * The main class for the Elysia application.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":" * This class handles the main program loop, where user input is continuously accepted and processed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":" * It interacts with the user via the console and manages the flow of the application.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"public class Elysia {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"     * The main method that starts the Elysia application.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"     * Displays an initial greeting, processes user commands, and handles the application shutdown.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"     * @param args Command-line arguments (not used).","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"        Message.print(\"Hi~! I\u0027m Elysia! As you can see, I\u0027m a girl as beautiful as a flower!\\n\" +","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"                \"How can I help you today? I\u0027m all ears!\");","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"        Scanner command \u003d new Scanner(System.in);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"        String input;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"        boolean repeat \u003d true;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"        InputOutputHandler handler \u003d new InputOutputHandler();","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"        while (repeat) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"            input \u003d command.nextLine();","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"            try {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"                repeat \u003d handler.parseInput(input);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"            } catch (ElysiaException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"                Message.print(\"What are you trying to say? You need to talk to pretty girls nicely...\");","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"        command.close();","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"        Message.print(\"Aww, going already? Don\u0027t miss me too much, ok?\");","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":43}},{"path":"src/main/java/elysia/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.tasks;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":" * Represents a deadline task with a specific due date.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":" * Extends the Task class and includes a date/time by which the task should be completed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"    protected String by;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs a Deadline task with a description and a due date.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"     * @param by The date and/or time by which the task is to be completed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"        super(description);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"     * Converts the Deadline task to a string format suitable for saving to a file.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"     * The format is \"D\" followed by the format from Task, then a separator \"|\", and the due date.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the Deadline task in file format.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"    public String toFile() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"        return \"D\" + super.toFile() + \"|\" + by;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"     * Returns a string representation of the Deadline task, including its description and due date.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"     * The format is \"[D]\" followed by the format from Task, then \"(by: due date)\".","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the Deadline task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"    public String toString() {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"    public boolean containsString(String searchString) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"        return super.containsString(searchString) || by.contains(searchString);","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":47}},{"path":"src/main/java/elysia/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.tasks;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":" * Represents an event task with a specific start and end time.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":" * Extends the Task class and includes the time range during which the event occurs.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"public class Event extends Task {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"    protected String from;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"    protected String to;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs an Event task with a description, start time, and end time.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"     * @param from The start time of the event.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"     * @param to The end time of the event.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"        super(description);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"     * Converts the Event task to a string format suitable for saving to a file.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"     * The format is \"E\" followed by the format from Task, then two separators \"|\",","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"     * with the start time and end time.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the Event task in file format.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"    public String toFile() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"        return \"E\" + super.toFile() + \"|\" + from + \"|\" + to;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"     * Returns a string representation of the Event task, including its description,","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"     * start time, and end time. The format is \"[E]\" followed by the format from Task,","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"     * then \"(from: start time to: end time)\".","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the Event task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"    public String toString() {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"    public boolean containsString(String searchString) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"        return super.containsString(searchString) || from.contains(searchString) || to.contains(searchString);","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":52}},{"path":"src/main/java/elysia/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.tasks;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":" * Represents a general task with a description and a status indicating whether it is completed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":" * Provides basic functionality to update the task\u0027s status and format it as a string for display or file storage.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"public class Task {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"    protected String description;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs a Task with the given description.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"     * The task is initially not marked as done.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"    public Task(String description) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"     * Updates the status of the task to mark it as done or not done.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"     * @param status A boolean value where true marks the task as done, and false marks it as not done.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"    public void updateStatus(boolean status) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"        isDone \u003d status;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"     * Converts the Task to a string format suitable for saving to a file.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"     * The format includes the completion status (1 for done, 0 for not done) and the task description.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the Task in file format.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"    public String toFile() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"        return \"|\" + (isDone ? \"1\" : \"0\") + \"|\" + description;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"     * Returns a string representation of the Task, including its status and description.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"     * The format is \"[X]\" for a completed task or \"[ ]\" for an incomplete task, followed by the description.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the Task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"    public String toString() {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + description;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"    public boolean containsString(String searchString) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"linedoestrolling"},"content":"        return description.contains(searchString);","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":55}},{"path":"src/main/java/elysia/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.tasks;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" * Manages a list of tasks. Provides functionality to add, delete, mark as done, unmark, and","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":" * display tasks. The list of tasks can also be converted to a format suitable for file storage.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"public class TaskList {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"    protected ArrayList\u003cTask\u003e list;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"    public TaskList() {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"        list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"     * @param task The task to be added to the list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"        list.add(task);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"     * Deletes a task from the list based on its position in the list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"     * @param index The 1-based index of the task to be deleted.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"     * @return The task that was removed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range (index \u003c 1 or index \u003e list.size()).","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"    public Task deleteTask(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"        return list.remove(index-1);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"     * Marks a task as done based on its position in the list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"     * @param taskNumber The 1-based index of the task to be marked as done.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range (index \u003c 1 or index \u003e list.size()).","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"     * @throws NullPointerException If the task at the given index is null.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"    public void markTask(int taskNumber) throws IndexOutOfBoundsException, NullPointerException {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"        list.get(taskNumber-1).updateStatus(true);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"     * Unmarks a task as done based on its position in the list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"linedoestrolling"},"content":"     * @param taskNumber The 1-based index of the task to be unmarked.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"linedoestrolling"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range (index \u003c 1 or index \u003e list.size()).","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"linedoestrolling"},"content":"     * @throws NullPointerException If the task at the given index is null.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"linedoestrolling"},"content":"    public void unmarkTask(int taskNumber) throws IndexOutOfBoundsException, NullPointerException {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"linedoestrolling"},"content":"        list.get(taskNumber-1).updateStatus(false);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"linedoestrolling"},"content":"     * Returns the string representation of a task at a specific position in the list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"linedoestrolling"},"content":"     * @param taskNumber The 1-based index of the task to be printed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"linedoestrolling"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range (index \u003c 1 or index \u003e list.size()).","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"linedoestrolling"},"content":"     * @throws NullPointerException If the task at the given index is null.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"linedoestrolling"},"content":"    public String printTask(int taskNumber) throws IndexOutOfBoundsException, NullPointerException {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"linedoestrolling"},"content":"        return list.get(taskNumber-1).toString();","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"linedoestrolling"},"content":"     * Returns the number of tasks in the list as a string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"linedoestrolling"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"linedoestrolling"},"content":"    public String getSizeAsString() {","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"linedoestrolling"},"content":"        return \"\" + list.size();","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"linedoestrolling"},"content":"     * Converts the entire task list to a string format suitable for saving to a file.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"linedoestrolling"},"content":"     * Each task is represented in its file format, with tasks separated by newlines.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the task list in file format.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"linedoestrolling"},"content":"    public String toFile() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"linedoestrolling"},"content":"        String output \u003d \"\";","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"linedoestrolling"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"linedoestrolling"},"content":"            output +\u003d list.get(i).toFile() + \"\\n\";","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"linedoestrolling"},"content":"        return output;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"linedoestrolling"},"content":"     * Returns a string representation of the entire task list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"linedoestrolling"},"content":"     * Each task is prefixed by its position in the list (1-based index), followed by its string representation.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the task list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"linedoestrolling"},"content":"    public String toString() {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"linedoestrolling"},"content":"        String output \u003d \"\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"linedoestrolling"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"linedoestrolling"},"content":"            output +\u003d (i+1) + \".\" + list.get(i).toString() + \"\\n\";","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"linedoestrolling"},"content":"        return output;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"linedoestrolling"},"content":"    public TaskList searchByKeyword(String keyword) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"linedoestrolling"},"content":"        TaskList searchResults \u003d new TaskList();","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"linedoestrolling"},"content":"        for (Task task: list) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"linedoestrolling"},"content":"            if (task.containsString(keyword)) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"linedoestrolling"},"content":"                searchResults.addTask(task);","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"linedoestrolling"},"content":"        return searchResults;","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":122}},{"path":"src/main/java/elysia/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.tasks;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":" * Represents a simple task that needs to be done, without any specific date or time.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":" * Extends the Task class and provides a unique identifier for ToDo tasks.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"public class Todo extends Task{","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs a ToDo task with the given description.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"     * @param description The description of the ToDo task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"        super(description);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"     * Converts the ToDo task to a string format suitable for saving to a file.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"     * The format is \"T\" followed by the format from Task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the ToDo task in file format.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"    public String toFile() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"        return \"T\" + super.toFile();","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"     * Returns a string representation of the ToDo task, including its description.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"     * The format is \"[T]\" followed by the format from Task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string representation of the ToDo task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"    public String toString() {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":39}},{"path":"src/main/java/elysia/ui/ElysiaException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.ui;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":" * Represents a custom exception for the Elysia application.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":" * Extends the Exception class and provides a way to signal errors specific to the application.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"public class ElysiaException extends Exception{","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs a new ElysiaException with the specified detail message.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"     * @param message The detail message that provides information about the exception.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"    public ElysiaException(String message) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"        super(message);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":16}},{"path":"src/main/java/elysia/ui/FileReaderWriter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.ui;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Deadline;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Event;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.TaskList;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Todo;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"import java.io.File;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"import java.io.IOException;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"import java.util.Objects;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":" * Manages reading from and writing to a file for the Elysia application.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":" * Supports creating a file, saving the current task list to a file, and loading tasks from a file.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"public class FileReaderWriter {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"    java.nio.file.Path path;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"    TaskList taskList;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs a FileReaderWriter with a reference to the task list to be managed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"     * The file used for storing tasks is set to \"data.txt\" by default.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"     * @param taskList The TaskList instance that will be saved to and loaded from the file.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"    public FileReaderWriter(TaskList taskList) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"        path \u003d java.nio.file.Paths.get(\"data.txt\");","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"     * Creates a new file if it does not already exist.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"     * @return A message indicating whether the file was successfully created or if an error occurred.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"    public String createFile() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"        String output \u003d \"\";","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"        try {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"            File myObj \u003d new File(String.valueOf(path));","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"            if (myObj.createNewFile()) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d (\"I created \" + myObj.getName() + \" for you~\");","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"            output \u003d \"Aww something went wrong :(\\n\";","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"linedoestrolling"},"content":"        return output;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"linedoestrolling"},"content":"     * Writes the current task list to the file in a format suitable for storage.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"linedoestrolling"},"content":"     * @return A message indicating whether the tasks were successfully saved or if an error occurred.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"linedoestrolling"},"content":"    public String writeFile() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"linedoestrolling"},"content":"        String output \u003d \"\";","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"linedoestrolling"},"content":"        try {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"linedoestrolling"},"content":"            Files.writeString(path, taskList.toFile(), StandardCharsets.UTF_8);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"linedoestrolling"},"content":"            output \u003d \"Saving all your tasks for you~\";","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"linedoestrolling"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"linedoestrolling"},"content":"            output \u003d \"Aww something went wrong :(\\n\";","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"linedoestrolling"},"content":"        return output;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"linedoestrolling"},"content":"     * Reads tasks from the file and loads them into the task list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"linedoestrolling"},"content":"     * Supports loading tasks of type ToDo, Deadline, and Event.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"linedoestrolling"},"content":"     * @return A message indicating whether the tasks were successfully loaded or if the file was not found.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"linedoestrolling"},"content":"    public String readFile() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"linedoestrolling"},"content":"        String output \u003d \"\";","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"linedoestrolling"},"content":"        File file \u003d new File(path.toString());","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"linedoestrolling"},"content":"        try {","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"linedoestrolling"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"linedoestrolling"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"linedoestrolling"},"content":"                String taskInput \u003d sc.nextLine();","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"linedoestrolling"},"content":"                String[] taskParts \u003d taskInput.split(\"\\\\|\");","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"linedoestrolling"},"content":"                switch(taskParts[0]) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"linedoestrolling"},"content":"                case \"T\":","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"linedoestrolling"},"content":"                    Todo newTodo \u003d new Todo(taskParts[2]);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"linedoestrolling"},"content":"                    if (Objects.equals(taskParts[1], \"1\")) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"linedoestrolling"},"content":"                        newTodo.updateStatus(true);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"linedoestrolling"},"content":"                    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"linedoestrolling"},"content":"                    taskList.addTask(newTodo);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"linedoestrolling"},"content":"                    break;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"linedoestrolling"},"content":"                case \"D\":","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"linedoestrolling"},"content":"                    Deadline newDeadline \u003d new Deadline(taskParts[2], taskParts[3]);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"linedoestrolling"},"content":"                    if (Objects.equals(taskParts[1], \"1\")) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"linedoestrolling"},"content":"                        newDeadline.updateStatus(true);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"linedoestrolling"},"content":"                    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"linedoestrolling"},"content":"                    taskList.addTask(newDeadline);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"linedoestrolling"},"content":"                    break;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"linedoestrolling"},"content":"                case \"E\":","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"linedoestrolling"},"content":"                    Event newEvent \u003d new Event(taskParts[2], taskParts[3], taskParts[4]);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"linedoestrolling"},"content":"                    if (Objects.equals(taskParts[1], \"1\")) {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"linedoestrolling"},"content":"                        newEvent.updateStatus(true);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"linedoestrolling"},"content":"                    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"linedoestrolling"},"content":"                    taskList.addTask(newEvent);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"linedoestrolling"},"content":"                    break;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"linedoestrolling"},"content":"                }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"linedoestrolling"},"content":"            output \u003d \"I loaded your past data! Aren\u0027t I amazing? Come on praise me!\";","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"linedoestrolling"},"content":"        } catch (FileNotFoundException ignored) {}","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"linedoestrolling"},"content":"        return output;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-09-02","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":114}},{"path":"src/main/java/elysia/ui/InputOutputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.ui;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.TaskList;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Todo;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Event;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Deadline;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Task;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"import java.util.Objects;","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":" * Handles user input and output for the Elysia application.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":" * Manages the parsing of user commands and interactions with the task list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"public class InputOutputHandler {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"    TaskList taskList;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"    FileReaderWriter fileReaderWriter;","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs an InputOutputHandler and initializes the task list and file reader/writer.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"     * Loads any previously saved tasks from the file.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"    public InputOutputHandler() {","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"        fileReaderWriter \u003d new FileReaderWriter(taskList);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"        String msg \u003d fileReaderWriter.readFile();","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"        if (!msg.isEmpty()) {","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"            Message.print(msg);","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"     * Parses user input and executes the corresponding command.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"     * Supports commands for adding, deleting, marking, unmarking tasks, and more.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"     * @param input The user\u0027s command as a string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"     * @return {@code true} if the application should continue running; {@code false} if the application should exit.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException If the input command is unknown.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"     * @throws StringIndexOutOfBoundsException If there is an error processing the input string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"    public boolean parseInput(String input) throws ElysiaException, StringIndexOutOfBoundsException {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"        String output \u003d \"\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"            output +\u003d fileReaderWriter.createFile() + \"\\n\";","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"            output +\u003d fileReaderWriter.writeFile();","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"            Message.print(output);","lastModifiedDate":"2024-09-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"            return false;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"            output \u003d \"Here\u0027s your list! \\n\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"linedoestrolling"},"content":"            output +\u003d taskList.toString();","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"linedoestrolling"},"content":"        } else if (input.startsWith(\"mark\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"linedoestrolling"},"content":"            int taskNumber \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"linedoestrolling"},"content":"            try {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"linedoestrolling"},"content":"                taskList.markTask(taskNumber);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Amazing! You\u0027ve completed this task! \\n\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"linedoestrolling"},"content":"                output +\u003d taskList.printTask(taskNumber);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"linedoestrolling"},"content":"            } catch (IndexOutOfBoundsException | NullPointerException e) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Uh oh, this task number does not exist...\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"linedoestrolling"},"content":"        } else if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"linedoestrolling"},"content":"            int taskNumber \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"linedoestrolling"},"content":"            try {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"linedoestrolling"},"content":"                taskList.unmarkTask(taskNumber);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Making a pretty girl undo her work is not good for her health! \\n\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"linedoestrolling"},"content":"                output +\u003d taskList.printTask(taskNumber);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"linedoestrolling"},"content":"            } catch (IndexOutOfBoundsException | NullPointerException e){","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Uh oh, this task number does not exist...\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"linedoestrolling"},"content":"        } else if (input.startsWith(\"todo\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"linedoestrolling"},"content":"            if (input.equals(\"todo\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Hmph! You don\u0027t expect me to read your mind for this todo, do you?\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"linedoestrolling"},"content":"            } else {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"linedoestrolling"},"content":"                Todo newTodo \u003d new Todo(input.substring(5));","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"linedoestrolling"},"content":"                taskList.addTask(newTodo);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Added the task below to your list~\\n\" + newTodo.toString() + \"\\n\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"linedoestrolling"},"content":"                output +\u003d \"Wow! You now have \" + taskList.getSizeAsString() + \" tasks in your list!\";","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"linedoestrolling"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"linedoestrolling"},"content":"            if (input.equals(\"deadline\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Hmph! You don\u0027t expect me to read your mind for this deadline, do you?\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"linedoestrolling"},"content":"            } else {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"linedoestrolling"},"content":"                int index \u003d input.indexOf(\"/\");","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"linedoestrolling"},"content":"                String rawDate \u003d input.substring(index + 4);","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"linedoestrolling"},"content":"                String date;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"linedoestrolling"},"content":"                try {","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"linedoestrolling"},"content":"                    LocalDate parsedDate \u003d LocalDate.parse(rawDate);","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"linedoestrolling"},"content":"                    date \u003d parsedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"linedoestrolling"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"linedoestrolling"},"content":"                    output \u003d \"This doesn\u0027t look like a date... I won\u0027t be able to do anything with it but as long\" +","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"linedoestrolling"},"content":"                            \"as you understand it :)\" + \"\\n\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"linedoestrolling"},"content":"                    date \u003d rawDate;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"linedoestrolling"},"content":"                }","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"linedoestrolling"},"content":"                Deadline newDeadline \u003d new Deadline(input.substring(9,index), date);","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"linedoestrolling"},"content":"                taskList.addTask(newDeadline);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"linedoestrolling"},"content":"                output +\u003d \"Added the task below to your list~\\n\" + newDeadline.toString() + \"\\n\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"linedoestrolling"},"content":"                output +\u003d \"Wow! You now have \" + taskList.getSizeAsString() + \" tasks in your list!\";","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"linedoestrolling"},"content":"        } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"linedoestrolling"},"content":"            if (input.equals(\"event\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Hmph! You don\u0027t expect me to read your mind for this event, do you?\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"linedoestrolling"},"content":"            } else {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"linedoestrolling"},"content":"                int index0 \u003d input.indexOf(\"/\");","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"linedoestrolling"},"content":"                int index1 \u003d input.lastIndexOf(\"/\");","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"linedoestrolling"},"content":"                Event newEvent \u003d new Event(input.substring(6,index0),","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"linedoestrolling"},"content":"                        input.substring(index0 + 6, index1),","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"linedoestrolling"},"content":"                        input.substring(index1+4));","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"linedoestrolling"},"content":"                taskList.addTask(newEvent);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Added the task below to your list~\\n\" + newEvent.toString() + \"\\n\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"linedoestrolling"},"content":"                output +\u003d \"Wow! You now have \" + taskList.getSizeAsString() + \" tasks in your list!\";","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"linedoestrolling"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"linedoestrolling"},"content":"            if (input.equals(\"delete\")) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Hmph! What do you even want me to delete?\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"linedoestrolling"},"content":"            } else {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"linedoestrolling"},"content":"                int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"linedoestrolling"},"content":"                try {","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"linedoestrolling"},"content":"                    Task deletedTask \u003d taskList.deleteTask(index);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"linedoestrolling"},"content":"                    output \u003d \"You don\u0027t need this task below anymore? Ok deleting it~\\n\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"linedoestrolling"},"content":"                    output +\u003d deletedTask.toString();","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"linedoestrolling"},"content":"                    output +\u003d \"Wow! You now have \" + taskList.getSizeAsString() + \" tasks in your list!\";","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"linedoestrolling"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"linedoestrolling"},"content":"                    output \u003d \"Uh oh, this task number does not exist...\";","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"linedoestrolling"},"content":"                }","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"linedoestrolling"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"linedoestrolling"},"content":"            if (input.equals(\"find\")) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"linedoestrolling"},"content":"                output \u003d \"Hmph! What do you even want me to find?\";","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"linedoestrolling"},"content":"            } else {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"linedoestrolling"},"content":"                TaskList searchResults \u003d taskList.searchByKeyword(input.substring(5));","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"linedoestrolling"},"content":"                if (Objects.equals(searchResults.size(), \"0\")) {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"linedoestrolling"},"content":"                    output \u003d \"I couldn\u0027t find anything...\";","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"linedoestrolling"},"content":"                } else {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"linedoestrolling"},"content":"                    output \u003d \"Here\u0027s the tasks matching your search string! \" +","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"linedoestrolling"},"content":"                            \"I hope you found what you\u0027re looking for!\\n\";","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"linedoestrolling"},"content":"                    output +\u003d searchResults.toString();","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"linedoestrolling"},"content":"                }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"linedoestrolling"},"content":"        } else {","lastModifiedDate":"2024-09-08","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"linedoestrolling"},"content":"            throw new ElysiaException(\"unknown command\");","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"linedoestrolling"},"content":"        Message.print(output);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"linedoestrolling"},"content":"        return true;","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":148}},{"path":"src/main/java/elysia/ui/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.ui;","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":" * Provides utility methods for displaying formatted messages in the Elysia application.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":" * Each message is enclosed within a divider for clear visual separation in the console output.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"public class Message {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"    static String DIVIDER \u003d \"________________________________________________________________________________________\\n\";","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"     * Prints a formatted message to the console.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"     * The message is enclosed between two dividers for clarity.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"     * @param string The message to be printed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"    public static void print(String string) {","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"        System.out.println(DIVIDER + string + \"\\n\" + DIVIDER);","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":19}},{"path":"src/test/java/elysia/tasks/TaskListStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.tasks;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":" * A stub implementation of the {@link TaskList} class for testing purposes.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":" * This class overrides methods from {@link TaskList} to track method calls and simulate behavior","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" * for use in unit tests.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"public class TaskListStub extends TaskList{","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"    public boolean isToStringCalled \u003d false;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"    public boolean isPrintTaskCalled \u003d false;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"    public boolean isDeleteTaskCalled \u003d false;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"    public boolean isSizeCalled \u003d false;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"    public boolean isAddTaskCalled \u003d false;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"    public int taskNumber;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"    public Task task;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link TaskList#addTask(Task)} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code isAddTaskCalled} flag to {@code true} and stores the provided task.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"     * @param task The task to be added to the list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"        isAddTaskCalled \u003d true;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link TaskList#markTask(int)} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code taskNumber} to the provided number and simulates throwing an exception for invalid indices.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"     * @param taskNumber The index of the task to be marked.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"     * @throws IndexOutOfBoundsException If the task number is -1.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"    public void markTask (int taskNumber) {","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"        if (taskNumber \u003d\u003d -1) {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"            throw new IndexOutOfBoundsException(\"task not in tasklist\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link TaskList#unmarkTask(int)} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code taskNumber} to the provided number and simulates throwing an exception for invalid indices.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"     * @param taskNumber The index of the task to be unmarked.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"     * @throws IndexOutOfBoundsException If the task number is -1.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"    public void unmarkTask (int taskNumber) {","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"linedoestrolling"},"content":"        if (taskNumber \u003d\u003d -1) {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"linedoestrolling"},"content":"            throw new IndexOutOfBoundsException(\"task not in tasklist\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"linedoestrolling"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link TaskList#deleteTask(int)} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code isDeleteTaskCalled} flag to {@code true} and simulates returning a new {@link Task}.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"linedoestrolling"},"content":"     * Throws an {@link IndexOutOfBoundsException} if the index is -1.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"linedoestrolling"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"linedoestrolling"},"content":"     * @return A new {@link Task} instance.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"linedoestrolling"},"content":"     * @throws IndexOutOfBoundsException If the index is -1.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"linedoestrolling"},"content":"    public Task deleteTask(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"linedoestrolling"},"content":"        isDeleteTaskCalled \u003d true;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"linedoestrolling"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"linedoestrolling"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"linedoestrolling"},"content":"        }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"linedoestrolling"},"content":"        return new Task(\"\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link TaskList#size()} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code isSizeCalled} flag to {@code true} and returns an empty string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"linedoestrolling"},"content":"     * @return An empty string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"linedoestrolling"},"content":"    public String getSizeAsString() {","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"linedoestrolling"},"content":"        isSizeCalled \u003d true;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"linedoestrolling"},"content":"        return \"\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link TaskList#printTask(int)} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code isPrintTaskCalled} flag to {@code true} and returns an empty string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"linedoestrolling"},"content":"     * @param taskNumber The index of the task to be printed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"linedoestrolling"},"content":"     * @return An empty string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"linedoestrolling"},"content":"    public String printTask(int taskNumber) {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"linedoestrolling"},"content":"        isPrintTaskCalled \u003d true;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"linedoestrolling"},"content":"        return \"\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link TaskList#toString()} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code isToStringCalled} flag to {@code true} and returns an empty string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"linedoestrolling"},"content":"     * @return An empty string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"linedoestrolling"},"content":"    public String toString() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"linedoestrolling"},"content":"        isToStringCalled \u003d true;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"linedoestrolling"},"content":"        return \"\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-09-05","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":113}},{"path":"src/test/java/elysia/tasks/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.tasks;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"import java.lang.IndexOutOfBoundsException;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":" * Unit tests for the {@link TaskList} class.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":" * Tests the functionality of adding and deleting tasks, as well as handling exceptions.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"public class TaskListTest {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"     * Sets up the test environment before each test is run.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"     * Initializes a new {@link TaskList} instance.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"    @BeforeEach","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"    void setup() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"     * Tests that a task is added correctly to the task list.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that the task list size increases and the task is added at the correct position.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"    void addTask_correctTask_taskAdded() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"        Task newTask \u003d new Task(\"task\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"        taskList.addTask(newTask);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(1, taskList.list.size());","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(newTask, taskList.list.get(0));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the deletion of a task from the task list using a correct index.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that the task is removed and the task list size decreases.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"    void deleteTask_correctIndex_taskDeleted() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"        Task newTask \u003d new Task(\"task\");","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"        taskList.addTask(newTask);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(newTask, taskList.deleteTask(1));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(0, taskList.list.size());","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the deletion of a task from the task list using an incorrect index.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that an {@link IndexOutOfBoundsException} is thrown when trying to delete a task with an invalid index.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"linedoestrolling"},"content":"    void deleteTask_wrongIndex_exceptionThrown() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"linedoestrolling"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e taskList.deleteTask(1));","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-09-05","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":59}},{"path":"src/test/java/elysia/ui/FileReaderWriterStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.ui;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.TaskList;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":" * A stub implementation of the {@link FileReaderWriter} class for testing purposes.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":" * This class overrides methods from {@link FileReaderWriter} to track method calls and provide predefined responses.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"public class FileReaderWriterStub extends FileReaderWriter{","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"    boolean createFileCalled \u003d false;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"    boolean writeFileCalled \u003d false;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"     * Constructs a {@link FileReaderWriterStub} with a dummy {@link TaskList}.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"     * The constructor is used to initialize the stub without actual file operations.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"     * @param taskList A {@link TaskList} instance (not used in this stub).","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"    public FileReaderWriterStub(TaskList taskList) {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"        super(null);// TaskList not used in this stub","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link FileReaderWriter#createFile()} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code createFileCalled} flag to {@code true} and returns a predefined message.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string indicating that the file was created.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"    public String createFile() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"        createFileCalled \u003d true;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"        return \"I created data.txt for you~\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link FileReaderWriter#writeFile()} method to track if it is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"     * Sets the {@code writeFileCalled} flag to {@code true} and returns a predefined message.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string indicating that the tasks are being saved.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"    public String writeFile() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"        writeFileCalled \u003d true;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"        return \"Saving all your tasks for you~\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"     * Overrides the {@link FileReaderWriter#readFile()} method to return a predefined message.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"     * This method does not track if it is called and simply returns a fixed response.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"     * @return A string indicating that past data has been loaded.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"linedoestrolling"},"content":"    @Override","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"linedoestrolling"},"content":"    public String readFile() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"linedoestrolling"},"content":"        return \"I loaded your past data! Aren\u0027t I amazing? Come on praise me!\";","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-09-05","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":57}},{"path":"src/test/java/elysia/ui/InputOutputHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"package elysia.ui;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Deadline;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Event;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.Todo;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.TaskListStub;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"import elysia.tasks.TaskList;","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"import static org.junit.jupiter.api.Assertions.assertInstanceOf;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"/**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":" * Tests for the {@link InputOutputHandler} class.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":" * This class contains unit tests to verify the behavior of the {@link InputOutputHandler} methods,","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":" * including parsing input commands and interacting with stubs of {@link TaskList} and {@link FileReaderWriter}.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":" */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"public class InputOutputHandlerTest {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"    InputOutputHandler inputOutputHandler;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"    TaskListStub taskListStub;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"    FileReaderWriterStub fileReaderWriterStub;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"linedoestrolling"},"content":"     * Sets up the test environment before each test case.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"linedoestrolling"},"content":"     * Initializes {@link TaskListStub} and {@link FileReaderWriterStub} instances","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"linedoestrolling"},"content":"     * and assigns them to the {@link InputOutputHandler} instance.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"linedoestrolling"},"content":"    @BeforeEach","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"linedoestrolling"},"content":"    void setUp() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"linedoestrolling"},"content":"        taskListStub \u003d new TaskListStub();","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"linedoestrolling"},"content":"        fileReaderWriterStub \u003d new FileReaderWriterStub(taskListStub);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"linedoestrolling"},"content":"        inputOutputHandler \u003d new InputOutputHandler() {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"linedoestrolling"},"content":"            {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"linedoestrolling"},"content":"                taskList \u003d taskListStub;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"linedoestrolling"},"content":"                fileReaderWriter \u003d fileReaderWriterStub;","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"linedoestrolling"},"content":"            }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"linedoestrolling"},"content":"        };","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when the \"bye\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that the file creation and saving methods are called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"linedoestrolling"},"content":"    void testParseInputBye() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(inputOutputHandler.parseInput(\"bye\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(fileReaderWriterStub.createFileCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(fileReaderWriterStub.writeFileCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when the \"list\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that the {@code toString} method of {@link TaskListStub} is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"linedoestrolling"},"content":"    void testParseInputList() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"list\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isToStringCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"linedoestrolling"},"content":"     * Tests marking a task with a correct task number.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that the task number is set correctly and the {@code printTask} method is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_markCorrectTask_success() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"mark 1\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(1, taskListStub.taskNumber);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isPrintTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"linedoestrolling"},"content":"     * Tests marking a task with a wrong task number.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that no task is printed and an exception is handled.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_markWrongTask_exceptionCaught() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"mark -1\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isPrintTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"linedoestrolling"},"content":"     * Tests unmarking a task with a correct task number.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that the task number is set correctly and the {@code printTask} method is called.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_unmarkCorrectTask_success() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput((\"unmark 1\")));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(1, taskListStub.taskNumber);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isPrintTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"linedoestrolling"},"content":"     * Tests unmarking a task with a wrong task number.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that no task is printed and an exception is handled.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_unmarkWrongTask_exceptionCaught() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"mark -1\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isPrintTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when an empty \"todo\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that no task is added and no size check is performed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_todoEmptyInput_nothingDone() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"todo\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isAddTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when a valid \"todo\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that a task is added, the size is checked, and the correct task type is used.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_todoCorrectFormat_correctTaskName() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"todo task\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isAddTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"linedoestrolling"},"content":"        assertInstanceOf(Todo.class, taskListStub.task);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(\"[T][ ] task\",taskListStub.task.toString());","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when an empty \"deadline\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that no task is added and no size check is performed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_deadlineEmptyInput_nothingDone() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"deadline\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isAddTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when a valid \"deadline\" command with correct date format is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that a task is added, the size is checked, and the correct task type is used with the formatted date.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_deadlineCorrectFormat_correctTaskNameAndDate() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"deadline task /by 2024-03-13\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isAddTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"linedoestrolling"},"content":"        assertInstanceOf(Deadline.class, taskListStub.task);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(\"[D][ ] task  (by: Mar 13 2024)\",taskListStub.task.toString());","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when a valid \"deadline\" command with incorrect date format is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that a task is added, the size is checked, and the task is created with the original date string.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_deadlineWrongDateFormat_correctTaskNameAndDatE() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"deadline task /by now\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isAddTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"linedoestrolling"},"content":"        assertInstanceOf(Deadline.class, taskListStub.task);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(\"[D][ ] task  (by: now)\",taskListStub.task.toString());","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when an empty \"event\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that no task is added and no size check is performed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_eventEmptyInput_nothingDone() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"event\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isAddTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when a valid \"event\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that a task is added, the size is checked, and the correct task type is used with the specified time range.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_eventCorrectFormat_correctTaskNameAndTime() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"event task /from 1 /to 2\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isAddTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"linedoestrolling"},"content":"        assertInstanceOf(Event.class, taskListStub.task);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"linedoestrolling"},"content":"        assertEquals(\"[E][ ] task  (from: 1  to: 2)\",taskListStub.task.toString());","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when an empty \"delete\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that no task is deleted and no size check is performed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_deleteNothing_nothingDone() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"delete\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isDeleteTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when a valid \"delete\" command is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that a task is deleted and the size is checked.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_deleteTask_success() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"delete 1\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isDeleteTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"linedoestrolling"},"content":"","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"linedoestrolling"},"content":"    /**","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"linedoestrolling"},"content":"     * Tests the behavior when a \"delete\" command with a wrong index is parsed.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"linedoestrolling"},"content":"     * Verifies that a task is deleted and an exception is handled.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"linedoestrolling"},"content":"     *","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"linedoestrolling"},"content":"     * @throws ElysiaException if an exception occurs during parsing.","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"linedoestrolling"},"content":"     */","lastModifiedDate":"2024-09-07","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"linedoestrolling"},"content":"    @Test","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"linedoestrolling"},"content":"    void parseInput_deleteWrongTask_exceptionCaught() throws ElysiaException {","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(inputOutputHandler.parseInput(\"delete -1\"));","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"linedoestrolling"},"content":"        assertTrue(taskListStub.isDeleteTaskCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"linedoestrolling"},"content":"        assertFalse(taskListStub.isSizeCalled);","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"linedoestrolling"},"content":"    }","lastModifiedDate":"2024-09-05","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"linedoestrolling"},"content":"}","lastModifiedDate":"2024-09-05","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":255}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"linedoestrolling"},"content":"list","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"linedoestrolling"},"content":"delete 3","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"linedoestrolling"},"content":"delete 2","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"linedoestrolling"},"content":"delete 1","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"linedoestrolling"},"content":"list","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"linedoestrolling"},"content":"todo borrow book","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"linedoestrolling"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"linedoestrolling"},"content":"event proj meet /from 2 /to 4","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"linedoestrolling"},"content":"list","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"mark 2","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"linedoestrolling"},"content":"mark 1","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"linedoestrolling"},"content":"list","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"linedoestrolling"},"content":"unmark 2","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"linedoestrolling"},"content":"list","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"linedoestrolling"},"content":"todo","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"linedoestrolling"},"content":"deadline","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"linedoestrolling"},"content":"event","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"mark","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"linedoestrolling"},"content":"mark 4","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"linedoestrolling"},"content":"delete","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"linedoestrolling"},"content":"delete 1","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"linedoestrolling"},"content":"list","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"linedoestrolling"},"content":"deadline complete homework /by 2024-10-23","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"linedoestrolling"},"content":"list","lastModifiedDate":"2024-09-03","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"linedoestrolling"},"content":"bye","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"linedoestrolling"},"content":"javac  -cp ..\\src\\main\\java\\Elysia.java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"linedoestrolling"},"content":"java -classpath ..\\bin Elysia \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"linedoestrolling":2,"-":19}}]
