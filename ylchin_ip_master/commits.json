{"authorDailyContributionsMap":{"ylchin":[{"date":"2024-08-19","commitResults":[{"hash":"aae9b2ae154ec51b3a6747cc1b4ccdb44e7e2d97","isMergeCommit":false,"messageTitle":"Renamed main class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"e4e1a959cc5eed0a322c19ee5570c4e5e45c7b3a","isMergeCommit":false,"messageTitle":"Added greeting","messageBody":"","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":6}}},{"hash":"d9f9c0c45afc0b73046be18fe43cda77bd1076d9","isMergeCommit":false,"messageTitle":"Added support for echo","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":2}}},{"hash":"51044defc16ac65880fbc08fdf8d5cbb08bb2b28","isMergeCommit":false,"messageTitle":"Added ability to add and list","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":1}}}]},{"date":"2024-08-20","commitResults":[{"hash":"06e237091fba65948df771739a2e07d2f6306c60","isMergeCommit":false,"messageTitle":"Added new Task class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":0}}},{"hash":"81e1cfc5bceb26b876e74e211b2af3a984a8646b","isMergeCommit":false,"messageTitle":"fixed bugs in Task class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":3}}},{"hash":"0bb7f17e583d976088afaadd75fd03507a908eda","isMergeCommit":false,"messageTitle":"Add the ability to mark tasks as done and change it back to undone","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":6}}},{"hash":"d010109a27233cd1f80dfdd2dbe2bea106ef43a2","isMergeCommit":false,"messageTitle":"Updated Task class, added DeadlineTask, EventTask, ToDoTask classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":40,"deletions":1}}},{"hash":"5583fe89cf42aa4d5c0f29eec9f53c6440431889","isMergeCommit":false,"messageTitle":"Add support for tracking three types of tasks: ToDos, Deadlines and Events","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":3}}}]},{"date":"2024-08-21","commitResults":[{"hash":"f04afaaaa0942e93ae704f4215cc82b641aa53cd","isMergeCommit":false,"messageTitle":"Automated text UI testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":7,"deletions":0},"java":{"insertions":2,"deletions":0},"bat":{"insertions":1,"deletions":1},"sh":{"insertions":1,"deletions":1}}},{"hash":"ab7e9acf8128ca835d930c5665466264a5406314","isMergeCommit":false,"messageTitle":"Created classes for exceptions regarding the creation of the different task types","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":2}}},{"hash":"a877ce8447fbb6d42ec9091bc41706acc9b3043a","isMergeCommit":false,"messageTitle":"Added error handling","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":82,"deletions":55}}},{"hash":"051368d63893c97f6761864f7a8fbf8735988991","isMergeCommit":false,"messageTitle":"Added support for catching when index is out of range","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":25}}},{"hash":"b98a96db01c9da1f9903ae3202c89ae704b15c77","isMergeCommit":false,"messageTitle":"Added support for deleting tasks from the list.","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":0}}}]},{"date":"2024-09-02","commitResults":[{"hash":"662ef8216ba55ca763eb379e02bc1a3cc988a6d9","isMergeCommit":false,"messageTitle":"Add method to format tasks to write to file","messageBody":"The different task classes did not support returning a String suitable for writing to a file to support data storage.\n\nFixing this will allow us to write to a file to support storage.\n\nWe add the required constructors that enable setting of boolean isDone and method toFileFormat()\n","fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":1}}},{"hash":"71626d7464599fbb0fb5e012bb059a7dcc736d20","isMergeCommit":false,"messageTitle":"Support reading from and writing to file","messageBody":"Elara did not support reading to and writing from file, so user has to\nretype todo list every time Elara is run\n\nRestructuring Elara by adding methods to read files, parse files for\ntasks and save tasks to file allows us to store the data in a specified\nfile.\n\nLet\u0027s reorganise code for Elara by breaking up into smaller blocks\nand add methods readFile(), setupFile(), parseTask() and\nsaveTasksToFile().\n","tags":["Level-7"],"fileTypesAndContributionMap":{"java":{"insertions":170,"deletions":59}}},{"hash":"90f51482e941de8f8b8c662da75fc735ad6326fe","isMergeCommit":false,"messageTitle":"Update DeadlineTaskException and EventException error message","messageBody":"Previous error message did not specify format for deadline and start and end\ntime for deadline and event tasks.\n\nUpdating the error messages allows users to know the proper format to send into\nElara such that they can efficiently use the task list.\n\nLet\u0027s update the error message to include the format to parse for LocalDateTime\n","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":2}}},{"hash":"4aff9bef36b23aab2131379cc1299fd4ef79e4b6","isMergeCommit":false,"messageTitle":"Change format for deadlines and event start and end to LocalDateTime","messageBody":"The previous type for storing deadlines and event timings was String, which\ndoes not allow for more meaningful storage.\n\nChanging the type to LocalDateTime allows the chatbot to understand that\nit is a date and time instead of just a String.\n\nLet\u0027s edit the DeadlineTask and EventTask variables to reflect this, as well\nas change the format of parseTask() to support reading such data from files.\n","tags":["Level-8"],"fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":17}}}]},{"date":"2024-09-04","commitResults":[{"hash":"c7375d519dd3fadd7c54a73ddc7cf2670475c9b2","isMergeCommit":false,"messageTitle":"Refactor code to extract out closely related code as classes","messageBody":"Main class Elara is very long and messy due to a lot of similar code.\n\nSplitting the code into different classes allows for modularisation and easier debugging.\n\nLet\u0027s implement the classes and Command interface.\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":354,"deletions":207}}},{"hash":"52f533c14c190878494dcd46cab5330db7cab700","isMergeCommit":false,"messageTitle":"Divide classes into packages","messageBody":"Classes are currently located in the root package without clear\norganization.\n\nThis unstructured organization makes the codebase harder to navigate\nand maintain. It violates OOP principles of encapsulation and\nmodularity, making it difficult to locate related classes and\nunderstand the overall architecture.\n\nDivide classes into specific packages based on their functionality:\n- Move command-related classes (`Command`, `AddCommand`, `ListCommand`,\n  etc.) into a `command` package.\n- Place task-related classes (`Task`, `ToDoTask`, `DeadlineTask`,\n  `EventTask`) and exception classes (`InvalidInputException`,\n  `ToDoException`, `DeadlineException`, `EventException`) into a `task`\n  package.\n- Organize file handling classes (`Storage`) into a `storage` package.\n- Group user interaction classes (`Ui`) into a `ui` package.\n- Consolidate parsing logic (`Parser`) into a `parser` package.\n\nThis organization follows OOP principles, promoting encapsulation and\nmodularity. It makes the codebase more readable, maintainable, and\nscalable by logically grouping related functionalities. Future\ndevelopment and troubleshooting will be easier, as classes will be\nclearly categorized and located.\n\nNo functional changes are introduced; this refactor strictly improves\nthe project structure.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":1}}},{"hash":"5b58010b8ac3efaee38ba7281f107380db96cb59","isMergeCommit":true,"messageTitle":"Merge commit \u002781a9c537afe8492675eb253968939364d65db091\u0027","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"4ed9ecb90add2465779d65f31045ff56d19871ec","isMergeCommit":false,"messageTitle":"Automate project builds using Gradle","messageBody":"Project builds are currently managed manually without a standardized\nbuild automation tool.\n\nThis manual process is error-prone and inefficient, making it harder\nto manage dependencies, compile code, run tests, and package\ndistributions consistently. It slows down development and increases\nthe likelihood of build-related errors.\n\nAutomate project builds using Gradle:\n- Add a `build.gradle` file to define project dependencies and build\n  configurations.\n- Include Gradle wrapper files to standardize the Gradle version used\n  across different development environments.\n- Configure tasks for compiling code, running tests, and packaging the\n  application into distributable formats.\n\nUsing Gradle provides a standardized build process, improving\nconsistency and reliability. It simplifies dependency management,\nreduces setup time for new developers, and facilitates integration\nwith CI/CD pipelines.\n\nThis change ensures that all developers and CI systems use the same\nbuild process, enhancing collaboration and project stability.\n","fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1},"java":{"insertions":88,"deletions":6}}},{"hash":"8b8c23558a90762c9d388372b80ed822233c3f52","isMergeCommit":false,"messageTitle":"Revert \"Automate project builds using Gradle\"","messageBody":"This reverts commit 4ed9ecb90add2465779d65f31045ff56d19871ec.\n","fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1},"java":{"insertions":6,"deletions":88}}},{"hash":"55b7f723c5dd4de5427e753d44ac62cc2f471beb","isMergeCommit":false,"messageTitle":"Update build.gradle file","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":2,"deletions":2}}},{"hash":"b1d3dc80736616ea84c0f2dc270e0ddc26fe5c83","isMergeCommit":false,"messageTitle":"Fixed missing import and package statements","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":2,"deletions":2},"java":{"insertions":85,"deletions":4}}},{"hash":"1c095827b94d0ab28914d3035ddd6e5718180942","isMergeCommit":true,"messageTitle":"Merge commit \u002755b7f723c5dd4de5427e753d44ac62cc2f471beb\u0027","messageBody":"","tags":["A-Gradle"],"fileTypesAndContributionMap":{}},{"hash":"59861419c4e715cec3b5c4da9c178e9139cf2956","isMergeCommit":false,"messageTitle":"Fix bug to catch if no argument","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":87,"deletions":88}}}]},{"date":"2024-09-05","commitResults":[{"hash":"579af145cfcb3cab200e9a0ce0c10f5e5cb4e2ba","isMergeCommit":false,"messageTitle":"Fixed bug in AddCommand class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":69,"deletions":24}}},{"hash":"fe90980121fc5e222c2efad7d2531f41b12048f9","isMergeCommit":false,"messageTitle":"Add JUnit tests","messageBody":"","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":2}}},{"hash":"44d4207fdb674d6206479835ad6b4e11080d9095","isMergeCommit":false,"messageTitle":"Package the App as a JAR file","messageBody":"","tags":["A-Jar"],"fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":0}}}]},{"date":"2024-09-06","commitResults":[{"hash":"91dde8c5cc91c5de472342c663ac15c049b69445","isMergeCommit":false,"messageTitle":"Fixed bug DeleteCommand MarkCommand and UnmarkCommand classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":58,"deletions":21}}},{"hash":"0e4c1811c1354a1cfe8811afcc7c97bfdb67532a","isMergeCommit":false,"messageTitle":"Add JavaDoc comments","messageBody":"The current codebase lacks proper JavaDoc comments, which\nmakes it difficult for developers to understand the purpose\nand behavior of classes and methods.\n\nThis needs to change because clear documentation improves\ncode readability and maintainability, and helps onboard\nnew contributors more easily.\n\nThese comments describe the purpose of classes, methods,\nand parameters in detail, aligning with standard JavaDoc\nconventions.\n\nThis approach was chosen to enhance code comprehension\nand ensure future maintainability. It provides clear\nguidelines for developers using or modifying the code.\n\nNo functional changes have been made to the application;\nthis commit focuses purely on documentation.\n","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{"java":{"insertions":357,"deletions":7}}},{"hash":"e1ecfc9ce56034cedf6d871ba6e9fa36d0c16e65","isMergeCommit":false,"messageTitle":"Fixed bug in MarkCommand DeleteCommand UnmarkCommand classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":38,"deletions":27}}},{"hash":"82f0171591ac2d2d2897546a74243de0785996e5","isMergeCommit":false,"messageTitle":"Fixed bug in MarkCommand DeleteCommand UnmarkCommand classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":19}}},{"hash":"b96a7fb572088d3327c117666633c47a61cdada6","isMergeCommit":false,"messageTitle":"Edit the code to comply with Java coding standards","messageBody":"The current code does not fully comply with Java coding standards,\nparticularly in variable naming conventions such as the usage of\ncamelCase for private final variables.\n\nThis needs to change to improve code consistency, readability, and\nensure it follows widely accepted Java conventions, making it easier\nfor developers to understand and maintain.\n\nRefactored variable names like `FILE_PATH` to use camelCase as per\nJava standards. Private final variables now adhere to the camelCase\nconvention.\n\nThis approach ensures the codebase is easier to read and maintain,\nand that it conforms to industry-standard Java naming practices.\n\nNo functional changes were made; this commit is purely a style\nrefactor for standardization.\n","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":22}}},{"hash":"a7eb76b2f439b33cfee0800b975cadebe02b9a96","isMergeCommit":false,"messageTitle":"Add find command for searching tasks by keyword","messageBody":"Currently, there is no way for users to search for tasks\nbased on a keyword in the task description. This makes it\ndifficult to find specific tasks quickly, especially when\nthere are many tasks.\n\nThis needs to change to improve the user experience by\nallowing users to filter tasks based on a keyword, making\ntask management more efficient.\n\nA new FindCommand class has been implemented to handle the\n\u0027find\u0027 command. The Parser has been updated to recognize the\n\u0027find\u0027 command and parse the search keyword. A findTasks\nmethod has been added to the TaskList class to return tasks\nmatching the keyword. The Ui class now includes a method\nto display the matching tasks to the user.\n\nThis approach was chosen to align with the existing command\npattern, keeping the code modular and easily extensible.\n","tags":["Level-9"],"fileTypesAndContributionMap":{"java":{"insertions":62,"deletions":8}}},{"hash":"6db1915b652b51455b85d8b18678ce05342cec11","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-CodingStandard\u0027","messageBody":"# Conflicts:\n#\tsrc/main/java/elara/command/AddCommand.java\n#\tsrc/main/java/elara/command/DeleteCommand.java\n#\tsrc/main/java/elara/command/MarkCommand.java\n#\tsrc/main/java/elara/storage/Storage.java\n#\tsrc/main/java/elara/ui/Ui.java\n","fileTypesAndContributionMap":{}},{"hash":"855b9c14d3a7679e793126b104dd4d4ad17f912b","isMergeCommit":false,"messageTitle":"Resolve merge conflict in AddCommand, DeleteCommand, MarkCommand, UnmarkCommand, Storage and Ui classes","messageBody":"A merge conflict occurred during the integration of changes\nfrom different branches. This resulted in conflicting modifications\nin [file names], which prevented the merge from completing.\n\nThis needs to change because the merge conflict must be resolved\nto integrate the changes from both branches and maintain consistency\nin the codebase.\n\nThe conflicting sections in the files were manually reviewed and\nmerged. The resolved code incorporates the necessary changes from\nboth branches, ensuring no loss of functionality.\n\nThis approach ensures the smooth integration of changes and restores\nthe ability to continue development on a clean codebase.\n\nNo additional changes were made beyond resolving the conflict.\n","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":39}}},{"hash":"533085cb1c44cd720026a45cc4220ac45d0d10f4","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-9\u0027","messageBody":"# Conflicts:\n#\tsrc/main/java/elara/command/AddCommand.java\n#\tsrc/main/java/elara/command/MarkCommand.java\n#\tsrc/main/java/elara/command/UnmarkCommand.java\n#\tsrc/main/java/elara/parser/Parser.java\n#\tsrc/main/java/elara/ui/Ui.java\n","fileTypesAndContributionMap":{}},{"hash":"89fa36d2ece0ed901ce1884a5077f04f8db6a0cf","isMergeCommit":false,"messageTitle":"Edit import order and line breaks to comply with Java coding standards following merge","messageBody":"The recent merge introduced inconsistent import ordering\nand line breaks that do not adhere to Java coding standards.\n\nThis needs to change to maintain consistent code formatting\nand readability throughout the project, ensuring compliance\nwith Java best practices.\n\nReordered import statements in AddCommand, DeleteCommand,\nMarkCommand, UnmarkCommand, and Ui classes to follow\nconvention. Additionally, adjusted line breaks to improve\ncode readability and ensure consistency across files.\n\nThis approach ensures uniformity in code structure and\nenhances readability without altering functionality.\n","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":8}}},{"hash":"0660c2a71bcd9e0019beedb7c1f0d15a44251883","isMergeCommit":false,"messageTitle":"Add Javadocs that were lost following merge in TaskList.java","messageBody":"During the recent merge, Javadoc comments in\nTaskList.java were unintentionally lost. This\nresulted in incomplete documentation of the\nclass and its methods.\n\nThis needs to be fixed to ensure proper\ndocumentation is restored, aiding developers\nin understanding the purpose and functionality\nof the TaskList class and its methods.\n\nRe-added Javadocs for all constructors and\nmethods in TaskList.java, providing clear\nexplanations of their usage and parameters.\n\nThis approach ensures the code remains well\ndocumented and consistent, helping future\nmaintenance and improving readability for\nother developers.\n","fileTypesAndContributionMap":{"java":{"insertions":54,"deletions":1}}},{"hash":"65ec437064ca9d95d229ad0fca80a27d7f2f659b","isMergeCommit":false,"messageTitle":"Configure Checkstyle for code quality checks","messageBody":"Currently, there is no automated way to enforce coding standards in the project.\n\nTo ensure consistency and detect coding style violations, Checkstyle is introduced.\nThe configuration files (checkstyle.xml and suppressions.xml) are added under config/checkstyle,\nand necessary changes are made to the build.gradle file to integrate Checkstyle into the build process.\n\nThis will allow the project to maintain a high standard of code quality and detect issues early during development.\n","fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0}}},{"hash":"132386426a595399d46c2db75075989b8afd9f43","isMergeCommit":false,"messageTitle":"Refactor code to comply with Checkstyle standards","messageBody":"Currently, the code does not fully adhere to the coding standards enforced by Checkstyle,\nwhich has led to violations during code quality checks.\n\nThis commit refactors the code to ensure it complies with the Checkstyle configuration.\nChanges include adjustments to import order, line breaks, spacing, as well as the addition of necessary Javadoc comments.\n\nEnsuring compliance with Checkstyle helps maintain a consistent coding style across the project and improves readability and maintainability.\n","tags":["A-Checkstyle"],"fileTypesAndContributionMap":{"java":{"insertions":188,"deletions":105}}}]},{"date":"2024-09-07","commitResults":[{"hash":"a786969cd1968ebb0cf41e042eaeeec2ac9e0b17","isMergeCommit":false,"messageTitle":"Update build.gradle to support JavaFX integration","messageBody":"The current build.gradle configuration does not include support for JavaFX,\nwhich is required for the graphical user interface components of the project.\n\nThis commit updates the build.gradle file to include the necessary dependencies\nand configurations for JavaFX. It adds the JavaFX plugin and specifies the version\nand modules required for the project.\n\nThis ensures that the project can successfully compile and run JavaFX applications,\nenabling the development of rich desktop applications with a graphical interface.\n","fileTypesAndContributionMap":{"gradle":{"insertions":16,"deletions":1}}},{"hash":"0ec95e789c7260ff17ed2b4ec75f24b1b4b542c1","isMergeCommit":false,"messageTitle":"Add FXML files for JavaFX interface components","messageBody":"Currently, the project lacks the necessary FXML files to define the structure of the JavaFX interface.\n\nThis commit adds `DialogBox.fxml` and `MainWindow.fxml` to the resources/view directory,\nwhich define the layout for the dialog boxes and the main window interface in the JavaFX application.\n\nThis ensures that the project has the required layout files to support JavaFX-based user interface components.\n","fileTypesAndContributionMap":{"fxml":{"insertions":66,"deletions":0}}},{"hash":"813776002ac99f7a6c381852234ecf299cad8dae","isMergeCommit":false,"messageTitle":"Refactor package structure and update Ui methods","messageBody":"Files like `Parser.java` and `Storage.java` are scattered across\ndifferent packages, leading to inconsistencies in project structure.\n\nTo maintain a clean and organized codebase, files related to command\nexecution and components should be grouped in one package.\n\nThe files `Parser.java`, `Storage.java`, and `UnmarkCommand.java` have\nbeen moved to the `components` package. Additionally, the methods in\n`Ui.java` that previously printed messages directly have been refactored\nto return strings instead. This enhances flexibility and supports better\nunit testing by decoupling UI logic from direct console printing.\n\nThis approach improves maintainability and allows for better\nmodularization of the system.\n","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":4}}},{"hash":"7a32349e334600428c3b093c910f34bba0395105","isMergeCommit":false,"messageTitle":"Refactor package structure and update Ui methods","messageBody":"The current situation involves files spread across different packages,\nleading to challenges in maintaining consistency across imports and\nmethod calls.\n\nTo streamline and centralize the code, files from various packages were\nmoved to a unified utils package. This simplifies imports and enhances\nmaintainability by keeping related components together.\n\nAdditionally, methods in Ui.java were updated to return strings\ninstead of printing directly. This approach improves flexibility in\nhandling output, making it easier to test and reuse components.\nThe task.getDescription() method was also added to support these\nchanges.\n\nThese changes were made to ensure consistency in the code structure\nand improve the system’s modularity.\n","fileTypesAndContributionMap":{"java":{"insertions":197,"deletions":189}}}]},{"date":"2024-09-13","commitResults":[{"hash":"2e4dc346fa54be9363dd1aff15ab3f1d6d67c3e2","isMergeCommit":false,"messageTitle":"Update methods in Ui.java","messageBody":"The current situation is that the `Ui` class returns strings for\ndisplayed messages rather than printing them directly, which limits\nflexibility in how these messages are used or tested.\n\nThe code needs to be updated to improve flexibility by displaying\nmessages directly instead of returning them as strings. This change\nallows for more seamless interaction within the program and centralizes\nthe logic related to handling outputs.\n\nTo address this, I modified methods in the `Ui` class to print messages\ndirectly to the console rather than returning them as strings. I also\nintroduced a `lastResponse` field to keep track of the most recent\nmessage for testing or further use.\n\nThis approach enhances clarity and makes the user interface code more\nstreamlined while allowing access to the last printed message for\ntesting purposes or other internal uses.\n","fileTypesAndContributionMap":{"java":{"insertions":53,"deletions":50}}},{"hash":"6420d71d5bbe46f95f5a454e209d9970e81a144d","isMergeCommit":false,"messageTitle":"Add newline at the end of TaskList.java","messageBody":"The TaskList.java file was missing a newline at the end, which is a\nstandard coding convention for better readability and to avoid issues\nwith version control systems that may flag it as a change.\n\nA newline has been added at the end of TaskList.java to comply with\nJava coding standards and maintain consistency across files.\n\nThis change ensures that the file conforms to best practices.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"ae73f8dfdffee3301b38f66263b31d8eed357873","isMergeCommit":false,"messageTitle":"Add new JavaFX components for GUI support","messageBody":"The following files were added to support the graphical user interface\nfor Elara:\n\n- DialogBox.java: Defines the structure and behavior for chat dialog\n  boxes in the UI.\n- Launcher.java: Handles the application launch.\n- Main.java: Entry point for the JavaFX application.\n- MainWindow.java: Contains the layout and control logic for the\n  main window.\n\nThese additions provide the foundational components needed for the\nElara chatbot\u0027s graphical interface, enhancing user interaction\nand experience.\n","tags":["Level-10"],"fileTypesAndContributionMap":{"java":{"insertions":187,"deletions":4}}}]}]},"authorFileTypeContributionMap":{"ylchin":{"java":1311,"md":0,"fxml":66,"sh":1,"bat":1,"gradle":23,"txt":7}},"authorContributionVariance":{"ylchin":79573.68},"authorDisplayNameMap":{"ylchin":"CS2103T-F13-2 CHIN..LING"}}
