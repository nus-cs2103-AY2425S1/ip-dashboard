{"authorDailyContributionsMap":{"zzawook":[{"date":"2024-08-22","commitResults":[{"hash":"6cd9572825bf8c61f5b37181ca709ce802d6e4f7","isMergeCommit":false,"messageTitle":"Renamed the project to \"Dongji\", which means a friend in Korean, and changed all reference to Duke correspondingly","messageBody":"Added exit message, and separated greeting and exit message to separate function\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":10},"bat":{"insertions":1,"deletions":1},"sh":{"insertions":1,"deletions":1},"md":{"insertions":4,"deletions":4}}},{"hash":"14fe527c8413b2e83cba057a196142230bc95d28","isMergeCommit":false,"messageTitle":"Added echo feature to echo the user input","messageBody":"Created class declaration Dongji and moved all chatbot functionalities to object level declaration\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":41,"deletions":5}}},{"hash":"f175ebcbab5fb80eceabdeeb8b3ef84d69b7bcb0","isMergeCommit":false,"messageTitle":"Added \u0027add task\u0027 feature and \u0027list task\u0027 feature as new functions","messageBody":"Commented out unused \u0027echo\u0027 function\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":3}}},{"hash":"7fce568f43f75f8737af13f0f57aa316567ada6f","isMergeCommit":false,"messageTitle":"Encapsulated task as new Task class, and defined its behaviors","messageBody":"Organized the printing messages\n","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":79,"deletions":11}}},{"hash":"a0cc56e1f90e7aee8af50e0da2ac02cc7e10a39c","isMergeCommit":false,"messageTitle":"Added 3 types of new Tasks (Event, Todo, Deadline) as subclass of Task, and muted Tasks as abstract.","messageBody":"Implemented corresponding toString behaviors according to property of each type.\n","tags":["Level-4","A-Enums"],"fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":5}}},{"hash":"e50513479c6a5dc571f58b130adbf4ac8564548a","isMergeCommit":false,"messageTitle":"Implemented error-handling using Exceptions.","messageBody":"Created custom exceptions to handle exceptions encountered in Dongji project\n","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":132,"deletions":40}}},{"hash":"b49aa469d63064162ffe962caa56cf20b5e46493","isMergeCommit":false,"messageTitle":"Added \u0027delete\u0027 feature","messageBody":"Added new exception that handles deleting, marking, and unmarking invalid task index.\n","tags":["v0.1","Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":45,"deletions":5}}},{"hash":"dd56952147e39c6cf06b385c2a6926862153fe4f","isMergeCommit":false,"messageTitle":"Resolved compilation error in previous version","messageBody":"","tags":["v0.1.1"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":5}}},{"hash":"f3e038dba021b43a14c35449e54b406de0c7083c","isMergeCommit":false,"messageTitle":"Created static factory of each task type and moved all object generation logic to each respective task type\u0027s class.","messageBody":"","tags":["v0.1.2"],"fileTypesAndContributionMap":{"java":{"insertions":49,"deletions":41}}},{"hash":"df93d3d7b69e7b68b19c2fa6a3efaae4f644d640","isMergeCommit":false,"messageTitle":"Added semi-automated testing using shell script","messageBody":"Improved Deadline\u0027s exception message\n","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":18,"deletions":0},"java":{"insertions":10,"deletions":2},"sh":{"insertions":34,"deletions":0}}},{"hash":"f071404e6b337875c3caedc19795d48419c4c0b4","isMergeCommit":false,"messageTitle":"Refactored Dongji class by creating TaskList and encapsulating list related operations into TaskList class","messageBody":"Changed to use default runtest.sh provided from scaffold code given.\n","tags":["v0.1.3"],"fileTypesAndContributionMap":{"txt":{"insertions":18,"deletions":18},"java":{"insertions":176,"deletions":96},"bat":{"insertions":0,"deletions":21},"sh":{"insertions":2,"deletions":40}}}]},{"date":"2024-08-29","commitResults":[{"hash":"0495e1e8cf78c057fb0669a87c57f4e08ef6ee5a","isMergeCommit":false,"messageTitle":"Refactor the code to use higher level of OOP","messageBody":"Classes in the project, especially the Dongji class, are undertaking several roles and \"reasons to change\" thus going against Single Responsibility Principle.\n\nThe design has low scalability and will make feature addition and future changes difficult.\n\nIntroduce new component \u0027Parser\u0027 to undertake parsing of the string command and generate corresponding Command instance. Introduce the Command interface and its implementations to represent Command internally, thus take advantage of polymorphism. Introduce Ui component which undertakes displaying of informations.\n\nDividing the role of Dongji to only undertake the entrance point role will improve scalabilitty and maintainability by dividing the high level logic (Command, Task) and low level logic (Ui) in separate component. This will also make the code in Dongji class more simple and legible as well.\n\nLet\u0027s,\n* Separate display logic into Ui component\n* Separate parsing logic into Parser component\n* Separate command specific execution details into Command interface and its implementations\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":340,"deletions":176}}},{"hash":"d8c9ec36654b9294890156269f8cb633ab88c241","isMergeCommit":false,"messageTitle":"Add new feature: Saving of working tasks","messageBody":"When the application terminates, all the task data user is working on gets deleted because the application didn\u0027t have persistence layer.\n\nFor flawless user experience, the task should be able to persist even after the application terminates, so that when user comes back they can continue working on their tasks.\n\nAdd interface Persistence that defines how persistence layer should behave, and an implentation Txt that defines logics to save onto .txt file format.\n\nProgramming on interface Persistence will enable future addition of saving on other file formats, which grant additional scalability and flexibility. Adding Txt implementation will grant basic savings functionality based on Persistence interface without losing significant feature at the moment.\n\nLet\u0027s add Saving feature by adding Persistence interface and its implementation Txt.\n","tags":["Level-7"],"fileTypesAndContributionMap":{"java":{"insertions":198,"deletions":14}}},{"hash":"eb5be026a325bc0a8551913c63f019ab2623b783","isMergeCommit":false,"messageTitle":"Use LocalDateTime instead of String for deadlines and events","messageBody":"The deadline and event classes are using Strings instead of formal date/time types.\n\nThis could be misleading because anything can go into date/time field, which does not make sense in common use cases.\n\nReplace all occurrences of String dates into DateTimeData, which is a wrapper around LocalDateTime with options to whether it would contain time as well.\n\nUsing formal DateTime instead of String for dates would prevent users inputting invalid values in date field. Additionally, using a wrapper DateTimeData would allow users flexibility to choose whether to use time together with date or not.\n\nLet\u0027s replace String date formats to DateTimeData to grant date format safety and users\u0027 flexibility.\n","tags":["Level-8"],"fileTypesAndContributionMap":{"java":{"insertions":239,"deletions":183}}},{"hash":"f066ff80934bfef4681a203830aba82952c0389a","isMergeCommit":false,"messageTitle":"EventCommand: prevent event\u0027s end date being earlier than start date","messageBody":"The EventCommand allows the user to input end date earlier than start date, which does not make sense and goes against normal use case.\n\nAdd check to prevent event\u0027s end date being earlier than start date\n\nBy adding a check, we can prevent user adding an event with wrong timeframe by mistake (e.g. typo).\n\nLet\u0027s check the validity of start and end date of event by adding a check.\n","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":6}}},{"hash":"ea6e465a4730cc9c3e9583a2cd84a95ede805736","isMergeCommit":false,"messageTitle":"Package the application into Dongji package","messageBody":"The application was in default directory, and not packaged.\n\nCreate new package Dongji and move the entire project into it.\n\nLet\u0027s move the application into valid package.\n","tags":["A-Packages","A-Package"],"fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":87}}},{"hash":"fed52fd2f9ff2c1c2eb5353a16e91989b750359e","isMergeCommit":false,"messageTitle":"Merged gradle support branch","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":41,"deletions":0}}}]},{"date":"2024-08-30","commitResults":[{"hash":"61bf30f83e7433ba174570fef5e4331b135bca09","isMergeCommit":false,"messageTitle":"Add test for ListCommand class and Event class","messageBody":"","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":80,"deletions":1}}},{"hash":"6e177871112622642907fd78efa97c5b3703e4aa","isMergeCommit":false,"messageTitle":"Modify build.gradle vscode\u0027s settings.json to build the JAR using gradle","messageBody":"","tags":["A-Gradle"],"fileTypesAndContributionMap":{"gradle":{"insertions":2,"deletions":2}}},{"hash":"882c18001010b6b2d3313d462d2b6a60971c6bd5","isMergeCommit":false,"messageTitle":"Add Javadoc comments to public methods","messageBody":"","tags":["A-Javadoc"],"fileTypesAndContributionMap":{"java":{"insertions":203,"deletions":8}}},{"hash":"2a3be8d1f149a15ef5952eedb6083b6129824923","isMergeCommit":false,"messageTitle":"Add Feature: Find task by keyword","messageBody":"Dongji does not support find task by keyword.\n\nWhen task list gets exhaustive and the user cannot see all tasks at once, find by keyword is necessary, but Dongji doesn\u0027t know how to do it.\n\nAdd Find task by keyword, by creating FindCommand and implementing finding logics within. Add \u0027find\u0027 command parsing to CommandParser so that it can understand find command.\n\nA new component FindCommand is necessary to represent new type of Command. Then, update Parser so that it can  identify \"find\" from the user input.\n\nLet\u0027s add FindCommand and modify CommandParser to enable \u0027find by keyword\u0027 feature\n","tags":["v0.2.0","Level-9","A-Jar","A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":1}}}]},{"date":"2024-09-05","commitResults":[{"hash":"23cdc8d6c34831597a10885758473eafbad54ed0","isMergeCommit":false,"messageTitle":"Add checkstyle to check Java code against 2103T coding standards","messageBody":"There is no explicit tool to check coding style and keep it under control.\n\nThis could lead to mistaken coding style that does not obey the coding standards set by the teaching team.\n\nAdding checkstyle plugin to the project to take advantage of static analysis.\n\nLet\u0027s add checkstyle to the project, to prevent the code becoming a spaghetti, with the help of static analysis.\n","tags":["A-CheckStyle"],"fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0},"txt":{"insertions":3,"deletions":0}}},{"hash":"a55a3df7fbb98632ed604609c8887f1e1fe2aa8a","isMergeCommit":false,"messageTitle":"Add GUI on the application using JavaFX","messageBody":"The application support text-based interaction with the user.\n\nThis could be difficult for normal users without much affinity to keyboard to use the application, thus decreasing generality of application.\n\nAdding GUI to the application using JavaFX.\n\nThe implementation of GUI is not perfect yet, as the implementation only echoes the user input.\n\nLet\u0027s add basic GUI setup to the project to lay foundation for further development of GUI on the project.\n","fileTypesAndContributionMap":{"gradle":{"insertions":15,"deletions":1},"fxml":{"insertions":65,"deletions":0},"java":{"insertions":182,"deletions":8}}},{"hash":"00f5eaf412cde6710917e5524820d46d836c4baf","isMergeCommit":false,"messageTitle":"Connect Dongji backend with JavaFx frontend","messageBody":"The application only can echo the command entered by the user.\n\nThis does not match the specification for application, which is an interactive todo list.\n\nConnecting Dongji backend with JavaFx Frontend by extracting previously frontend specific behaviors from Dongji class into CommandLine class, and isolating it as fully backend component, not having to know about frontend logics. Creating new Main class to act as launcher to launch either CommandLine application, or GUI application.\n\nThe GUI is now responding with same text as CommandLine interface. This lowers the barrier of using the application.\n\nThe modified design improves design of the application because the high-level component (Dongji) doesn\u0027t know anything about low-level component, thus cleaning up the wrong dependency directions. This will allow greater flexibility in the application.\n\nLet\u0027s complete GUI implementation by connecting Dongji backend and JavaFx frontend, and cleaning up dependency directions.\n","tags":["Level-10"],"fileTypesAndContributionMap":{"java":{"insertions":86,"deletions":88}}}]},{"date":"2024-09-06","commitResults":[{"hash":"63be051931eef60d81430801d071b3d686c6b10a","isMergeCommit":false,"messageTitle":"Revise the Code to obey Coding Standard as suggested by peer reviews","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":42,"deletions":6}}},{"hash":"6aa82c059ccd9b938ef52957b305789de071bca1","isMergeCommit":false,"messageTitle":"Revise the code to obey Coding Standard as suggested by peer review","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":3}}}]},{"date":"2024-09-12","commitResults":[{"hash":"9ee960bfababccc561e66dac31cc9071c67d2d7b","isMergeCommit":false,"messageTitle":"Use assert feature to document assumptions in the code","messageBody":"The application uses Exceptions to check on expected errors by the user or developer.\n\nHowever, there may be unexpected errors, especially due to misled or  missed out assumptions in the code, which might introduce unexpected bugs to the program, thus leading the program to collapse.\n\nAdding assertions to document important assumptions that should hold at various points in the code.\n\nThe assertion was used to\n1. Valide input parameters for private methods\n2. Points in the program to ensure validity of a fact which is almost certainly true\n3. Validating post condition of the method, before returning the result\n\nAssertions will help the developer detect the bug in development phase, thus preventing the bug to slip-through and cause issue later on in the dev process. It helps finding out problems at earlier stage of development as possible, thus decreasing cost.\n\nLet\u0027s add assertions to document assumptions that must hold true within the program.\n","tags":["A-FullCommitMessage","A-Assertions"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":1}}},{"hash":"5f27e890050af40d696127f91a16739103ad1216","isMergeCommit":false,"messageTitle":"Refactor code to comply with coding standard using CheckStyle","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":229,"deletions":249}}},{"hash":"556d45bf90cb3b8b64e867721030e98aafadc32b","isMergeCommit":false,"messageTitle":"Improve code quality abiding to coding standard proposed by 2103 team","messageBody":"The code have some minor coding style nitpicks that weren\u0027t resolved, such as opening brackets not following a white space, catch not followed by white space, etc.\n\nSuch deviations from coding standard can lead to challenges in collaboration on projects in any given time in the future.\n\nImproving codes that deviate from coding standards to follow coding standard proposed by the 2103 team.\n\nImproved code quality will decrease technical debt and enable greater efficiency in case of collaborative development in the future.\n\nLet\u0027s improve code quality by changing deviations from code standard.\n","fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1},"java":{"insertions":16,"deletions":10}}},{"hash":"e5c89d283c5cce7c7ff07cb01e93642519d7f497","isMergeCommit":true,"messageTitle":"Merge pull request #1 from zzawook/branch-A-CodeQuality","messageBody":"Branch a code quality","fileTypesAndContributionMap":{}},{"hash":"5ccdab77a360121e2ebbe9f9ab29564e17361385","isMergeCommit":false,"messageTitle":"Use streams instread of simple loops","messageBody":"While loops are effective way to iterate over a collection, streams are also another viable option to iterate over a collection.\n\nUsing streams instead of simple loops in find command and list command.\n\nThough the changes does not bring performance optimization, practicing using Streams in this project can help me familiarize with it, in the case I might need them in the future.\n\nLet\u0027s use streams instead of loops to iterate over collection.\n","tags":["A-Streams"],"fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0},"java":{"insertions":16,"deletions":17}}},{"hash":"bd9534d247443486cf3f7765bb6dd5cd55e931f8","isMergeCommit":false,"messageTitle":"Remove unnecessary dependency in FindCommand","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":1}}},{"hash":"1d99880ec2f77e12aaee6d1f1ba031b3e8d77af0","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 into branch-A-Streams","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"607b197b95911e90a88e46c59639b9324b11b7a0","isMergeCommit":true,"messageTitle":"Merge pull request #2 from zzawook/branch-A-Streams","messageBody":"Branch a streams","tags":["branch-A-CI"],"fileTypesAndContributionMap":{}},{"hash":"588ed64c9d7cc1221f6b708ed96b250b3333aebd","isMergeCommit":false,"messageTitle":"debug class not found error due to changed package name","messageBody":"","fileTypesAndContributionMap":{"fxml":{"insertions":1,"deletions":1}}}]}]},"authorFileTypeContributionMap":{"zzawook":{"java":1422,"md":4,"fxml":65,"sh":2,"bat":0,"gradle":60,"txt":22}},"authorContributionVariance":{"zzawook":113348.0},"authorDisplayNameMap":{"zzawook":"CS2103T-T08-2 KIM ..YEOK"}}
