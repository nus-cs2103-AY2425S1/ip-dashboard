[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"content":"import java.time.format.DateTimeFormatter;","isFullCredit":false},{"lineNumber":3,"content":"public class Deadline extends Task {","isFullCredit":false},{"lineNumber":4,"content":"    private LocalDate deadline;","isFullCredit":false},{"lineNumber":5,"content":"    public Deadline(String taskName, LocalDate taskDeadline)","isFullCredit":false},{"lineNumber":6,"content":"    {","isFullCredit":false},{"lineNumber":7,"content":"        super(taskName);","isFullCredit":false},{"lineNumber":8,"content":"        deadline \u003d taskDeadline;","isFullCredit":false},{"lineNumber":9,"content":"    }","isFullCredit":false},{"lineNumber":10,"content":"","isFullCredit":false},{"lineNumber":11,"content":"    @Override","isFullCredit":false},{"lineNumber":12,"content":"    public String toString()","isFullCredit":false},{"lineNumber":13,"content":"    {","isFullCredit":false},{"lineNumber":14,"content":"        String deadlineToString \u003d deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","isFullCredit":false},{"lineNumber":15,"content":"        return \"[D]\" + super.doneTitle() + super.getName() + \" (by: \" + deadlineToString + \")\";","isFullCredit":false},{"lineNumber":16,"content":"    }","isFullCredit":false},{"lineNumber":17,"content":"","isFullCredit":false},{"lineNumber":18,"content":"    public String toFile() {","isFullCredit":false},{"lineNumber":19,"content":"        if (super.getDone()) {","isFullCredit":false},{"lineNumber":20,"content":"            return \"D D \" + super.getName() + \" /by \" + deadline;","isFullCredit":false},{"lineNumber":21,"content":"        } else {","isFullCredit":false},{"lineNumber":22,"content":"            return \"D N \" + super.getName() + \" /by \" + deadline;","isFullCredit":false},{"lineNumber":23,"content":"        }","isFullCredit":false},{"lineNumber":24,"content":"    }","isFullCredit":false},{"lineNumber":25,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":24}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"content":"import java.time.format.DateTimeFormatter;","isFullCredit":false},{"lineNumber":3,"content":"public class Event extends Task {","isFullCredit":false},{"lineNumber":4,"content":"    private LocalDate fromDate;","isFullCredit":false},{"lineNumber":5,"content":"    private LocalDate toDate;","isFullCredit":false},{"lineNumber":6,"content":"    public Event(String taskName, LocalDate taskFromDate, LocalDate taskToDate)","isFullCredit":false},{"lineNumber":7,"content":"    {","isFullCredit":false},{"lineNumber":8,"content":"        super(taskName);","isFullCredit":false},{"lineNumber":9,"content":"        fromDate \u003d taskFromDate;","isFullCredit":false},{"lineNumber":10,"content":"        toDate \u003d taskToDate;","isFullCredit":false},{"lineNumber":11,"content":"    }","isFullCredit":false},{"lineNumber":12,"content":"","isFullCredit":false},{"lineNumber":13,"content":"    @Override","isFullCredit":false},{"lineNumber":14,"content":"    public String toString()","isFullCredit":false},{"lineNumber":15,"content":"    {","isFullCredit":false},{"lineNumber":16,"content":"        String fromDateToString \u003d fromDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","isFullCredit":false},{"lineNumber":17,"content":"        String toDateToString \u003d toDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","isFullCredit":false},{"lineNumber":18,"content":"        return \"[E]\" + super.doneTitle() + super.getName() + \" (from: \" + fromDateToString + \" to: \" + toDateToString + \")\";","isFullCredit":false},{"lineNumber":19,"content":"    }","isFullCredit":false},{"lineNumber":20,"content":"","isFullCredit":false},{"lineNumber":21,"content":"    public String toFile() {","isFullCredit":false},{"lineNumber":22,"content":"        if (super.getDone()) {","isFullCredit":false},{"lineNumber":23,"content":"            return \"E D \" + super.getName() + \" /from \" + fromDate + \" /to \" + toDate;","isFullCredit":false},{"lineNumber":24,"content":"        } else {","isFullCredit":false},{"lineNumber":25,"content":"            return \"E N \" + super.getName() + \" /from \" + fromDate + \" /to \" + toDate;","isFullCredit":false},{"lineNumber":26,"content":"        }","isFullCredit":false},{"lineNumber":27,"content":"    }","isFullCredit":false},{"lineNumber":28,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":27}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"public class Parser {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"content":"    private TaskList taskList;","isFullCredit":false},{"lineNumber":3,"content":"","isFullCredit":false},{"lineNumber":4,"content":"    public Parser(TaskList taskList) {","isFullCredit":false},{"lineNumber":5,"content":"        this.taskList \u003d taskList;","isFullCredit":false},{"lineNumber":6,"content":"    }","isFullCredit":false},{"lineNumber":7,"content":"    // reads commands","isFullCredit":false},{"lineNumber":8,"content":"    public void readCommand(String command)","isFullCredit":false},{"lineNumber":9,"content":"    {","isFullCredit":false},{"lineNumber":10,"content":"        try {","isFullCredit":false},{"lineNumber":11,"content":"            if (command.equals(\"bye\")) {","isFullCredit":false},{"lineNumber":12,"content":"                Yapper.exit();","isFullCredit":false},{"lineNumber":13,"content":"                System.exit(0);","isFullCredit":false},{"lineNumber":14,"content":"            } else if (command.equals(\"list\")) {","isFullCredit":false},{"lineNumber":15,"content":"                taskList.returnList();","isFullCredit":false},{"lineNumber":16,"content":"            } else if (command.startsWith(\"mark\")) {","isFullCredit":false},{"lineNumber":17,"content":"                taskList.mark(command);","isFullCredit":false},{"lineNumber":18,"content":"            } else if (command.startsWith(\"unmark\")) {","isFullCredit":false},{"lineNumber":19,"content":"                taskList.unmark(command);","isFullCredit":false},{"lineNumber":20,"content":"            } else if (command.startsWith(\"todo\")) {","isFullCredit":false},{"lineNumber":21,"content":"                taskList.addToDo(command);","isFullCredit":false},{"lineNumber":22,"content":"            } else if (command.startsWith(\"deadline\")) {","isFullCredit":false},{"lineNumber":23,"content":"                taskList.addDeadline(command);","isFullCredit":false},{"lineNumber":24,"content":"            } else if (command.startsWith(\"event\")) {","isFullCredit":false},{"lineNumber":25,"content":"                taskList.addEvent(command);","isFullCredit":false},{"lineNumber":26,"content":"            } else if (command.startsWith(\"delete\")) {","isFullCredit":false},{"lineNumber":27,"content":"                taskList.deleteTask(command);","isFullCredit":false},{"lineNumber":28,"content":"            } else {","isFullCredit":false},{"lineNumber":29,"content":"                throw new YapperException(\"Yapper don\u0027t know this command :(\");","isFullCredit":false},{"lineNumber":30,"content":"            }","isFullCredit":false},{"lineNumber":31,"content":"        } catch (YapperException e) {","isFullCredit":false},{"lineNumber":32,"content":"            System.out.println(e.getMessage());","isFullCredit":false},{"lineNumber":33,"content":"        }","isFullCredit":false},{"lineNumber":34,"content":"    }","isFullCredit":false},{"lineNumber":35,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":34}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"import java.io.File;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"content":"import java.io.FileWriter;","isFullCredit":false},{"lineNumber":3,"content":"import java.io.IOException;","isFullCredit":false},{"lineNumber":4,"content":"","isFullCredit":false},{"lineNumber":5,"content":"import java.time.LocalDate;","isFullCredit":false},{"lineNumber":6,"content":"import java.util.Scanner;","isFullCredit":false},{"lineNumber":7,"content":"import java.util.ArrayList;","isFullCredit":false},{"lineNumber":8,"content":"","isFullCredit":false},{"lineNumber":9,"content":"public class Storage {","isFullCredit":false},{"lineNumber":10,"content":"    public File file;","isFullCredit":false},{"lineNumber":11,"content":"","isFullCredit":false},{"lineNumber":12,"content":"    public Storage(File file) {","isFullCredit":false},{"lineNumber":13,"content":"        this.file \u003d file;","isFullCredit":false},{"lineNumber":14,"content":"    }","isFullCredit":false},{"lineNumber":15,"content":"","isFullCredit":false},{"lineNumber":16,"content":"    public void writeHistory(ArrayList\u003cTask\u003e listOfTasks) {","isFullCredit":false},{"lineNumber":17,"content":"        try {","isFullCredit":false},{"lineNumber":18,"content":"            FileWriter filewriter \u003d new FileWriter(file);","isFullCredit":false},{"lineNumber":19,"content":"            for (Task task : listOfTasks) {","isFullCredit":false},{"lineNumber":20,"content":"                filewriter.write(task.toFile() + \"\\n\");","isFullCredit":false},{"lineNumber":21,"content":"            }","isFullCredit":false},{"lineNumber":22,"content":"            filewriter.close();","isFullCredit":false},{"lineNumber":23,"content":"        } catch (IOException e) {","isFullCredit":false},{"lineNumber":24,"content":"            System.out.println(\"Unable to write history\");","isFullCredit":false},{"lineNumber":25,"content":"        }","isFullCredit":false},{"lineNumber":26,"content":"    }","isFullCredit":false},{"lineNumber":27,"content":"","isFullCredit":false},{"lineNumber":28,"content":"    public TaskList loadHistory() {","isFullCredit":false},{"lineNumber":29,"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();","isFullCredit":false},{"lineNumber":30,"content":"        try {","isFullCredit":false},{"lineNumber":31,"content":"            if (file.exists()) {","isFullCredit":false},{"lineNumber":32,"content":"                Scanner sc \u003d new Scanner(file);","isFullCredit":false},{"lineNumber":33,"content":"                while (sc.hasNextLine()) {","isFullCredit":false},{"lineNumber":34,"content":"                    String nextline \u003d sc.nextLine();","isFullCredit":false},{"lineNumber":35,"content":"                    loadTask(listOfTasks, nextline.substring(0, 1), nextline.substring(2));","isFullCredit":false},{"lineNumber":36,"content":"                }","isFullCredit":false},{"lineNumber":37,"content":"            }","isFullCredit":false},{"lineNumber":38,"content":"        } catch (IOException e) {","isFullCredit":false},{"lineNumber":39,"content":"            System.out.println(\"Unable to load history\");","isFullCredit":false},{"lineNumber":40,"content":"        } catch (YapperException e) {","isFullCredit":false},{"lineNumber":41,"content":"            System.out.println(e.getMessage());","isFullCredit":false},{"lineNumber":42,"content":"        }","isFullCredit":false},{"lineNumber":43,"content":"","isFullCredit":false},{"lineNumber":44,"content":"        return new TaskList(listOfTasks, this);","isFullCredit":false},{"lineNumber":45,"content":"    }","isFullCredit":false},{"lineNumber":46,"content":"","isFullCredit":false},{"lineNumber":47,"content":"    public void loadTask(ArrayList\u003cTask\u003e listOfTasks, String task, String command) throws YapperException {","isFullCredit":false},{"lineNumber":48,"content":"        if (task.equals(\"T\")) {","isFullCredit":false},{"lineNumber":49,"content":"            String done \u003d command.substring(0,1);","isFullCredit":false},{"lineNumber":50,"content":"            String taskName \u003d command.substring(2);","isFullCredit":false},{"lineNumber":51,"content":"            ToDo todo \u003d new ToDo(taskName);","isFullCredit":false},{"lineNumber":52,"content":"            if (done.equals(\"D\")) {","isFullCredit":false},{"lineNumber":53,"content":"                todo.setDone(true);","isFullCredit":false},{"lineNumber":54,"content":"            }","isFullCredit":false},{"lineNumber":55,"content":"            listOfTasks.add(todo);","isFullCredit":false},{"lineNumber":56,"content":"        } else if (task.equals(\"D\")) {","isFullCredit":false},{"lineNumber":57,"content":"            String done \u003d command.substring(0,1);","isFullCredit":false},{"lineNumber":58,"content":"            String input \u003d command.substring(2);","isFullCredit":false},{"lineNumber":59,"content":"            String[] split \u003d input.split(\" /by \");","isFullCredit":false},{"lineNumber":60,"content":"            String taskName \u003d split[0];","isFullCredit":false},{"lineNumber":61,"content":"            LocalDate deadlineTime \u003d LocalDate.parse(split[1]);","isFullCredit":false},{"lineNumber":62,"content":"            Deadline deadline \u003d new Deadline(taskName, deadlineTime);","isFullCredit":false},{"lineNumber":63,"content":"            if (done.equals(\"D\")) {","isFullCredit":false},{"lineNumber":64,"content":"                deadline.setDone(true);","isFullCredit":false},{"lineNumber":65,"content":"            }","isFullCredit":false},{"lineNumber":66,"content":"            listOfTasks.add(deadline);","isFullCredit":false},{"lineNumber":67,"content":"        } else if (task.equals(\"E\")) {","isFullCredit":false},{"lineNumber":68,"content":"            String done \u003d command.substring(0,1);","isFullCredit":false},{"lineNumber":69,"content":"            String input \u003d command.substring(2);","isFullCredit":false},{"lineNumber":70,"content":"            String[] split \u003d input.split(\" /from \");","isFullCredit":false},{"lineNumber":71,"content":"            String taskName \u003d split[0];","isFullCredit":false},{"lineNumber":72,"content":"            String[] split2 \u003d split[1].split(\" /to \");","isFullCredit":false},{"lineNumber":73,"content":"            LocalDate fromDate \u003d LocalDate.parse(split2[0]);","isFullCredit":false},{"lineNumber":74,"content":"            LocalDate toDate \u003d LocalDate.parse(split2[1]);","isFullCredit":false},{"lineNumber":75,"content":"            Event event \u003d new Event(taskName, fromDate, toDate);","isFullCredit":false},{"lineNumber":76,"content":"            if (done.equals(\"D\")) {","isFullCredit":false},{"lineNumber":77,"content":"                event.setDone(true);","isFullCredit":false},{"lineNumber":78,"content":"            }","isFullCredit":false},{"lineNumber":79,"content":"            listOfTasks.add(event);","isFullCredit":false},{"lineNumber":80,"content":"        } else {","isFullCredit":false},{"lineNumber":81,"content":"            throw new YapperException(\"Error loading history\");","isFullCredit":false},{"lineNumber":82,"content":"        }","isFullCredit":false},{"lineNumber":83,"content":"    }","isFullCredit":false},{"lineNumber":84,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":83}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"public abstract class Task {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":2,"content":"    private String name;","isFullCredit":false},{"lineNumber":3,"content":"    private boolean done;","isFullCredit":false},{"lineNumber":4,"content":"","isFullCredit":false},{"lineNumber":5,"content":"    public Task(String taskName) {","isFullCredit":false},{"lineNumber":6,"content":"        name \u003d taskName;","isFullCredit":false},{"lineNumber":7,"content":"    }","isFullCredit":false},{"lineNumber":8,"content":"","isFullCredit":false},{"lineNumber":9,"content":"    public void setDone(boolean bool)","isFullCredit":false},{"lineNumber":10,"content":"    {","isFullCredit":false},{"lineNumber":11,"content":"        this.done \u003d bool;","isFullCredit":false},{"lineNumber":12,"content":"    }","isFullCredit":false},{"lineNumber":13,"content":"","isFullCredit":false},{"lineNumber":14,"content":"    public boolean getDone()","isFullCredit":false},{"lineNumber":15,"content":"    {","isFullCredit":false},{"lineNumber":16,"content":"        return this.done;","isFullCredit":false},{"lineNumber":17,"content":"    }","isFullCredit":false},{"lineNumber":18,"content":"","isFullCredit":false},{"lineNumber":19,"content":"    public String getName()","isFullCredit":false},{"lineNumber":20,"content":"    {","isFullCredit":false},{"lineNumber":21,"content":"        return this.name;","isFullCredit":false},{"lineNumber":22,"content":"    }","isFullCredit":false},{"lineNumber":23,"content":"","isFullCredit":false},{"lineNumber":24,"content":"    public String doneTitle()","isFullCredit":false},{"lineNumber":25,"content":"    {","isFullCredit":false},{"lineNumber":26,"content":"        return done ? \"[X] \" : \"[ ] \";","isFullCredit":false},{"lineNumber":27,"content":"    }","isFullCredit":false},{"lineNumber":28,"content":"","isFullCredit":false},{"lineNumber":29,"content":"    public abstract String toFile();","isFullCredit":false},{"lineNumber":30,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":29}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"content":"import java.time.format.DateTimeParseException;","isFullCredit":false},{"lineNumber":3,"content":"import java.util.ArrayList;","isFullCredit":false},{"lineNumber":4,"content":"","isFullCredit":false},{"lineNumber":5,"content":"public class TaskList {","isFullCredit":false},{"lineNumber":6,"content":"    private ArrayList\u003cTask\u003e listOfTask;","isFullCredit":false},{"lineNumber":7,"content":"    public Storage storage;","isFullCredit":false},{"lineNumber":8,"content":"","isFullCredit":false},{"lineNumber":9,"content":"    public TaskList(ArrayList\u003cTask\u003e listOfTask, Storage storage) {","isFullCredit":false},{"lineNumber":10,"content":"        this.listOfTask \u003d listOfTask;","isFullCredit":false},{"lineNumber":11,"content":"        this.storage \u003d storage;","isFullCredit":false},{"lineNumber":12,"content":"    }","isFullCredit":false},{"lineNumber":13,"content":"    public static LocalDate convertStringToDate(String date) throws YapperException {","isFullCredit":false},{"lineNumber":14,"content":"        long numberOfDash \u003d date.chars().filter(c -\u003e c \u003d\u003d \u0027/\u0027).count();","isFullCredit":false},{"lineNumber":15,"content":"        LocalDate returnDate \u003d null;","isFullCredit":false},{"lineNumber":16,"content":"","isFullCredit":false},{"lineNumber":17,"content":"        if (numberOfDash !\u003d 2) { // If there is not 2 / in date format","isFullCredit":false},{"lineNumber":18,"content":"            throw new YapperException(\"Invalid date format\\n\" +","isFullCredit":false},{"lineNumber":19,"content":"                    \"Date Format: Year/Month/Day or Year/Month/Day Time\");","isFullCredit":false},{"lineNumber":20,"content":"        } else {","isFullCredit":false},{"lineNumber":21,"content":"            String[] timeSplit \u003d date.split(\" \");","isFullCredit":false},{"lineNumber":22,"content":"            String[] dayMonthYearSplit \u003d timeSplit[0].split(\"/\");","isFullCredit":false},{"lineNumber":23,"content":"            try {","isFullCredit":false},{"lineNumber":24,"content":"                String year \u003d dayMonthYearSplit[0];","isFullCredit":false},{"lineNumber":25,"content":"                String month \u003d dayMonthYearSplit[1];","isFullCredit":false},{"lineNumber":26,"content":"                String day \u003d dayMonthYearSplit[2];","isFullCredit":false},{"lineNumber":27,"content":"","isFullCredit":false},{"lineNumber":28,"content":"                if (timeSplit.length \u003d\u003d 2) { // Date includes a time","isFullCredit":false},{"lineNumber":29,"content":"                    String time \u003d timeSplit[1];","isFullCredit":false},{"lineNumber":30,"content":"                    returnDate \u003d LocalDate.parse(String.format(\"%s-%s-%sT%s\", year, month, day, time));","isFullCredit":false},{"lineNumber":31,"content":"                } else { // Date does not include a time","isFullCredit":false},{"lineNumber":32,"content":"                    returnDate \u003d LocalDate.parse(String.format(\"%s-%s-%s\", year, month, day));","isFullCredit":false},{"lineNumber":33,"content":"                }","isFullCredit":false},{"lineNumber":34,"content":"            } catch (NumberFormatException | DateTimeParseException e) {","isFullCredit":false},{"lineNumber":35,"content":"                throw new YapperException(\"Invalid date\\n\" +","isFullCredit":false},{"lineNumber":36,"content":"                        \"Date Format: Year/Month/Day or Year/Month/Day Time\");","isFullCredit":false},{"lineNumber":37,"content":"            }","isFullCredit":false},{"lineNumber":38,"content":"        }","isFullCredit":false},{"lineNumber":39,"content":"","isFullCredit":false},{"lineNumber":40,"content":"        return returnDate;","isFullCredit":false},{"lineNumber":41,"content":"    }","isFullCredit":false},{"lineNumber":42,"content":"    public void deleteTask(String command) throws YapperException","isFullCredit":false},{"lineNumber":43,"content":"    {","isFullCredit":false},{"lineNumber":44,"content":"        if (command.length() \u003d\u003d 6) { // If command is only \"delete\"","isFullCredit":false},{"lineNumber":45,"content":"            throw new YapperException(\"Task Number cannot be empty!\");","isFullCredit":false},{"lineNumber":46,"content":"        }","isFullCredit":false},{"lineNumber":47,"content":"","isFullCredit":false},{"lineNumber":48,"content":"        String input \u003d command.substring(7);","isFullCredit":false},{"lineNumber":49,"content":"        int order \u003d Integer.parseInt(input);","isFullCredit":false},{"lineNumber":50,"content":"","isFullCredit":false},{"lineNumber":51,"content":"        if (order \u003c\u003d 0) { // If Task Number is less than 1","isFullCredit":false},{"lineNumber":52,"content":"            throw new YapperException(\"Task Number cannot be less than 1!\");","isFullCredit":false},{"lineNumber":53,"content":"        } else if (order \u003e listOfTask.size()) { // If Task Number if greater than the size of the list","isFullCredit":false},{"lineNumber":54,"content":"            throw new YapperException(\"Task Number cannot be more than size of list!\");","isFullCredit":false},{"lineNumber":55,"content":"        } else {","isFullCredit":false},{"lineNumber":56,"content":"            Task task \u003d listOfTask.get(order - 1);","isFullCredit":false},{"lineNumber":57,"content":"            listOfTask.remove(order - 1);","isFullCredit":false},{"lineNumber":58,"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \\n\" +","isFullCredit":false},{"lineNumber":59,"content":"                    task + \"\\nNow you have \" + listOfTask.size() + \" tasks in the list\");","isFullCredit":false},{"lineNumber":60,"content":"        }","isFullCredit":false},{"lineNumber":61,"content":"        storage.writeHistory(listOfTask);","isFullCredit":false},{"lineNumber":62,"content":"    }","isFullCredit":false},{"lineNumber":63,"content":"","isFullCredit":false},{"lineNumber":64,"content":"    public void addToDo(String command) throws YapperException","isFullCredit":false},{"lineNumber":65,"content":"    {","isFullCredit":false},{"lineNumber":66,"content":"        if (command.length() \u003d\u003d 4) { // If command is only \"todo\"","isFullCredit":false},{"lineNumber":67,"content":"            throw new YapperException(\"Description for ToDo cannot be empty!\");","isFullCredit":false},{"lineNumber":68,"content":"        }","isFullCredit":false},{"lineNumber":69,"content":"        String input \u003d command.substring(5);","isFullCredit":false},{"lineNumber":70,"content":"        ToDo todo \u003d new ToDo(input);","isFullCredit":false},{"lineNumber":71,"content":"        addTask(todo);","isFullCredit":false},{"lineNumber":72,"content":"    }","isFullCredit":false},{"lineNumber":73,"content":"","isFullCredit":false},{"lineNumber":74,"content":"    public void addDeadline(String command) throws YapperException","isFullCredit":false},{"lineNumber":75,"content":"    {","isFullCredit":false},{"lineNumber":76,"content":"        if (command.length() \u003d\u003d 8) { // If command is only \"deadline\"","isFullCredit":false},{"lineNumber":77,"content":"            throw new YapperException(\"Description for Deadline cannot be empty!\");","isFullCredit":false},{"lineNumber":78,"content":"        }","isFullCredit":false},{"lineNumber":79,"content":"        String input \u003d command.substring(9);","isFullCredit":false},{"lineNumber":80,"content":"        String[] split \u003d input.split(\" /by \");","isFullCredit":false},{"lineNumber":81,"content":"        if (split.length \u003d\u003d 1) { // If command is deadline not followed /by","isFullCredit":false},{"lineNumber":82,"content":"            throw new YapperException(\"Deadline require /by command with Deadline Time\");","isFullCredit":false},{"lineNumber":83,"content":"        } else if (split[0].isEmpty()) { // If command is \"deadline /by something\"","isFullCredit":false},{"lineNumber":84,"content":"            throw new YapperException(\"Deadline Task is empty!\");","isFullCredit":false},{"lineNumber":85,"content":"        } else if (split[1].isEmpty()) { // If command is \"deadline something /by\"","isFullCredit":false},{"lineNumber":86,"content":"            throw new YapperException(\"Deadline Time is empty!\");","isFullCredit":false},{"lineNumber":87,"content":"        } else {","isFullCredit":false},{"lineNumber":88,"content":"            LocalDate deadlineDate \u003d convertStringToDate(split[1]);","isFullCredit":false},{"lineNumber":89,"content":"            Deadline deadline \u003d new Deadline(split[0], deadlineDate);","isFullCredit":false},{"lineNumber":90,"content":"            addTask(deadline);","isFullCredit":false},{"lineNumber":91,"content":"        }","isFullCredit":false},{"lineNumber":92,"content":"    }","isFullCredit":false},{"lineNumber":93,"content":"","isFullCredit":false},{"lineNumber":94,"content":"    public void addEvent(String command) throws YapperException","isFullCredit":false},{"lineNumber":95,"content":"    {","isFullCredit":false},{"lineNumber":96,"content":"        if (command.length() \u003d\u003d 5) { // If command is only \"event\"","isFullCredit":false},{"lineNumber":97,"content":"            throw new YapperException(\"Event Task cannot be empty!\");","isFullCredit":false},{"lineNumber":98,"content":"        }","isFullCredit":false},{"lineNumber":99,"content":"        String input \u003d command.substring(6);","isFullCredit":false},{"lineNumber":100,"content":"        String[] split \u003d input.split(\" /from \");","isFullCredit":false},{"lineNumber":101,"content":"        String[] split2 \u003d split[1].split(\" /to \");","isFullCredit":false},{"lineNumber":102,"content":"        if (split.length \u003d\u003d 1) { // If command does not have /from","isFullCredit":false},{"lineNumber":103,"content":"            throw new YapperException(\"Event require /from command with Start Time\");","isFullCredit":false},{"lineNumber":104,"content":"        } else if (split2.length \u003d\u003d 1) { // If command does not have /to","isFullCredit":false},{"lineNumber":105,"content":"            throw new YapperException(\"Event require /to command with End Time\");","isFullCredit":false},{"lineNumber":106,"content":"        } else if (split[0].isEmpty()) { // If command does not have a Task","isFullCredit":false},{"lineNumber":107,"content":"            throw new YapperException(\"Event Task is empty!\");","isFullCredit":false},{"lineNumber":108,"content":"        } else if (split2[0].isEmpty()) { // If command does not have a Start Time","isFullCredit":false},{"lineNumber":109,"content":"            throw new YapperException(\"Event Start Time is empty!\");","isFullCredit":false},{"lineNumber":110,"content":"        } else if (split2[1].isEmpty()) { // If command does not have an End Time","isFullCredit":false},{"lineNumber":111,"content":"            throw new YapperException(\"Event End Time is empty!\");","isFullCredit":false},{"lineNumber":112,"content":"        } else {","isFullCredit":false},{"lineNumber":113,"content":"            LocalDate fromDate \u003d convertStringToDate(split2[0]);","isFullCredit":false},{"lineNumber":114,"content":"            LocalDate toDate \u003d convertStringToDate(split2[1]);","isFullCredit":false},{"lineNumber":115,"content":"            Event event \u003d new Event(split[0], fromDate, toDate);","isFullCredit":false},{"lineNumber":116,"content":"            addTask(event);","isFullCredit":false},{"lineNumber":117,"content":"        }","isFullCredit":false},{"lineNumber":118,"content":"    }","isFullCredit":false},{"lineNumber":119,"content":"","isFullCredit":false},{"lineNumber":120,"content":"    // add a new task into the list","isFullCredit":false},{"lineNumber":121,"content":"    public void addTask(Task task)","isFullCredit":false},{"lineNumber":122,"content":"    {","isFullCredit":false},{"lineNumber":123,"content":"        listOfTask.add(task);","isFullCredit":false},{"lineNumber":124,"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" +","isFullCredit":false},{"lineNumber":125,"content":"                task + \"\\nNow you have \" + listOfTask.size() + \" tasks in the list\");","isFullCredit":false},{"lineNumber":126,"content":"        storage.writeHistory(listOfTask);","isFullCredit":false},{"lineNumber":127,"content":"    }","isFullCredit":false},{"lineNumber":128,"content":"","isFullCredit":false},{"lineNumber":129,"content":"    // mark a task as done","isFullCredit":false},{"lineNumber":130,"content":"    public void mark(String command) throws YapperException","isFullCredit":false},{"lineNumber":131,"content":"    {","isFullCredit":false},{"lineNumber":132,"content":"        if (command.length() \u003d\u003d 4) { // If command is only \"mark\"","isFullCredit":false},{"lineNumber":133,"content":"            throw new YapperException(\"Task Number cannot be empty!\");","isFullCredit":false},{"lineNumber":134,"content":"        }","isFullCredit":false},{"lineNumber":135,"content":"","isFullCredit":false},{"lineNumber":136,"content":"        String input \u003d command.substring(5);","isFullCredit":false},{"lineNumber":137,"content":"        int order \u003d Integer.parseInt(input);","isFullCredit":false},{"lineNumber":138,"content":"        if (order \u003c\u003d 0) { // If Task Number is less than 1","isFullCredit":false},{"lineNumber":139,"content":"            throw new YapperException(\"Task Number cannot be less than 1!\");","isFullCredit":false},{"lineNumber":140,"content":"        } else if (order \u003e listOfTask.size()) { // If Task Number is greater than size of the list","isFullCredit":false},{"lineNumber":141,"content":"            throw new YapperException(\"Task Number cannot be more than size of list!\");","isFullCredit":false},{"lineNumber":142,"content":"        } else {","isFullCredit":false},{"lineNumber":143,"content":"            Task taskToMark \u003d listOfTask.get(order - 1);","isFullCredit":false},{"lineNumber":144,"content":"            taskToMark.setDone(true);","isFullCredit":false},{"lineNumber":145,"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\" +","isFullCredit":false},{"lineNumber":146,"content":"                    taskToMark);","isFullCredit":false},{"lineNumber":147,"content":"        }","isFullCredit":false},{"lineNumber":148,"content":"        storage.writeHistory(listOfTask);","isFullCredit":false},{"lineNumber":149,"content":"    }","isFullCredit":false},{"lineNumber":150,"content":"","isFullCredit":false},{"lineNumber":151,"content":"    // umark a task as undone","isFullCredit":false},{"lineNumber":152,"content":"    public void unmark(String command) throws YapperException","isFullCredit":false},{"lineNumber":153,"content":"    {","isFullCredit":false},{"lineNumber":154,"content":"        if (command.length() \u003d\u003d 6) { // If command is only \"unmark\"","isFullCredit":false},{"lineNumber":155,"content":"            throw new YapperException(\"Task Number cannot be empty!\");","isFullCredit":false},{"lineNumber":156,"content":"        }","isFullCredit":false},{"lineNumber":157,"content":"","isFullCredit":false},{"lineNumber":158,"content":"        String input \u003d command.substring(7);","isFullCredit":false},{"lineNumber":159,"content":"        int order \u003d Integer.parseInt(input);","isFullCredit":false},{"lineNumber":160,"content":"        if (order \u003c\u003d 0) { // If Task Number is less than 1","isFullCredit":false},{"lineNumber":161,"content":"            throw new YapperException(\"Task Number cannot be less than 1!\");","isFullCredit":false},{"lineNumber":162,"content":"        } else if (order \u003e listOfTask.size()) { // If Task Number is greater than size of the list","isFullCredit":false},{"lineNumber":163,"content":"            throw new YapperException(\"Task Number cannot be more than size of list!\");","isFullCredit":false},{"lineNumber":164,"content":"        } else {","isFullCredit":false},{"lineNumber":165,"content":"            Task taskToUnmark \u003d listOfTask.get(order - 1);","isFullCredit":false},{"lineNumber":166,"content":"            taskToUnmark.setDone(false);","isFullCredit":false},{"lineNumber":167,"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet: \\n\" +","isFullCredit":false},{"lineNumber":168,"content":"                    taskToUnmark);","isFullCredit":false},{"lineNumber":169,"content":"        }","isFullCredit":false},{"lineNumber":170,"content":"        storage.writeHistory(listOfTask);","isFullCredit":false},{"lineNumber":171,"content":"    }","isFullCredit":false},{"lineNumber":172,"content":"","isFullCredit":false},{"lineNumber":173,"content":"    // return list","isFullCredit":false},{"lineNumber":174,"content":"    public void returnList()","isFullCredit":false},{"lineNumber":175,"content":"    {","isFullCredit":false},{"lineNumber":176,"content":"        System.out.println(\"Here are the tasks in your list: \");","isFullCredit":false},{"lineNumber":177,"content":"        int order \u003d 1;","isFullCredit":false},{"lineNumber":178,"content":"        for (Task task : listOfTask) {","isFullCredit":false},{"lineNumber":179,"content":"            System.out.println(order + \".\" + task);","isFullCredit":false},{"lineNumber":180,"content":"            order++;","isFullCredit":false},{"lineNumber":181,"content":"        }","isFullCredit":false},{"lineNumber":182,"content":"    }","isFullCredit":false},{"lineNumber":183,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":182}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":2,"content":"    public ToDo(String taskName)","isFullCredit":false},{"lineNumber":3,"content":"    {","isFullCredit":false},{"lineNumber":4,"content":"        super(taskName);","isFullCredit":false},{"lineNumber":5,"content":"    }","isFullCredit":false},{"lineNumber":6,"content":"","isFullCredit":false},{"lineNumber":7,"content":"    @Override","isFullCredit":false},{"lineNumber":8,"content":"    public String toString()","isFullCredit":false},{"lineNumber":9,"content":"    {","isFullCredit":false},{"lineNumber":10,"content":"        return \"[T]\" + super.doneTitle() + super.getName();","isFullCredit":false},{"lineNumber":11,"content":"    }","isFullCredit":false},{"lineNumber":12,"content":"","isFullCredit":false},{"lineNumber":13,"content":"    public String toFile() {","isFullCredit":false},{"lineNumber":14,"content":"        if (getDone()) {","isFullCredit":false},{"lineNumber":15,"content":"            return \"T D \" + super.getName();","isFullCredit":false},{"lineNumber":16,"content":"        } else {","isFullCredit":false},{"lineNumber":17,"content":"            return \"T N \" + super.getName();","isFullCredit":false},{"lineNumber":18,"content":"        }","isFullCredit":false},{"lineNumber":19,"content":"    }","isFullCredit":false},{"lineNumber":20,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":19}},{"path":"src/main/java/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":2,"content":"","isFullCredit":false},{"lineNumber":3,"content":"public class UI {","isFullCredit":false},{"lineNumber":4,"content":"    private Parser parser;","isFullCredit":false},{"lineNumber":5,"content":"","isFullCredit":false},{"lineNumber":6,"content":"    public UI(Parser parser) {","isFullCredit":false},{"lineNumber":7,"content":"        this.parser \u003d parser;","isFullCredit":false},{"lineNumber":8,"content":"    }","isFullCredit":false},{"lineNumber":9,"content":"","isFullCredit":false},{"lineNumber":10,"content":"    public void readInput() {","isFullCredit":false},{"lineNumber":11,"content":"        while (true) {","isFullCredit":false},{"lineNumber":12,"content":"            Scanner sc \u003d new Scanner(System.in);","isFullCredit":false},{"lineNumber":13,"content":"            String text \u003d sc.nextLine();","isFullCredit":false},{"lineNumber":14,"content":"            parser.readCommand(text);","isFullCredit":false},{"lineNumber":15,"content":"        }","isFullCredit":false},{"lineNumber":16,"content":"    }","isFullCredit":false},{"lineNumber":17,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":16}},{"path":"src/main/java/Yapper.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"import java.io.File;","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jevan13"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jevan13"},"content":"public class Yapper {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jevan13"},"content":"    public static UI ui;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jevan13"},"content":"    public static Parser parser;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jevan13"},"content":"    public static Storage storage;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jevan13"},"content":"    public static TaskList taskList;","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jevan13"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jevan13"},"content":"    public Yapper(String fileName) {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jevan13"},"content":"        File file \u003d new File(fileName);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jevan13"},"content":"        storage \u003d new Storage(file);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jevan13"},"content":"        taskList \u003d storage.loadHistory();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jevan13"},"content":"        parser \u003d new Parser(taskList);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jevan13"},"content":"        ui \u003d new UI(parser);","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jevan13"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jevan13"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jevan13"},"content":"        String fileName \u003d \"./src/main/java/YapperHistoryFile\";","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jevan13"},"content":"        new Yapper(fileName).run();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jevan13"},"content":"    }","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jevan13"},"content":"","lastModifiedDate":"2024-08-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jevan13"},"content":"    public void run() {","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jevan13"},"content":"        // greeting message","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jevan13"},"content":"        System.out.println(\"Hello! I\u0027m Yapper\\n\" +","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jevan13"},"content":"                \"What can I do for you?\\n\");","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jevan13"},"content":"        taskList.returnList();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jevan13"},"content":"","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jevan13"},"content":"        ui.readInput();","lastModifiedDate":"2024-08-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jevan13"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jevan13"},"content":"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jevan13"},"content":"    // exits when the user types the command \"bye\"","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jevan13"},"content":"    public static void exit()","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jevan13"},"content":"    {","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jevan13"},"content":"        System.out.println(\"Yapper shall yap next time!\");","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jevan13"},"content":"    }","lastModifiedDate":"2024-08-22","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jevan13"},"content":"}","lastModifiedDate":"2024-08-22","isFullCredit":false}],"authorContributionMap":{"jevan13":35}},{"path":"src/main/java/YapperException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"public class YapperException extends Exception {","lastModifiedDate":"2024-08-27","isFullCredit":false},{"lineNumber":2,"content":"    public YapperException(String message) {","isFullCredit":false},{"lineNumber":3,"content":"        super(message);","isFullCredit":false},{"lineNumber":4,"content":"    }","isFullCredit":false},{"lineNumber":5,"content":"}","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"null":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jevan13"},"content":"todo borrow book","lastModifiedDate":"2024-08-23","isFullCredit":false}],"authorContributionMap":{"jevan13":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jevan13"},"content":"java -classpath ..\\bin Yapper \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jevan13"},"content":"java -classpath ../bin Yapper \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-08-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"jevan13":1,"-":37}}]
