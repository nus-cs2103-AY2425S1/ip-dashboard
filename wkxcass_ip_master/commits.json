{"authorDailyContributionsMap":{"wkxcass":[{"date":"2024-08-17","commitResults":[{"hash":"21afdc17105bc797c9cfdefb022b4b42d627f9ed","isMergeCommit":false,"messageTitle":"MoiMoi.java: implement skeletal version","messageBody":"Let\u0027s rename Duke.java into MoiMoi.java, and implement a skeletal\nversion of the chatbot that simply greets the user and exits.\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":10}}},{"hash":"a75b4ef7b3a229e291240970e557ff9f8412eefa","isMergeCommit":false,"messageTitle":"MoiMoi.java: add echoing functionality","messageBody":"Let\u0027s add an echoing functionality to MoiMoi.java such that it echoes\ncommands entered by the user, and exits when the user types the command\n\"bye\".\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":4}}},{"hash":"95ffbc75932c5f0f448b28badc615379c8bfe52f","isMergeCommit":false,"messageTitle":"MoiMoi.java: implement \"add\" and \"list\" functionalities","messageBody":"Let\u0027s,\n* add a functionality for the chatbot to store whatever text entered by\nthe user\n* add a functionality to display (in list-form) all inputs that have\nbeen stored, when requested by the user\n","tags":["Level-2","A-Collections"],"fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":5}}},{"hash":"32c762dbe7e2c9d1eebd4749d6c652137c0c5dfc","isMergeCommit":false,"messageTitle":"Add mark/unmark functionalities","messageBody":"Let\u0027s,\n* create a class named \"Task\" to represent tasks stored and tracked by\nthe chatbot\n* add a functionality for the chatbot to mark tasks as done\n* add a functionality for the chatbot to unmark completed tasks (ie.\nmark tasks as undone)\n\nThe \"Task\" class encapsulates a String description, and the completion\nstatus of a task.\n","tags":["Level-3","A-Classes"],"fileTypesAndContributionMap":{"java":{"insertions":53,"deletions":7}}},{"hash":"6652a3af0b7569eb566ddd74ea90539e1c451cd3","isMergeCommit":false,"messageTitle":"Add Parser.java","messageBody":"Let\u0027s add a class named Parser to streamline input parsing, by\nseparating the command and arguments. This modular approach enhances\nmaintainability, making future modifications (if any) to input handling\nmore manageable.\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":0}}},{"hash":"0f9ec57c3b09c7d583d19d9050e7f6011ad023e4","isMergeCommit":false,"messageTitle":"Add support for tracking tasks of various types","messageBody":"Let\u0027s,\n* create subclasses of Task, namely Todo, Event and Deadline,\nleveraging inheritance to extend shared properties and behaviors\n* add functionalities for the chatbot to appropriately handle (eg.\nstore, track etc.) tasks of the aforementioned types\n","tags":["Level-4","A-Inheritance"],"fileTypesAndContributionMap":{"java":{"insertions":93,"deletions":18}}}]},{"date":"2024-08-18","commitResults":[{"hash":"e7625a659b8d063aa0e4c690cb3a54aceb3204c2","isMergeCommit":false,"messageTitle":"Semi-automate text UI testing","messageBody":"The input/output redirection technique is used to semi-automate the\ntesting of MoiMoi.\n\nLet\u0027s,\n* edit runtest.bat, substituting any instance of \"Duke\" into\n\"MoiMoi\"\n* add a file containing a series of user inputs, named input.txt\n* add a file containing expected outputs corresponding to the\naforementioned inputs, named EXPECTED.TXT\n\nMoiMoi\u0027s logo has been changed (in MoiMoi.java). It now consists of\nmappable ASCII characters for encoding.\n","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":13,"deletions":0},"java":{"insertions":6,"deletions":19},"bat":{"insertions":1,"deletions":1}}}]},{"date":"2024-08-19","commitResults":[{"hash":"3de5af3e37247722f30f155c4193b4c2860b0abb","isMergeCommit":false,"messageTitle":"Add exception classes","messageBody":"Let\u0027s create exception classes to facilitate error-handling.\n\nThe abstract class \"MoiMoiException\" represents all exceptions\nspecific to MoiMoi. Its subclasses, \"InvalidCommandException\",\n\"MissingArgumentException\" and \"InvalidArgumentException\" address\nspecific errors that MoiMoi may encounter during execution.\n","tags":["A-Exceptions"],"fileTypesAndContributionMap":{"java":{"insertions":33,"deletions":0}}},{"hash":"ab58c6edae3f0f4daf3e6ba9b38c5ee7bdb47203","isMergeCommit":false,"messageTitle":"Handle basic errors","messageBody":"Let\u0027s,\n* Edit MoiMoi.java (and Parser.java) such that it appropriately\nhandles errors, mainly due to incorrect user inputs\n* include error-related scenarios, to be tested on MoiMoi, in\ninput.txt and EXPECTED.TXT\n","tags":["Level-5"],"fileTypesAndContributionMap":{"txt":{"insertions":8,"deletions":1},"java":{"insertions":71,"deletions":47}}},{"hash":"d07a9f2fc43f7ad692e073075929ec1ac0c9c3c5","isMergeCommit":false,"messageTitle":"MoiMoi.java: add delete functionality","messageBody":"MoiMoi supports adding tasks, but is unable to delete tasks\nspecified by the user.\n\nUsers may then find it hard to manage their task lists effectively,\nespecially when they need to remove tasks.\n\nLet\u0027s,\n* modify MoiMoi.java to support deleting tasks as specified by the\nuser\n* include corresponding tests in input.txt and EXPECTED.TXT\n\nThis ensures flexibility in MoiMoi\u0027s task management operations,\naligning with user expectations for basic task management\nfunctionalities.\n","tags":["Level-6"],"fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":1},"java":{"insertions":15,"deletions":0}}}]},{"date":"2024-08-21","commitResults":[{"hash":"20c16b82f2083a9baeee083929b7872111bab4b8","isMergeCommit":false,"messageTitle":"MoiMoi.java: remove indentation for \u0027case\u0027 branches","messageBody":"The \u0027case\u0027 branches in MoiMoi.java are indented.\n\nThis can lead to unnecessary nesting and doesn\u0027t align with the\nmodule\u0027s coding standards.\n\nLet\u0027s remove indentations for \u0027case\u0027 branches in MoiMoi.java.\n\nThis improves code readability and ensures compliance with the\nmodule’s coding standards.\n","fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":23}}}]},{"date":"2024-08-22","commitResults":[{"hash":"d778a7e9df3d32409580c55f9b5e43ea9765e1d5","isMergeCommit":false,"messageTitle":"Add storage-specific String method for task classes","messageBody":"Tasks have a \"toString\" method that returns a String representation\nof the task\u0027s information.\n\nHowever, tasks need a separate way to format their information as a\nString for storage purposes, which is different from the format\nused in the UI.\n\nLet\u0027s,\n* create a new field in Task named \"typeIcon\" to generalize task\ntypes\n* implement a new method that returns a String of the task’s\ninformation formatted for storage\n\nThis separation ensures that the data stored in files is consistent\nwith the expected format during loading, while keeping the UI\nrepresentation clean and focused on display purposes.\n","fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":22}}},{"hash":"fc32c027f678233e3b291df6565d05fb31c8a912","isMergeCommit":false,"messageTitle":"Add storage-related exception classes","messageBody":"MoiMoi lacks specific exception classes to handle IO errors and\ncorrupted data files during storage operations.\n\nHandling storage-related errors will make the codebase more robust and\nallow clearer error messaging.\n\nLet\u0027s,\n* create an exception class, named \"StorageCorruptedException\", to\nrepresent errors related to corrupted data files (i.e., when the content\nis not in its expected format)\n* create an exception class, named \"StorageIOException\", to represent IO\nerrors that may occur during data file creation or saving\n\nThese exceptions encapsulate storage-related errors, which can be easily\nhandled and managed.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":0}}},{"hash":"ac7bea59f2fb2e7606411293f1f9c0db76685cc2","isMergeCommit":false,"messageTitle":"MoiMoi.java: add storage functionality","messageBody":"MoiMoi is unable to persist tasks between sessions.\n\nPersistent storage is an expected task management feature, as users need\nto save tasks and load them in future sessions.\n\nLet\u0027s,\n* create a class named \"Storage\" to encapsulate the data file used\nto store tasks, along with methods for loading and saving. If the data\nfile does not exist, a new one will automatically be created\n* modify MoiMoi.java to utilize the Storage class for task persistence\n\nBy centralizing storage logic in a class, the codebase becomes cleaner\nand easier to maintain. Users are enabled to save and load tasks between\nprogram runs.\n","fileTypesAndContributionMap":{"java":{"insertions":112,"deletions":11}}},{"hash":"08827b8daa54b7a8a690bff5cfd4c7c0961992eb","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-7\u0027","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{}}]},{"date":"2024-08-23","commitResults":[{"hash":"de819d2bdd285f8ea86188576fa6ef28f2eda101","isMergeCommit":false,"messageTitle":"Add date-time-related exception classes","messageBody":"MoiMoi lacks specific exception classes to handle date-time errors.\n\nHandling date-time-related errors will make the codebase more robust and\nallow clearer error messaging.\n\nLet\u0027s,\n* create an exception class, named \"InvalidDateTimeException\", to\nrepresent errors related to incorrect formatting of date and time\n* create an exception class, named \"InvalidDateTimeRangeException\", to\nrepresent errors in which the starting time of an event is later than\nits ending time\n* rename \"InvalidArgumentException\" as \"InvalidIndexException\" to\nspecifically handle errors related to incorrect task indices\n\n\"InvalildDateTimeException\" and \"InvalildDateTimeRangeException\"\nencapsulate date-time-related errors, making them easier to handle and\nmanage.\n","fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":8}}},{"hash":"3bcd61b9c42840b4ba179c15525645c4dd7ad4e9","isMergeCommit":false,"messageTitle":"Store date-times as java.time.LocalDateTime","messageBody":"Date-times are stored as strings in \"Deadline\" and \"Event\" tasks.\n\nMoiMoi is unable to perform date-time validation, which can lead to\nerrors and reduces the effectiveness of task management.\n\nLet\u0027s,\n* store date-time information as \"java.time.LocalDateTime\" objects in\nboth \"Deadline\" and \"Event\" tasks\n* modify MoiMoi.java and Storage.java to handle date-time parsing and\nformatting\n* include date-time-related scenarios, to be tested on MoiMoi, in\ninput.txt and EXPECTED.TXT\n\nUtilizing LocalDateTime provides robust handling of date-time\ninformation in the chatbot, facilitating better task management.\n","fileTypesAndContributionMap":{"txt":{"insertions":12,"deletions":3},"java":{"insertions":70,"deletions":25}}},{"hash":"6eaab9060020c56f02a66973ddb6c8a983ae6ce2","isMergeCommit":false,"messageTitle":"Generalize InvalidDateTimeException","messageBody":"The \"InvalidDateTimeException\" is thrown only for \"LocalDateTime\"\nparsing errors.\n\nThe \"LocalDate\" class to be introduced later can also throw parsing\nerrors. These are also expected to be handled using the\n\"InvalidDateTimeException\" class.\n\nLet\u0027s,\n* generalize \"InvalidDateTimeException\" to represent errors thrown by\neither \"LocalDateTime\" and \"LocalDate\" parsing methods\n* ensure that the exception returns appropriate error messages specific\nto the type of date-time object being parsed\n\nThis implementation prepares MoiMoi to handle both \"LocalDateTime\" and\n\"LocalDate\" parsing errors. Users are able to receive clear and relevant\nerror messages if such issues arise.\n","fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":2}}},{"hash":"8481e0775f853663265efdde4aa786da9701024d","isMergeCommit":false,"messageTitle":"Add filter-by-date functionality","messageBody":"MoiMoi currently lacks functionality that makes proper use of date-time\nobjects after they are validated.\n\nHandling date-time objects meaningfully can enhance task management,\nspecifically by allowing users to filter tasks by specific dates.\n\nLet\u0027s,\n* create a method within tasks to check if they occur on a specific date\n* add a command for MoiMoi that filters and prints deadlines/events\noccurring on a specific date\n* include date-filtering-related scenarios, to be tested on MoiMoi, in\ninput.txt and EXPECTED.TXT\n\nThis provides meaningful use of date and time, as users are able to\nfilter and view tasks based on specific dates.\n","fileTypesAndContributionMap":{"txt":{"insertions":7,"deletions":1},"java":{"insertions":50,"deletions":2}}},{"hash":"3208999e736242e6662d0fc69a5445308c7d4bc5","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-8\u0027","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{}},{"hash":"a4bf7b8f4ba0449692a13057109f6bf6eace7f3d","isMergeCommit":false,"messageTitle":"Extract Ui and TaskList classes","messageBody":"MoiMoi handles user interactions and task management directly within its\nmain class.\n\nThis makes the program not easy to maintain and extend.\n\nLet\u0027s,\n* extract a \"Ui\" class to handle I/O interactions with the user\n* extract a \"TaskList\" class to manage the task list and provide\noperations to add/delete tasks\n* modify MoiMoi.java and Storage.java to utilize the aforementioned\nclasses, within their operations\n\nThis makes the codebase more modular and maintainable.\n","fileTypesAndContributionMap":{"java":{"insertions":132,"deletions":55}}}]},{"date":"2024-08-24","commitResults":[{"hash":"33831e13079d4d1d3fafcd233c5c2d1393dd3fcc","isMergeCommit":false,"messageTitle":"Add command classes","messageBody":"MoiMoi\u0027s operations (and their corresponding commands) are represented\nas strings.\n\nThis approach limits extensibility and makes the codebase hard to\nmaintain.\n\nLet\u0027s,\n* create an abstract \"Command\" class to represent chatbot commands\n* implement subclasses of \"Command\" for each specific operation,\nencapsulating the execution logic\n\nThis improves the code structure and makes it easier to extend or modify\ncommands in the future.\n","fileTypesAndContributionMap":{"java":{"insertions":201,"deletions":0}}},{"hash":"3248bdac814f7fd4a6b0aa0a8881f6f60ef72dc3","isMergeCommit":false,"messageTitle":"MoiMoi.java: utilize Parser class and Command objects","messageBody":"MoiMoi.java contains both input parsing logic and the logic for\nexecuting all operations.\n\nThis makes the codebase difficult to maintain and extend.\n\nLet\u0027s,\n* refactor \"Parser\" methods to convert user input directly into\nexecutable Command objects\n* remove parsing and command execution logic from MoiMoi.java, while\ndelegating these responsibilities to both \"Parser\" and \"Command\" classes\n\nThis simplifies MoiMoi.java and improves maintainability with a better\nseparation of concerns.\n","fileTypesAndContributionMap":{"java":{"insertions":45,"deletions":149}}},{"hash":"560a52bc6e00d9a2c9b83322bf45ebe07c0550bb","isMergeCommit":false,"messageTitle":"Adjust UI display formats","messageBody":"Subtle modifications in MoiMoi\u0027s running logic have led to slight\nchanges in the UI display formats.\n\nAdjustments are necessary to ensure that the output layout remains\nconsistent with the desired format.\n\nLet\u0027s,\n* modify Ui.java to align the output format with the updated program\nlogic\n* update EXPECTED.TXT to reflect the desired output\n\nThis ensures that the UI remains intuitive, clear and consistent.\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"83fe2dde18301ee885743de348c8901dfce073a5","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-MoreOOP\u0027","messageBody":"","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{}},{"hash":"e70901c465bf5d1e4ce98f1aeb30c40c118716cc","isMergeCommit":false,"messageTitle":"Use enumerations for commands","messageBody":"During input parsing, commands are directly converted from strings into\n\"Command\" objects.\n\nThis approach lacks structure and is prone to errors due to direct raw\nstring handling.\n\nLet\u0027s,\n* create an Enum named \"CommandEnum\" to represent all command types\nsupported by MoiMoi\n* modify Parser.java and AddCommand.java to utilize command enumerations\n\nThis enhances the robustness and clarity of the codebase, by replacing\nraw string handling with a more structured approach.\n","tags":["A-Enums"],"fileTypesAndContributionMap":{"java":{"insertions":36,"deletions":20}}}]}]},"authorFileTypeContributionMap":{"wkxcass":{"java":709,"md":0,"fxml":0,"sh":0,"bat":1,"gradle":0,"txt":38}},"authorContributionVariance":{"wkxcass":26705.36},"authorDisplayNameMap":{"wkxcass":"CS2103T-F08-2 WONG.. XIN"}}
